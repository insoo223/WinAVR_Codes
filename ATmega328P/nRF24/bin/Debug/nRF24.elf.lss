
bin\Debug\nRF24.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000008  00800100  0000369e  00003732  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         0000369e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000007  00800108  00800108  0000373a  2**0
                  ALLOC
  3 .debug_aranges 00000180  00000000  00000000  0000373a  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 000002ea  00000000  00000000  000038ba  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00002eba  00000000  00000000  00003ba4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 000012ff  00000000  00000000  00006a5e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00002178  00000000  00000000  00007d5d  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002c0  00000000  00000000  00009ed8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000495  00000000  00000000  0000a198  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000a62d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000aebb  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 ca 13 	jmp	0x2794	; 0x2794 <__vector_1>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 81 14 	jmp	0x2902	; 0x2902 <__vector_18>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_clear_bss>:
      74:	11 e0       	ldi	r17, 0x01	; 1
      76:	a8 e0       	ldi	r26, 0x08	; 8
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	01 c0       	rjmp	.+2      	; 0x7e <.do_clear_bss_start>

0000007c <.do_clear_bss_loop>:
      7c:	1d 92       	st	X+, r1

0000007e <.do_clear_bss_start>:
      7e:	af 30       	cpi	r26, 0x0F	; 15
      80:	b1 07       	cpc	r27, r17
      82:	e1 f7       	brne	.-8      	; 0x7c <.do_clear_bss_loop>

00000084 <__do_copy_data>:
      84:	11 e0       	ldi	r17, 0x01	; 1
      86:	a0 e0       	ldi	r26, 0x00	; 0
      88:	b1 e0       	ldi	r27, 0x01	; 1
      8a:	ee e9       	ldi	r30, 0x9E	; 158
      8c:	f6 e3       	ldi	r31, 0x36	; 54
      8e:	02 c0       	rjmp	.+4      	; 0x94 <.do_copy_data_start>

00000090 <.do_copy_data_loop>:
      90:	05 90       	lpm	r0, Z+
      92:	0d 92       	st	X+, r0

00000094 <.do_copy_data_start>:
      94:	a8 30       	cpi	r26, 0x08	; 8
      96:	b1 07       	cpc	r27, r17
      98:	d9 f7       	brne	.-10     	; 0x90 <.do_copy_data_loop>
      9a:	0e 94 31 13 	call	0x2662	; 0x2662 <main>
      9e:	0c 94 4d 1b 	jmp	0x369a	; 0x369a <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <clockprescale>:
uint8_t *arr;


/*****************Ã¤ndrar klockan till 8MHz ist fÃ¶r 1MHz*****************************/
void clockprescale(void)
{
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	cd b7       	in	r28, 0x3d	; 61
      ac:	de b7       	in	r29, 0x3e	; 62
    CLKPR = 0b10000000;	//Prepare the chip for a change of clock prescale (CLKPCE=1 and the rest zeros)
      ae:	e1 e6       	ldi	r30, 0x61	; 97
      b0:	f0 e0       	ldi	r31, 0x00	; 0
      b2:	80 e8       	ldi	r24, 0x80	; 128
      b4:	80 83       	st	Z, r24
    CLKPR = 0b00000000;	//Wanted clock prescale (CLKPCE=0 and the four first bits CLKPS0-3 sets division factor = 1)
      b6:	e1 e6       	ldi	r30, 0x61	; 97
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	10 82       	st	Z, r1
    //See page 38 in datasheet
}
      bc:	cf 91       	pop	r28
      be:	df 91       	pop	r29
      c0:	08 95       	ret

000000c2 <usart_init>:

/*****************USART*****************************/  //Skickar data frÃ¥n chip till com-port simulator pÃ¥ datorn
//Initiering

void usart_init(void)
{
      c2:	df 93       	push	r29
      c4:	cf 93       	push	r28
      c6:	00 d0       	rcall	.+0      	; 0xc8 <usart_init+0x6>
      c8:	00 d0       	rcall	.+0      	; 0xca <usart_init+0x8>
      ca:	cd b7       	in	r28, 0x3d	; 61
      cc:	de b7       	in	r29, 0x3e	; 62
    DDRD |= (1<<1);	//Set TXD (PD1) as output for USART
      ce:	aa e2       	ldi	r26, 0x2A	; 42
      d0:	b0 e0       	ldi	r27, 0x00	; 0
      d2:	ea e2       	ldi	r30, 0x2A	; 42
      d4:	f0 e0       	ldi	r31, 0x00	; 0
      d6:	80 81       	ld	r24, Z
      d8:	82 60       	ori	r24, 0x02	; 2
      da:	8c 93       	st	X, r24

    unsigned int USART_BAUDRATE = 9600;		//Same as in "terminal.exe"
      dc:	80 e8       	ldi	r24, 0x80	; 128
      de:	95 e2       	ldi	r25, 0x25	; 37
      e0:	9c 83       	std	Y+4, r25	; 0x04
      e2:	8b 83       	std	Y+3, r24	; 0x03
    unsigned int ubrr = (((F_CPU / (USART_BAUDRATE * 16UL))) - 1);	//baud prescale calculated according to F_CPU-define at top
      e4:	8b 81       	ldd	r24, Y+3	; 0x03
      e6:	9c 81       	ldd	r25, Y+4	; 0x04
      e8:	cc 01       	movw	r24, r24
      ea:	a0 e0       	ldi	r26, 0x00	; 0
      ec:	b0 e0       	ldi	r27, 0x00	; 0
      ee:	88 0f       	add	r24, r24
      f0:	99 1f       	adc	r25, r25
      f2:	aa 1f       	adc	r26, r26
      f4:	bb 1f       	adc	r27, r27
      f6:	88 0f       	add	r24, r24
      f8:	99 1f       	adc	r25, r25
      fa:	aa 1f       	adc	r26, r26
      fc:	bb 1f       	adc	r27, r27
      fe:	88 0f       	add	r24, r24
     100:	99 1f       	adc	r25, r25
     102:	aa 1f       	adc	r26, r26
     104:	bb 1f       	adc	r27, r27
     106:	88 0f       	add	r24, r24
     108:	99 1f       	adc	r25, r25
     10a:	aa 1f       	adc	r26, r26
     10c:	bb 1f       	adc	r27, r27
     10e:	9c 01       	movw	r18, r24
     110:	ad 01       	movw	r20, r26
     112:	80 e0       	ldi	r24, 0x00	; 0
     114:	92 e1       	ldi	r25, 0x12	; 18
     116:	aa e7       	ldi	r26, 0x7A	; 122
     118:	b0 e0       	ldi	r27, 0x00	; 0
     11a:	bc 01       	movw	r22, r24
     11c:	cd 01       	movw	r24, r26
     11e:	0e 94 f4 1a 	call	0x35e8	; 0x35e8 <__udivmodsi4>
     122:	da 01       	movw	r26, r20
     124:	c9 01       	movw	r24, r18
     126:	01 97       	sbiw	r24, 0x01	; 1
     128:	9a 83       	std	Y+2, r25	; 0x02
     12a:	89 83       	std	Y+1, r24	; 0x01

    /*Set baud rate */
    UBRR0H = (unsigned char)(ubrr>>8);
     12c:	e5 ec       	ldi	r30, 0xC5	; 197
     12e:	f0 e0       	ldi	r31, 0x00	; 0
     130:	89 81       	ldd	r24, Y+1	; 0x01
     132:	9a 81       	ldd	r25, Y+2	; 0x02
     134:	89 2f       	mov	r24, r25
     136:	99 27       	eor	r25, r25
     138:	80 83       	st	Z, r24
    UBRR0L = (unsigned char)ubrr;
     13a:	e4 ec       	ldi	r30, 0xC4	; 196
     13c:	f0 e0       	ldi	r31, 0x00	; 0
     13e:	89 81       	ldd	r24, Y+1	; 0x01
     140:	80 83       	st	Z, r24

    /*	Enable receiver and transmitter */
    UCSR0B = (1<<RXEN0)|(1<<TXEN0);
     142:	e1 ec       	ldi	r30, 0xC1	; 193
     144:	f0 e0       	ldi	r31, 0x00	; 0
     146:	88 e1       	ldi	r24, 0x18	; 24
     148:	80 83       	st	Z, r24

    /* Set frame format: 8data, 2stop bit, The two stop-bits does not seem to make any difference in my case!?*/
    UCSR0C = (1<<USBS0)|(3<<UCSZ00);
     14a:	e2 ec       	ldi	r30, 0xC2	; 194
     14c:	f0 e0       	ldi	r31, 0x00	; 0
     14e:	8e e0       	ldi	r24, 0x0E	; 14
     150:	80 83       	st	Z, r24

}
     152:	0f 90       	pop	r0
     154:	0f 90       	pop	r0
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	cf 91       	pop	r28
     15c:	df 91       	pop	r29
     15e:	08 95       	ret

00000160 <USART_Transmit>:

//Funktionen som skickar ivÃ¤g byten till datorn

void USART_Transmit(uint8_t data)
{
     160:	df 93       	push	r29
     162:	cf 93       	push	r28
     164:	0f 92       	push	r0
     166:	cd b7       	in	r28, 0x3d	; 61
     168:	de b7       	in	r29, 0x3e	; 62
     16a:	89 83       	std	Y+1, r24	; 0x01
    /* Wait for empty transmit buffer */
    while ( !( UCSR0A & (1<<UDRE0)) );
     16c:	e0 ec       	ldi	r30, 0xC0	; 192
     16e:	f0 e0       	ldi	r31, 0x00	; 0
     170:	80 81       	ld	r24, Z
     172:	88 2f       	mov	r24, r24
     174:	90 e0       	ldi	r25, 0x00	; 0
     176:	80 72       	andi	r24, 0x20	; 32
     178:	90 70       	andi	r25, 0x00	; 0
     17a:	00 97       	sbiw	r24, 0x00	; 0
     17c:	b9 f3       	breq	.-18     	; 0x16c <USART_Transmit+0xc>
    /* Put data into buffer, sends the data */
    UDR0 = data;
     17e:	e6 ec       	ldi	r30, 0xC6	; 198
     180:	f0 e0       	ldi	r31, 0x00	; 0
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	80 83       	st	Z, r24
}
     186:	0f 90       	pop	r0
     188:	cf 91       	pop	r28
     18a:	df 91       	pop	r29
     18c:	08 95       	ret

0000018e <USART_Receive>:

//Funktionen som Tar emot kommandon av datorn som senare ska skickas till transmittern


uint8_t USART_Receive( void )
{
     18e:	df 93       	push	r29
     190:	cf 93       	push	r28
     192:	cd b7       	in	r28, 0x3d	; 61
     194:	de b7       	in	r29, 0x3e	; 62
    /* Wait for data to be received */
    while ( !(UCSR0A & (1<<RXC0)) );	//This loop is only needed if you not use the interrupt...
     196:	e0 ec       	ldi	r30, 0xC0	; 192
     198:	f0 e0       	ldi	r31, 0x00	; 0
     19a:	80 81       	ld	r24, Z
     19c:	88 23       	and	r24, r24
     19e:	dc f7       	brge	.-10     	; 0x196 <USART_Receive+0x8>

    /* Get and return received data from buffer */
    return UDR0; //Return the received byte
     1a0:	e6 ec       	ldi	r30, 0xC6	; 198
     1a2:	f0 e0       	ldi	r31, 0x00	; 0
     1a4:	80 81       	ld	r24, Z
}
     1a6:	cf 91       	pop	r28
     1a8:	df 91       	pop	r29
     1aa:	08 95       	ret

000001ac <InitSPI>:

/*****************SPI*****************************/  //Skickar data mellan chip och nrf'ens chip
//initiering
void InitSPI(void)
{
     1ac:	df 93       	push	r29
     1ae:	cf 93       	push	r28
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
    //Set SCK (PB5), MOSI (PB3) , CSN (SS & PB2) & C  as outport
    //OBS!!! MÃ¥ste sÃ¤ttas innan SPI-Enable neadn
    DDRB |= (1<<DDB5) | (1<<DDB3) | (1<<DDB2) |(1<<DDB1);
     1b4:	a4 e2       	ldi	r26, 0x24	; 36
     1b6:	b0 e0       	ldi	r27, 0x00	; 0
     1b8:	e4 e2       	ldi	r30, 0x24	; 36
     1ba:	f0 e0       	ldi	r31, 0x00	; 0
     1bc:	80 81       	ld	r24, Z
     1be:	8e 62       	ori	r24, 0x2E	; 46
     1c0:	8c 93       	st	X, r24

    /* Enable SPI, Master, set clock rate fck/16 .. kan Ã¤ndra hastighet utan att det gÃ¶r sÃ¥ mycket*/
    SPCR |= (1<<SPE)|(1<<MSTR);// |(1<<SPR0) |(1<<SPR1);
     1c2:	ac e4       	ldi	r26, 0x4C	; 76
     1c4:	b0 e0       	ldi	r27, 0x00	; 0
     1c6:	ec e4       	ldi	r30, 0x4C	; 76
     1c8:	f0 e0       	ldi	r31, 0x00	; 0
     1ca:	80 81       	ld	r24, Z
     1cc:	80 65       	ori	r24, 0x50	; 80
     1ce:	8c 93       	st	X, r24

    //PORTB|=_BV(2);	//CSN IR_High to start with, vi ska inte skicka nÃ¥t till nrf'en Ã¤nnu!
        PORTB|=_BV(2);
     1d0:	a5 e2       	ldi	r26, 0x25	; 37
     1d2:	b0 e0       	ldi	r27, 0x00	; 0
     1d4:	e5 e2       	ldi	r30, 0x25	; 37
     1d6:	f0 e0       	ldi	r31, 0x00	; 0
     1d8:	80 81       	ld	r24, Z
     1da:	84 60       	ori	r24, 0x04	; 4
     1dc:	8c 93       	st	X, r24

    //PORTB&=~_BV(1);	//CE low to start with, nrf'en ska inte sÃ¤nda/ta emot nÃ¥t Ã¤nnu!
        PORTB&=~_BV(1);
     1de:	a5 e2       	ldi	r26, 0x25	; 37
     1e0:	b0 e0       	ldi	r27, 0x00	; 0
     1e2:	e5 e2       	ldi	r30, 0x25	; 37
     1e4:	f0 e0       	ldi	r31, 0x00	; 0
     1e6:	80 81       	ld	r24, Z
     1e8:	8d 7f       	andi	r24, 0xFD	; 253
     1ea:	8c 93       	st	X, r24
}
     1ec:	cf 91       	pop	r28
     1ee:	df 91       	pop	r29
     1f0:	08 95       	ret

000001f2 <WriteByteSPI>:

//Skickar kommando till nrf'en Ã¥ fÃ¥r dÃ¥ tillbaka en byte
char WriteByteSPI(unsigned char cData)
{
     1f2:	df 93       	push	r29
     1f4:	cf 93       	push	r28
     1f6:	0f 92       	push	r0
     1f8:	cd b7       	in	r28, 0x3d	; 61
     1fa:	de b7       	in	r29, 0x3e	; 62
     1fc:	89 83       	std	Y+1, r24	; 0x01
    //Load byte to Data register
    SPDR = cData;
     1fe:	ee e4       	ldi	r30, 0x4E	; 78
     200:	f0 e0       	ldi	r31, 0x00	; 0
     202:	89 81       	ldd	r24, Y+1	; 0x01
     204:	80 83       	st	Z, r24

    /* Wait for transmission complete */
    while(!(SPSR & (1<<SPIF)));
     206:	ed e4       	ldi	r30, 0x4D	; 77
     208:	f0 e0       	ldi	r31, 0x00	; 0
     20a:	80 81       	ld	r24, Z
     20c:	88 23       	and	r24, r24
     20e:	dc f7       	brge	.-10     	; 0x206 <WriteByteSPI+0x14>

    //Returnera det som sÃ¤nts tillbaka av nrf'en (fÃ¶rsta gÃ¥ngen efter csn-lÃ¥g kommer Statusregistert)
    return SPDR;
     210:	ee e4       	ldi	r30, 0x4E	; 78
     212:	f0 e0       	ldi	r31, 0x00	; 0
     214:	80 81       	ld	r24, Z
}
     216:	0f 90       	pop	r0
     218:	cf 91       	pop	r28
     21a:	df 91       	pop	r29
     21c:	08 95       	ret

0000021e <ioinit>:


/*****************in/out***************************/  //stÃ¤ll in t.ex. LED
//sÃ¤tter alla I/0 portar fÃ¶r t.ex. LED
void ioinit(void)
{
     21e:	df 93       	push	r29
     220:	cf 93       	push	r28
     222:	cd b7       	in	r28, 0x3d	; 61
     224:	de b7       	in	r29, 0x3e	; 62
    DDRB |= (1<<DDB0); //led
     226:	a4 e2       	ldi	r26, 0x24	; 36
     228:	b0 e0       	ldi	r27, 0x00	; 0
     22a:	e4 e2       	ldi	r30, 0x24	; 36
     22c:	f0 e0       	ldi	r31, 0x00	; 0
     22e:	80 81       	ld	r24, Z
     230:	81 60       	ori	r24, 0x01	; 1
     232:	8c 93       	st	X, r24
}
     234:	cf 91       	pop	r28
     236:	df 91       	pop	r29
     238:	08 95       	ret

0000023a <INT0_interrupt_init>:


/*****************interrupt***************************/ //orsaken till att kÃ¶ra med interrupt Ã¤r att de avbryter koden var den Ã¤n Ã¤r och kÃ¶r detta som Ã¤r viktigast!
//nÃ¤r data tas emot/skickas sÃ¥ gÃ¥r interr uptet INT0 nÃ¤st lÃ¤ngst ner igÃ¥ng
void INT0_interrupt_init(void)
{
     23a:	df 93       	push	r29
     23c:	cf 93       	push	r28
     23e:	cd b7       	in	r28, 0x3d	; 61
     240:	de b7       	in	r29, 0x3e	; 62
    DDRD &= ~(1<<DDD2);	//Extern interrupt pÃ¥ INT0, dvs sÃ¤tt den till input!
     242:	aa e2       	ldi	r26, 0x2A	; 42
     244:	b0 e0       	ldi	r27, 0x00	; 0
     246:	ea e2       	ldi	r30, 0x2A	; 42
     248:	f0 e0       	ldi	r31, 0x00	; 0
     24a:	80 81       	ld	r24, Z
     24c:	8b 7f       	andi	r24, 0xFB	; 251
     24e:	8c 93       	st	X, r24

    EICRA |=  (1<<ISC01);// INT0 falling edge	PD2
     250:	a9 e6       	ldi	r26, 0x69	; 105
     252:	b0 e0       	ldi	r27, 0x00	; 0
     254:	e9 e6       	ldi	r30, 0x69	; 105
     256:	f0 e0       	ldi	r31, 0x00	; 0
     258:	80 81       	ld	r24, Z
     25a:	82 60       	ori	r24, 0x02	; 2
     25c:	8c 93       	st	X, r24
    EICRA  &=  ~(1<<ISC00);// INT0 falling edge	PD2
     25e:	a9 e6       	ldi	r26, 0x69	; 105
     260:	b0 e0       	ldi	r27, 0x00	; 0
     262:	e9 e6       	ldi	r30, 0x69	; 105
     264:	f0 e0       	ldi	r31, 0x00	; 0
     266:	80 81       	ld	r24, Z
     268:	8e 7f       	andi	r24, 0xFE	; 254
     26a:	8c 93       	st	X, r24

    EIMSK |=  (1<<INT0);	//enablar int0
     26c:	ad e3       	ldi	r26, 0x3D	; 61
     26e:	b0 e0       	ldi	r27, 0x00	; 0
     270:	ed e3       	ldi	r30, 0x3D	; 61
     272:	f0 e0       	ldi	r31, 0x00	; 0
     274:	80 81       	ld	r24, Z
     276:	81 60       	ori	r24, 0x01	; 1
     278:	8c 93       	st	X, r24
    //sei();              // Enable global interrupts gÃ¶rs sen
}
     27a:	cf 91       	pop	r28
     27c:	df 91       	pop	r29
     27e:	08 95       	ret

00000280 <USART_interrupt_init>:

//nÃ¤r chipets RX (usart) fÃ¥r ett meddelande fÃ¥rn datorn gÃ¥r interruptet USART_RX igÃ¥ng lÃ¤ngst ner.

void USART_interrupt_init(void)
{
     280:	df 93       	push	r29
     282:	cf 93       	push	r28
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
    UCSR0B |= (1<<RXCIE0);	//Enable interrupt that triggers on USART-data is received,
     288:	a1 ec       	ldi	r26, 0xC1	; 193
     28a:	b0 e0       	ldi	r27, 0x00	; 0
     28c:	e1 ec       	ldi	r30, 0xC1	; 193
     28e:	f0 e0       	ldi	r31, 0x00	; 0
     290:	80 81       	ld	r24, Z
     292:	80 68       	ori	r24, 0x80	; 128
     294:	8c 93       	st	X, r24
}
     296:	cf 91       	pop	r28
     298:	df 91       	pop	r29
     29a:	08 95       	ret

0000029c <GetReg>:

//////////////////////////////////////////////////////

//funktion fÃ¶r att hÃ¤mta nÃ¥t av nrf's register
uint8_t GetReg(uint8_t reg)
{
     29c:	0f 93       	push	r16
     29e:	1f 93       	push	r17
     2a0:	df 93       	push	r29
     2a2:	cf 93       	push	r28
     2a4:	cd b7       	in	r28, 0x3d	; 61
     2a6:	de b7       	in	r29, 0x3e	; 62
     2a8:	c1 56       	subi	r28, 0x61	; 97
     2aa:	d0 40       	sbci	r29, 0x00	; 0
     2ac:	0f b6       	in	r0, 0x3f	; 63
     2ae:	f8 94       	cli
     2b0:	de bf       	out	0x3e, r29	; 62
     2b2:	0f be       	out	0x3f, r0	; 63
     2b4:	cd bf       	out	0x3d, r28	; 61
     2b6:	fe 01       	movw	r30, r28
     2b8:	ef 59       	subi	r30, 0x9F	; 159
     2ba:	ff 4f       	sbci	r31, 0xFF	; 255
     2bc:	80 83       	st	Z, r24
     2be:	fe 01       	movw	r30, r28
     2c0:	e3 5a       	subi	r30, 0xA3	; 163
     2c2:	ff 4f       	sbci	r31, 0xFF	; 255
     2c4:	80 e0       	ldi	r24, 0x00	; 0
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	a0 e2       	ldi	r26, 0x20	; 32
     2ca:	b1 e4       	ldi	r27, 0x41	; 65
     2cc:	80 83       	st	Z, r24
     2ce:	91 83       	std	Z+1, r25	; 0x01
     2d0:	a2 83       	std	Z+2, r26	; 0x02
     2d2:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     2d4:	8e 01       	movw	r16, r28
     2d6:	07 5a       	subi	r16, 0xA7	; 167
     2d8:	1f 4f       	sbci	r17, 0xFF	; 255
     2da:	fe 01       	movw	r30, r28
     2dc:	e3 5a       	subi	r30, 0xA3	; 163
     2de:	ff 4f       	sbci	r31, 0xFF	; 255
     2e0:	60 81       	ld	r22, Z
     2e2:	71 81       	ldd	r23, Z+1	; 0x01
     2e4:	82 81       	ldd	r24, Z+2	; 0x02
     2e6:	93 81       	ldd	r25, Z+3	; 0x03
     2e8:	2b ea       	ldi	r18, 0xAB	; 171
     2ea:	3a ea       	ldi	r19, 0xAA	; 170
     2ec:	4a e2       	ldi	r20, 0x2A	; 42
     2ee:	50 e4       	ldi	r21, 0x40	; 64
     2f0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     2f4:	dc 01       	movw	r26, r24
     2f6:	cb 01       	movw	r24, r22
     2f8:	f8 01       	movw	r30, r16
     2fa:	80 83       	st	Z, r24
     2fc:	91 83       	std	Z+1, r25	; 0x01
     2fe:	a2 83       	std	Z+2, r26	; 0x02
     300:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     302:	fe 01       	movw	r30, r28
     304:	e7 5a       	subi	r30, 0xA7	; 167
     306:	ff 4f       	sbci	r31, 0xFF	; 255
     308:	60 81       	ld	r22, Z
     30a:	71 81       	ldd	r23, Z+1	; 0x01
     30c:	82 81       	ldd	r24, Z+2	; 0x02
     30e:	93 81       	ldd	r25, Z+3	; 0x03
     310:	20 e0       	ldi	r18, 0x00	; 0
     312:	30 e0       	ldi	r19, 0x00	; 0
     314:	40 e8       	ldi	r20, 0x80	; 128
     316:	5f e3       	ldi	r21, 0x3F	; 63
     318:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     31c:	88 23       	and	r24, r24
     31e:	34 f4       	brge	.+12     	; 0x32c <GetReg+0x90>
		__ticks = 1;
     320:	fe 01       	movw	r30, r28
     322:	e8 5a       	subi	r30, 0xA8	; 168
     324:	ff 4f       	sbci	r31, 0xFF	; 255
     326:	81 e0       	ldi	r24, 0x01	; 1
     328:	80 83       	st	Z, r24
     32a:	e0 c0       	rjmp	.+448    	; 0x4ec <GetReg+0x250>
	else if (__tmp > 255)
     32c:	fe 01       	movw	r30, r28
     32e:	e7 5a       	subi	r30, 0xA7	; 167
     330:	ff 4f       	sbci	r31, 0xFF	; 255
     332:	60 81       	ld	r22, Z
     334:	71 81       	ldd	r23, Z+1	; 0x01
     336:	82 81       	ldd	r24, Z+2	; 0x02
     338:	93 81       	ldd	r25, Z+3	; 0x03
     33a:	20 e0       	ldi	r18, 0x00	; 0
     33c:	30 e0       	ldi	r19, 0x00	; 0
     33e:	4f e7       	ldi	r20, 0x7F	; 127
     340:	53 e4       	ldi	r21, 0x43	; 67
     342:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     346:	18 16       	cp	r1, r24
     348:	0c f0       	brlt	.+2      	; 0x34c <GetReg+0xb0>
     34a:	c0 c0       	rjmp	.+384    	; 0x4cc <GetReg+0x230>
	{
		_delay_ms(__us / 1000.0);
     34c:	fe 01       	movw	r30, r28
     34e:	e3 5a       	subi	r30, 0xA3	; 163
     350:	ff 4f       	sbci	r31, 0xFF	; 255
     352:	60 81       	ld	r22, Z
     354:	71 81       	ldd	r23, Z+1	; 0x01
     356:	82 81       	ldd	r24, Z+2	; 0x02
     358:	93 81       	ldd	r25, Z+3	; 0x03
     35a:	20 e0       	ldi	r18, 0x00	; 0
     35c:	30 e0       	ldi	r19, 0x00	; 0
     35e:	4a e7       	ldi	r20, 0x7A	; 122
     360:	54 e4       	ldi	r21, 0x44	; 68
     362:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
     366:	dc 01       	movw	r26, r24
     368:	cb 01       	movw	r24, r22
     36a:	fe 01       	movw	r30, r28
     36c:	ec 5a       	subi	r30, 0xAC	; 172
     36e:	ff 4f       	sbci	r31, 0xFF	; 255
     370:	80 83       	st	Z, r24
     372:	91 83       	std	Z+1, r25	; 0x01
     374:	a2 83       	std	Z+2, r26	; 0x02
     376:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     378:	8e 01       	movw	r16, r28
     37a:	00 5b       	subi	r16, 0xB0	; 176
     37c:	1f 4f       	sbci	r17, 0xFF	; 255
     37e:	fe 01       	movw	r30, r28
     380:	ec 5a       	subi	r30, 0xAC	; 172
     382:	ff 4f       	sbci	r31, 0xFF	; 255
     384:	60 81       	ld	r22, Z
     386:	71 81       	ldd	r23, Z+1	; 0x01
     388:	82 81       	ldd	r24, Z+2	; 0x02
     38a:	93 81       	ldd	r25, Z+3	; 0x03
     38c:	20 e0       	ldi	r18, 0x00	; 0
     38e:	30 e0       	ldi	r19, 0x00	; 0
     390:	4a ef       	ldi	r20, 0xFA	; 250
     392:	54 e4       	ldi	r21, 0x44	; 68
     394:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     398:	dc 01       	movw	r26, r24
     39a:	cb 01       	movw	r24, r22
     39c:	f8 01       	movw	r30, r16
     39e:	80 83       	st	Z, r24
     3a0:	91 83       	std	Z+1, r25	; 0x01
     3a2:	a2 83       	std	Z+2, r26	; 0x02
     3a4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     3a6:	fe 01       	movw	r30, r28
     3a8:	e0 5b       	subi	r30, 0xB0	; 176
     3aa:	ff 4f       	sbci	r31, 0xFF	; 255
     3ac:	60 81       	ld	r22, Z
     3ae:	71 81       	ldd	r23, Z+1	; 0x01
     3b0:	82 81       	ldd	r24, Z+2	; 0x02
     3b2:	93 81       	ldd	r25, Z+3	; 0x03
     3b4:	20 e0       	ldi	r18, 0x00	; 0
     3b6:	30 e0       	ldi	r19, 0x00	; 0
     3b8:	40 e8       	ldi	r20, 0x80	; 128
     3ba:	5f e3       	ldi	r21, 0x3F	; 63
     3bc:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     3c0:	88 23       	and	r24, r24
     3c2:	44 f4       	brge	.+16     	; 0x3d4 <GetReg+0x138>
		__ticks = 1;
     3c4:	fe 01       	movw	r30, r28
     3c6:	e2 5b       	subi	r30, 0xB2	; 178
     3c8:	ff 4f       	sbci	r31, 0xFF	; 255
     3ca:	81 e0       	ldi	r24, 0x01	; 1
     3cc:	90 e0       	ldi	r25, 0x00	; 0
     3ce:	91 83       	std	Z+1, r25	; 0x01
     3d0:	80 83       	st	Z, r24
     3d2:	64 c0       	rjmp	.+200    	; 0x49c <GetReg+0x200>
	else if (__tmp > 65535)
     3d4:	fe 01       	movw	r30, r28
     3d6:	e0 5b       	subi	r30, 0xB0	; 176
     3d8:	ff 4f       	sbci	r31, 0xFF	; 255
     3da:	60 81       	ld	r22, Z
     3dc:	71 81       	ldd	r23, Z+1	; 0x01
     3de:	82 81       	ldd	r24, Z+2	; 0x02
     3e0:	93 81       	ldd	r25, Z+3	; 0x03
     3e2:	20 e0       	ldi	r18, 0x00	; 0
     3e4:	3f ef       	ldi	r19, 0xFF	; 255
     3e6:	4f e7       	ldi	r20, 0x7F	; 127
     3e8:	57 e4       	ldi	r21, 0x47	; 71
     3ea:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     3ee:	18 16       	cp	r1, r24
     3f0:	0c f0       	brlt	.+2      	; 0x3f4 <GetReg+0x158>
     3f2:	43 c0       	rjmp	.+134    	; 0x47a <GetReg+0x1de>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     3f4:	fe 01       	movw	r30, r28
     3f6:	ec 5a       	subi	r30, 0xAC	; 172
     3f8:	ff 4f       	sbci	r31, 0xFF	; 255
     3fa:	60 81       	ld	r22, Z
     3fc:	71 81       	ldd	r23, Z+1	; 0x01
     3fe:	82 81       	ldd	r24, Z+2	; 0x02
     400:	93 81       	ldd	r25, Z+3	; 0x03
     402:	20 e0       	ldi	r18, 0x00	; 0
     404:	30 e0       	ldi	r19, 0x00	; 0
     406:	40 e2       	ldi	r20, 0x20	; 32
     408:	51 e4       	ldi	r21, 0x41	; 65
     40a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     40e:	dc 01       	movw	r26, r24
     410:	cb 01       	movw	r24, r22
     412:	8e 01       	movw	r16, r28
     414:	02 5b       	subi	r16, 0xB2	; 178
     416:	1f 4f       	sbci	r17, 0xFF	; 255
     418:	bc 01       	movw	r22, r24
     41a:	cd 01       	movw	r24, r26
     41c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     420:	dc 01       	movw	r26, r24
     422:	cb 01       	movw	r24, r22
     424:	f8 01       	movw	r30, r16
     426:	91 83       	std	Z+1, r25	; 0x01
     428:	80 83       	st	Z, r24
     42a:	1f c0       	rjmp	.+62     	; 0x46a <GetReg+0x1ce>
     42c:	fe 01       	movw	r30, r28
     42e:	e4 5b       	subi	r30, 0xB4	; 180
     430:	ff 4f       	sbci	r31, 0xFF	; 255
     432:	88 ec       	ldi	r24, 0xC8	; 200
     434:	90 e0       	ldi	r25, 0x00	; 0
     436:	91 83       	std	Z+1, r25	; 0x01
     438:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     43a:	fe 01       	movw	r30, r28
     43c:	e4 5b       	subi	r30, 0xB4	; 180
     43e:	ff 4f       	sbci	r31, 0xFF	; 255
     440:	80 81       	ld	r24, Z
     442:	91 81       	ldd	r25, Z+1	; 0x01
     444:	01 97       	sbiw	r24, 0x01	; 1
     446:	f1 f7       	brne	.-4      	; 0x444 <GetReg+0x1a8>
     448:	fe 01       	movw	r30, r28
     44a:	e4 5b       	subi	r30, 0xB4	; 180
     44c:	ff 4f       	sbci	r31, 0xFF	; 255
     44e:	91 83       	std	Z+1, r25	; 0x01
     450:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     452:	de 01       	movw	r26, r28
     454:	a2 5b       	subi	r26, 0xB2	; 178
     456:	bf 4f       	sbci	r27, 0xFF	; 255
     458:	fe 01       	movw	r30, r28
     45a:	e2 5b       	subi	r30, 0xB2	; 178
     45c:	ff 4f       	sbci	r31, 0xFF	; 255
     45e:	80 81       	ld	r24, Z
     460:	91 81       	ldd	r25, Z+1	; 0x01
     462:	01 97       	sbiw	r24, 0x01	; 1
     464:	11 96       	adiw	r26, 0x01	; 1
     466:	9c 93       	st	X, r25
     468:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     46a:	fe 01       	movw	r30, r28
     46c:	e2 5b       	subi	r30, 0xB2	; 178
     46e:	ff 4f       	sbci	r31, 0xFF	; 255
     470:	80 81       	ld	r24, Z
     472:	91 81       	ldd	r25, Z+1	; 0x01
     474:	00 97       	sbiw	r24, 0x00	; 0
     476:	d1 f6       	brne	.-76     	; 0x42c <GetReg+0x190>
     478:	4b c0       	rjmp	.+150    	; 0x510 <GetReg+0x274>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     47a:	8e 01       	movw	r16, r28
     47c:	02 5b       	subi	r16, 0xB2	; 178
     47e:	1f 4f       	sbci	r17, 0xFF	; 255
     480:	fe 01       	movw	r30, r28
     482:	e0 5b       	subi	r30, 0xB0	; 176
     484:	ff 4f       	sbci	r31, 0xFF	; 255
     486:	60 81       	ld	r22, Z
     488:	71 81       	ldd	r23, Z+1	; 0x01
     48a:	82 81       	ldd	r24, Z+2	; 0x02
     48c:	93 81       	ldd	r25, Z+3	; 0x03
     48e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     492:	dc 01       	movw	r26, r24
     494:	cb 01       	movw	r24, r22
     496:	f8 01       	movw	r30, r16
     498:	91 83       	std	Z+1, r25	; 0x01
     49a:	80 83       	st	Z, r24
     49c:	de 01       	movw	r26, r28
     49e:	a6 5b       	subi	r26, 0xB6	; 182
     4a0:	bf 4f       	sbci	r27, 0xFF	; 255
     4a2:	fe 01       	movw	r30, r28
     4a4:	e2 5b       	subi	r30, 0xB2	; 178
     4a6:	ff 4f       	sbci	r31, 0xFF	; 255
     4a8:	80 81       	ld	r24, Z
     4aa:	91 81       	ldd	r25, Z+1	; 0x01
     4ac:	11 96       	adiw	r26, 0x01	; 1
     4ae:	9c 93       	st	X, r25
     4b0:	8e 93       	st	-X, r24
     4b2:	fe 01       	movw	r30, r28
     4b4:	e6 5b       	subi	r30, 0xB6	; 182
     4b6:	ff 4f       	sbci	r31, 0xFF	; 255
     4b8:	80 81       	ld	r24, Z
     4ba:	91 81       	ldd	r25, Z+1	; 0x01
     4bc:	01 97       	sbiw	r24, 0x01	; 1
     4be:	f1 f7       	brne	.-4      	; 0x4bc <GetReg+0x220>
     4c0:	fe 01       	movw	r30, r28
     4c2:	e6 5b       	subi	r30, 0xB6	; 182
     4c4:	ff 4f       	sbci	r31, 0xFF	; 255
     4c6:	91 83       	std	Z+1, r25	; 0x01
     4c8:	80 83       	st	Z, r24
     4ca:	22 c0       	rjmp	.+68     	; 0x510 <GetReg+0x274>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     4cc:	8e 01       	movw	r16, r28
     4ce:	08 5a       	subi	r16, 0xA8	; 168
     4d0:	1f 4f       	sbci	r17, 0xFF	; 255
     4d2:	fe 01       	movw	r30, r28
     4d4:	e7 5a       	subi	r30, 0xA7	; 167
     4d6:	ff 4f       	sbci	r31, 0xFF	; 255
     4d8:	60 81       	ld	r22, Z
     4da:	71 81       	ldd	r23, Z+1	; 0x01
     4dc:	82 81       	ldd	r24, Z+2	; 0x02
     4de:	93 81       	ldd	r25, Z+3	; 0x03
     4e0:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     4e4:	dc 01       	movw	r26, r24
     4e6:	cb 01       	movw	r24, r22
     4e8:	f8 01       	movw	r30, r16
     4ea:	80 83       	st	Z, r24
     4ec:	de 01       	movw	r26, r28
     4ee:	a7 5b       	subi	r26, 0xB7	; 183
     4f0:	bf 4f       	sbci	r27, 0xFF	; 255
     4f2:	fe 01       	movw	r30, r28
     4f4:	e8 5a       	subi	r30, 0xA8	; 168
     4f6:	ff 4f       	sbci	r31, 0xFF	; 255
     4f8:	80 81       	ld	r24, Z
     4fa:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     4fc:	fe 01       	movw	r30, r28
     4fe:	e7 5b       	subi	r30, 0xB7	; 183
     500:	ff 4f       	sbci	r31, 0xFF	; 255
     502:	80 81       	ld	r24, Z
     504:	8a 95       	dec	r24
     506:	f1 f7       	brne	.-4      	; 0x504 <GetReg+0x268>
     508:	fe 01       	movw	r30, r28
     50a:	e7 5b       	subi	r30, 0xB7	; 183
     50c:	ff 4f       	sbci	r31, 0xFF	; 255
     50e:	80 83       	st	Z, r24
    //andvÃ¤ndning: USART_Transmit(GetReg(STATUS)); //dÃ¤r status Ã¤r registret du vill kolla
    _delay_us(10);
    //PORTB&=~_BV(2);	//CSN low
            PORTB&=~_BV(2);
     510:	a5 e2       	ldi	r26, 0x25	; 37
     512:	b0 e0       	ldi	r27, 0x00	; 0
     514:	e5 e2       	ldi	r30, 0x25	; 37
     516:	f0 e0       	ldi	r31, 0x00	; 0
     518:	80 81       	ld	r24, Z
     51a:	8b 7f       	andi	r24, 0xFB	; 251
     51c:	8c 93       	st	X, r24
     51e:	fe 01       	movw	r30, r28
     520:	eb 5b       	subi	r30, 0xBB	; 187
     522:	ff 4f       	sbci	r31, 0xFF	; 255
     524:	80 e0       	ldi	r24, 0x00	; 0
     526:	90 e0       	ldi	r25, 0x00	; 0
     528:	a0 e2       	ldi	r26, 0x20	; 32
     52a:	b1 e4       	ldi	r27, 0x41	; 65
     52c:	80 83       	st	Z, r24
     52e:	91 83       	std	Z+1, r25	; 0x01
     530:	a2 83       	std	Z+2, r26	; 0x02
     532:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     534:	8e 01       	movw	r16, r28
     536:	0f 5b       	subi	r16, 0xBF	; 191
     538:	1f 4f       	sbci	r17, 0xFF	; 255
     53a:	fe 01       	movw	r30, r28
     53c:	eb 5b       	subi	r30, 0xBB	; 187
     53e:	ff 4f       	sbci	r31, 0xFF	; 255
     540:	60 81       	ld	r22, Z
     542:	71 81       	ldd	r23, Z+1	; 0x01
     544:	82 81       	ldd	r24, Z+2	; 0x02
     546:	93 81       	ldd	r25, Z+3	; 0x03
     548:	2b ea       	ldi	r18, 0xAB	; 171
     54a:	3a ea       	ldi	r19, 0xAA	; 170
     54c:	4a e2       	ldi	r20, 0x2A	; 42
     54e:	50 e4       	ldi	r21, 0x40	; 64
     550:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     554:	dc 01       	movw	r26, r24
     556:	cb 01       	movw	r24, r22
     558:	f8 01       	movw	r30, r16
     55a:	80 83       	st	Z, r24
     55c:	91 83       	std	Z+1, r25	; 0x01
     55e:	a2 83       	std	Z+2, r26	; 0x02
     560:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     562:	fe 01       	movw	r30, r28
     564:	ef 5b       	subi	r30, 0xBF	; 191
     566:	ff 4f       	sbci	r31, 0xFF	; 255
     568:	60 81       	ld	r22, Z
     56a:	71 81       	ldd	r23, Z+1	; 0x01
     56c:	82 81       	ldd	r24, Z+2	; 0x02
     56e:	93 81       	ldd	r25, Z+3	; 0x03
     570:	20 e0       	ldi	r18, 0x00	; 0
     572:	30 e0       	ldi	r19, 0x00	; 0
     574:	40 e8       	ldi	r20, 0x80	; 128
     576:	5f e3       	ldi	r21, 0x3F	; 63
     578:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     57c:	88 23       	and	r24, r24
     57e:	34 f4       	brge	.+12     	; 0x58c <GetReg+0x2f0>
		__ticks = 1;
     580:	81 e0       	ldi	r24, 0x01	; 1
     582:	fe 01       	movw	r30, r28
     584:	e0 5c       	subi	r30, 0xC0	; 192
     586:	ff 4f       	sbci	r31, 0xFF	; 255
     588:	80 83       	st	Z, r24
     58a:	9d c0       	rjmp	.+314    	; 0x6c6 <GetReg+0x42a>
	else if (__tmp > 255)
     58c:	fe 01       	movw	r30, r28
     58e:	ef 5b       	subi	r30, 0xBF	; 191
     590:	ff 4f       	sbci	r31, 0xFF	; 255
     592:	60 81       	ld	r22, Z
     594:	71 81       	ldd	r23, Z+1	; 0x01
     596:	82 81       	ldd	r24, Z+2	; 0x02
     598:	93 81       	ldd	r25, Z+3	; 0x03
     59a:	20 e0       	ldi	r18, 0x00	; 0
     59c:	30 e0       	ldi	r19, 0x00	; 0
     59e:	4f e7       	ldi	r20, 0x7F	; 127
     5a0:	53 e4       	ldi	r21, 0x43	; 67
     5a2:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     5a6:	18 16       	cp	r1, r24
     5a8:	0c f0       	brlt	.+2      	; 0x5ac <GetReg+0x310>
     5aa:	7e c0       	rjmp	.+252    	; 0x6a8 <GetReg+0x40c>
	{
		_delay_ms(__us / 1000.0);
     5ac:	fe 01       	movw	r30, r28
     5ae:	eb 5b       	subi	r30, 0xBB	; 187
     5b0:	ff 4f       	sbci	r31, 0xFF	; 255
     5b2:	60 81       	ld	r22, Z
     5b4:	71 81       	ldd	r23, Z+1	; 0x01
     5b6:	82 81       	ldd	r24, Z+2	; 0x02
     5b8:	93 81       	ldd	r25, Z+3	; 0x03
     5ba:	20 e0       	ldi	r18, 0x00	; 0
     5bc:	30 e0       	ldi	r19, 0x00	; 0
     5be:	4a e7       	ldi	r20, 0x7A	; 122
     5c0:	54 e4       	ldi	r21, 0x44	; 68
     5c2:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
     5c6:	dc 01       	movw	r26, r24
     5c8:	cb 01       	movw	r24, r22
     5ca:	8c af       	std	Y+60, r24	; 0x3c
     5cc:	9d af       	std	Y+61, r25	; 0x3d
     5ce:	ae af       	std	Y+62, r26	; 0x3e
     5d0:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     5d2:	6c ad       	ldd	r22, Y+60	; 0x3c
     5d4:	7d ad       	ldd	r23, Y+61	; 0x3d
     5d6:	8e ad       	ldd	r24, Y+62	; 0x3e
     5d8:	9f ad       	ldd	r25, Y+63	; 0x3f
     5da:	20 e0       	ldi	r18, 0x00	; 0
     5dc:	30 e0       	ldi	r19, 0x00	; 0
     5de:	4a ef       	ldi	r20, 0xFA	; 250
     5e0:	54 e4       	ldi	r21, 0x44	; 68
     5e2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     5e6:	dc 01       	movw	r26, r24
     5e8:	cb 01       	movw	r24, r22
     5ea:	88 af       	std	Y+56, r24	; 0x38
     5ec:	99 af       	std	Y+57, r25	; 0x39
     5ee:	aa af       	std	Y+58, r26	; 0x3a
     5f0:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
     5f2:	68 ad       	ldd	r22, Y+56	; 0x38
     5f4:	79 ad       	ldd	r23, Y+57	; 0x39
     5f6:	8a ad       	ldd	r24, Y+58	; 0x3a
     5f8:	9b ad       	ldd	r25, Y+59	; 0x3b
     5fa:	20 e0       	ldi	r18, 0x00	; 0
     5fc:	30 e0       	ldi	r19, 0x00	; 0
     5fe:	40 e8       	ldi	r20, 0x80	; 128
     600:	5f e3       	ldi	r21, 0x3F	; 63
     602:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     606:	88 23       	and	r24, r24
     608:	2c f4       	brge	.+10     	; 0x614 <GetReg+0x378>
		__ticks = 1;
     60a:	81 e0       	ldi	r24, 0x01	; 1
     60c:	90 e0       	ldi	r25, 0x00	; 0
     60e:	9f ab       	std	Y+55, r25	; 0x37
     610:	8e ab       	std	Y+54, r24	; 0x36
     612:	3f c0       	rjmp	.+126    	; 0x692 <GetReg+0x3f6>
	else if (__tmp > 65535)
     614:	68 ad       	ldd	r22, Y+56	; 0x38
     616:	79 ad       	ldd	r23, Y+57	; 0x39
     618:	8a ad       	ldd	r24, Y+58	; 0x3a
     61a:	9b ad       	ldd	r25, Y+59	; 0x3b
     61c:	20 e0       	ldi	r18, 0x00	; 0
     61e:	3f ef       	ldi	r19, 0xFF	; 255
     620:	4f e7       	ldi	r20, 0x7F	; 127
     622:	57 e4       	ldi	r21, 0x47	; 71
     624:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     628:	18 16       	cp	r1, r24
     62a:	4c f5       	brge	.+82     	; 0x67e <GetReg+0x3e2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     62c:	6c ad       	ldd	r22, Y+60	; 0x3c
     62e:	7d ad       	ldd	r23, Y+61	; 0x3d
     630:	8e ad       	ldd	r24, Y+62	; 0x3e
     632:	9f ad       	ldd	r25, Y+63	; 0x3f
     634:	20 e0       	ldi	r18, 0x00	; 0
     636:	30 e0       	ldi	r19, 0x00	; 0
     638:	40 e2       	ldi	r20, 0x20	; 32
     63a:	51 e4       	ldi	r21, 0x41	; 65
     63c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     640:	dc 01       	movw	r26, r24
     642:	cb 01       	movw	r24, r22
     644:	bc 01       	movw	r22, r24
     646:	cd 01       	movw	r24, r26
     648:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     64c:	dc 01       	movw	r26, r24
     64e:	cb 01       	movw	r24, r22
     650:	9f ab       	std	Y+55, r25	; 0x37
     652:	8e ab       	std	Y+54, r24	; 0x36
     654:	0f c0       	rjmp	.+30     	; 0x674 <GetReg+0x3d8>
     656:	88 ec       	ldi	r24, 0xC8	; 200
     658:	90 e0       	ldi	r25, 0x00	; 0
     65a:	9d ab       	std	Y+53, r25	; 0x35
     65c:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     65e:	8c a9       	ldd	r24, Y+52	; 0x34
     660:	9d a9       	ldd	r25, Y+53	; 0x35
     662:	01 97       	sbiw	r24, 0x01	; 1
     664:	f1 f7       	brne	.-4      	; 0x662 <GetReg+0x3c6>
     666:	9d ab       	std	Y+53, r25	; 0x35
     668:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     66a:	8e a9       	ldd	r24, Y+54	; 0x36
     66c:	9f a9       	ldd	r25, Y+55	; 0x37
     66e:	01 97       	sbiw	r24, 0x01	; 1
     670:	9f ab       	std	Y+55, r25	; 0x37
     672:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     674:	8e a9       	ldd	r24, Y+54	; 0x36
     676:	9f a9       	ldd	r25, Y+55	; 0x37
     678:	00 97       	sbiw	r24, 0x00	; 0
     67a:	69 f7       	brne	.-38     	; 0x656 <GetReg+0x3ba>
     67c:	2d c0       	rjmp	.+90     	; 0x6d8 <GetReg+0x43c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     67e:	68 ad       	ldd	r22, Y+56	; 0x38
     680:	79 ad       	ldd	r23, Y+57	; 0x39
     682:	8a ad       	ldd	r24, Y+58	; 0x3a
     684:	9b ad       	ldd	r25, Y+59	; 0x3b
     686:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     68a:	dc 01       	movw	r26, r24
     68c:	cb 01       	movw	r24, r22
     68e:	9f ab       	std	Y+55, r25	; 0x37
     690:	8e ab       	std	Y+54, r24	; 0x36
     692:	8e a9       	ldd	r24, Y+54	; 0x36
     694:	9f a9       	ldd	r25, Y+55	; 0x37
     696:	9b ab       	std	Y+51, r25	; 0x33
     698:	8a ab       	std	Y+50, r24	; 0x32
     69a:	8a a9       	ldd	r24, Y+50	; 0x32
     69c:	9b a9       	ldd	r25, Y+51	; 0x33
     69e:	01 97       	sbiw	r24, 0x01	; 1
     6a0:	f1 f7       	brne	.-4      	; 0x69e <GetReg+0x402>
     6a2:	9b ab       	std	Y+51, r25	; 0x33
     6a4:	8a ab       	std	Y+50, r24	; 0x32
     6a6:	18 c0       	rjmp	.+48     	; 0x6d8 <GetReg+0x43c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     6a8:	fe 01       	movw	r30, r28
     6aa:	ef 5b       	subi	r30, 0xBF	; 191
     6ac:	ff 4f       	sbci	r31, 0xFF	; 255
     6ae:	60 81       	ld	r22, Z
     6b0:	71 81       	ldd	r23, Z+1	; 0x01
     6b2:	82 81       	ldd	r24, Z+2	; 0x02
     6b4:	93 81       	ldd	r25, Z+3	; 0x03
     6b6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     6ba:	dc 01       	movw	r26, r24
     6bc:	cb 01       	movw	r24, r22
     6be:	fe 01       	movw	r30, r28
     6c0:	e0 5c       	subi	r30, 0xC0	; 192
     6c2:	ff 4f       	sbci	r31, 0xFF	; 255
     6c4:	80 83       	st	Z, r24
     6c6:	fe 01       	movw	r30, r28
     6c8:	e0 5c       	subi	r30, 0xC0	; 192
     6ca:	ff 4f       	sbci	r31, 0xFF	; 255
     6cc:	80 81       	ld	r24, Z
     6ce:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     6d0:	89 a9       	ldd	r24, Y+49	; 0x31
     6d2:	8a 95       	dec	r24
     6d4:	f1 f7       	brne	.-4      	; 0x6d2 <GetReg+0x436>
     6d6:	89 ab       	std	Y+49, r24	; 0x31

    _delay_us(10);
    WriteByteSPI(R_REGISTER + reg);	//Vilket register vill du lÃ¤sa (nu med R_Register fÃ¶r att inget ska skrivas till registret)
     6d8:	fe 01       	movw	r30, r28
     6da:	ef 59       	subi	r30, 0x9F	; 159
     6dc:	ff 4f       	sbci	r31, 0xFF	; 255
     6de:	80 81       	ld	r24, Z
     6e0:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <WriteByteSPI>
     6e4:	80 e0       	ldi	r24, 0x00	; 0
     6e6:	90 e0       	ldi	r25, 0x00	; 0
     6e8:	a0 e2       	ldi	r26, 0x20	; 32
     6ea:	b1 e4       	ldi	r27, 0x41	; 65
     6ec:	8d a7       	std	Y+45, r24	; 0x2d
     6ee:	9e a7       	std	Y+46, r25	; 0x2e
     6f0:	af a7       	std	Y+47, r26	; 0x2f
     6f2:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6f4:	6d a5       	ldd	r22, Y+45	; 0x2d
     6f6:	7e a5       	ldd	r23, Y+46	; 0x2e
     6f8:	8f a5       	ldd	r24, Y+47	; 0x2f
     6fa:	98 a9       	ldd	r25, Y+48	; 0x30
     6fc:	2b ea       	ldi	r18, 0xAB	; 171
     6fe:	3a ea       	ldi	r19, 0xAA	; 170
     700:	4a e2       	ldi	r20, 0x2A	; 42
     702:	50 e4       	ldi	r21, 0x40	; 64
     704:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     708:	dc 01       	movw	r26, r24
     70a:	cb 01       	movw	r24, r22
     70c:	89 a7       	std	Y+41, r24	; 0x29
     70e:	9a a7       	std	Y+42, r25	; 0x2a
     710:	ab a7       	std	Y+43, r26	; 0x2b
     712:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     714:	69 a5       	ldd	r22, Y+41	; 0x29
     716:	7a a5       	ldd	r23, Y+42	; 0x2a
     718:	8b a5       	ldd	r24, Y+43	; 0x2b
     71a:	9c a5       	ldd	r25, Y+44	; 0x2c
     71c:	20 e0       	ldi	r18, 0x00	; 0
     71e:	30 e0       	ldi	r19, 0x00	; 0
     720:	40 e8       	ldi	r20, 0x80	; 128
     722:	5f e3       	ldi	r21, 0x3F	; 63
     724:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     728:	88 23       	and	r24, r24
     72a:	1c f4       	brge	.+6      	; 0x732 <GetReg+0x496>
		__ticks = 1;
     72c:	81 e0       	ldi	r24, 0x01	; 1
     72e:	88 a7       	std	Y+40, r24	; 0x28
     730:	91 c0       	rjmp	.+290    	; 0x854 <GetReg+0x5b8>
	else if (__tmp > 255)
     732:	69 a5       	ldd	r22, Y+41	; 0x29
     734:	7a a5       	ldd	r23, Y+42	; 0x2a
     736:	8b a5       	ldd	r24, Y+43	; 0x2b
     738:	9c a5       	ldd	r25, Y+44	; 0x2c
     73a:	20 e0       	ldi	r18, 0x00	; 0
     73c:	30 e0       	ldi	r19, 0x00	; 0
     73e:	4f e7       	ldi	r20, 0x7F	; 127
     740:	53 e4       	ldi	r21, 0x43	; 67
     742:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     746:	18 16       	cp	r1, r24
     748:	0c f0       	brlt	.+2      	; 0x74c <GetReg+0x4b0>
     74a:	7b c0       	rjmp	.+246    	; 0x842 <GetReg+0x5a6>
	{
		_delay_ms(__us / 1000.0);
     74c:	6d a5       	ldd	r22, Y+45	; 0x2d
     74e:	7e a5       	ldd	r23, Y+46	; 0x2e
     750:	8f a5       	ldd	r24, Y+47	; 0x2f
     752:	98 a9       	ldd	r25, Y+48	; 0x30
     754:	20 e0       	ldi	r18, 0x00	; 0
     756:	30 e0       	ldi	r19, 0x00	; 0
     758:	4a e7       	ldi	r20, 0x7A	; 122
     75a:	54 e4       	ldi	r21, 0x44	; 68
     75c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
     760:	dc 01       	movw	r26, r24
     762:	cb 01       	movw	r24, r22
     764:	8c a3       	std	Y+36, r24	; 0x24
     766:	9d a3       	std	Y+37, r25	; 0x25
     768:	ae a3       	std	Y+38, r26	; 0x26
     76a:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     76c:	6c a1       	ldd	r22, Y+36	; 0x24
     76e:	7d a1       	ldd	r23, Y+37	; 0x25
     770:	8e a1       	ldd	r24, Y+38	; 0x26
     772:	9f a1       	ldd	r25, Y+39	; 0x27
     774:	20 e0       	ldi	r18, 0x00	; 0
     776:	30 e0       	ldi	r19, 0x00	; 0
     778:	4a ef       	ldi	r20, 0xFA	; 250
     77a:	54 e4       	ldi	r21, 0x44	; 68
     77c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     780:	dc 01       	movw	r26, r24
     782:	cb 01       	movw	r24, r22
     784:	88 a3       	std	Y+32, r24	; 0x20
     786:	99 a3       	std	Y+33, r25	; 0x21
     788:	aa a3       	std	Y+34, r26	; 0x22
     78a:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     78c:	68 a1       	ldd	r22, Y+32	; 0x20
     78e:	79 a1       	ldd	r23, Y+33	; 0x21
     790:	8a a1       	ldd	r24, Y+34	; 0x22
     792:	9b a1       	ldd	r25, Y+35	; 0x23
     794:	20 e0       	ldi	r18, 0x00	; 0
     796:	30 e0       	ldi	r19, 0x00	; 0
     798:	40 e8       	ldi	r20, 0x80	; 128
     79a:	5f e3       	ldi	r21, 0x3F	; 63
     79c:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     7a0:	88 23       	and	r24, r24
     7a2:	2c f4       	brge	.+10     	; 0x7ae <GetReg+0x512>
		__ticks = 1;
     7a4:	81 e0       	ldi	r24, 0x01	; 1
     7a6:	90 e0       	ldi	r25, 0x00	; 0
     7a8:	9f 8f       	std	Y+31, r25	; 0x1f
     7aa:	8e 8f       	std	Y+30, r24	; 0x1e
     7ac:	3f c0       	rjmp	.+126    	; 0x82c <GetReg+0x590>
	else if (__tmp > 65535)
     7ae:	68 a1       	ldd	r22, Y+32	; 0x20
     7b0:	79 a1       	ldd	r23, Y+33	; 0x21
     7b2:	8a a1       	ldd	r24, Y+34	; 0x22
     7b4:	9b a1       	ldd	r25, Y+35	; 0x23
     7b6:	20 e0       	ldi	r18, 0x00	; 0
     7b8:	3f ef       	ldi	r19, 0xFF	; 255
     7ba:	4f e7       	ldi	r20, 0x7F	; 127
     7bc:	57 e4       	ldi	r21, 0x47	; 71
     7be:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     7c2:	18 16       	cp	r1, r24
     7c4:	4c f5       	brge	.+82     	; 0x818 <GetReg+0x57c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7c6:	6c a1       	ldd	r22, Y+36	; 0x24
     7c8:	7d a1       	ldd	r23, Y+37	; 0x25
     7ca:	8e a1       	ldd	r24, Y+38	; 0x26
     7cc:	9f a1       	ldd	r25, Y+39	; 0x27
     7ce:	20 e0       	ldi	r18, 0x00	; 0
     7d0:	30 e0       	ldi	r19, 0x00	; 0
     7d2:	40 e2       	ldi	r20, 0x20	; 32
     7d4:	51 e4       	ldi	r21, 0x41	; 65
     7d6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     7da:	dc 01       	movw	r26, r24
     7dc:	cb 01       	movw	r24, r22
     7de:	bc 01       	movw	r22, r24
     7e0:	cd 01       	movw	r24, r26
     7e2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     7e6:	dc 01       	movw	r26, r24
     7e8:	cb 01       	movw	r24, r22
     7ea:	9f 8f       	std	Y+31, r25	; 0x1f
     7ec:	8e 8f       	std	Y+30, r24	; 0x1e
     7ee:	0f c0       	rjmp	.+30     	; 0x80e <GetReg+0x572>
     7f0:	88 ec       	ldi	r24, 0xC8	; 200
     7f2:	90 e0       	ldi	r25, 0x00	; 0
     7f4:	9d 8f       	std	Y+29, r25	; 0x1d
     7f6:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     7f8:	8c 8d       	ldd	r24, Y+28	; 0x1c
     7fa:	9d 8d       	ldd	r25, Y+29	; 0x1d
     7fc:	01 97       	sbiw	r24, 0x01	; 1
     7fe:	f1 f7       	brne	.-4      	; 0x7fc <GetReg+0x560>
     800:	9d 8f       	std	Y+29, r25	; 0x1d
     802:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     804:	8e 8d       	ldd	r24, Y+30	; 0x1e
     806:	9f 8d       	ldd	r25, Y+31	; 0x1f
     808:	01 97       	sbiw	r24, 0x01	; 1
     80a:	9f 8f       	std	Y+31, r25	; 0x1f
     80c:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     80e:	8e 8d       	ldd	r24, Y+30	; 0x1e
     810:	9f 8d       	ldd	r25, Y+31	; 0x1f
     812:	00 97       	sbiw	r24, 0x00	; 0
     814:	69 f7       	brne	.-38     	; 0x7f0 <GetReg+0x554>
     816:	24 c0       	rjmp	.+72     	; 0x860 <GetReg+0x5c4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     818:	68 a1       	ldd	r22, Y+32	; 0x20
     81a:	79 a1       	ldd	r23, Y+33	; 0x21
     81c:	8a a1       	ldd	r24, Y+34	; 0x22
     81e:	9b a1       	ldd	r25, Y+35	; 0x23
     820:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     824:	dc 01       	movw	r26, r24
     826:	cb 01       	movw	r24, r22
     828:	9f 8f       	std	Y+31, r25	; 0x1f
     82a:	8e 8f       	std	Y+30, r24	; 0x1e
     82c:	8e 8d       	ldd	r24, Y+30	; 0x1e
     82e:	9f 8d       	ldd	r25, Y+31	; 0x1f
     830:	9b 8f       	std	Y+27, r25	; 0x1b
     832:	8a 8f       	std	Y+26, r24	; 0x1a
     834:	8a 8d       	ldd	r24, Y+26	; 0x1a
     836:	9b 8d       	ldd	r25, Y+27	; 0x1b
     838:	01 97       	sbiw	r24, 0x01	; 1
     83a:	f1 f7       	brne	.-4      	; 0x838 <GetReg+0x59c>
     83c:	9b 8f       	std	Y+27, r25	; 0x1b
     83e:	8a 8f       	std	Y+26, r24	; 0x1a
     840:	0f c0       	rjmp	.+30     	; 0x860 <GetReg+0x5c4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     842:	69 a5       	ldd	r22, Y+41	; 0x29
     844:	7a a5       	ldd	r23, Y+42	; 0x2a
     846:	8b a5       	ldd	r24, Y+43	; 0x2b
     848:	9c a5       	ldd	r25, Y+44	; 0x2c
     84a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     84e:	dc 01       	movw	r26, r24
     850:	cb 01       	movw	r24, r22
     852:	88 a7       	std	Y+40, r24	; 0x28
     854:	88 a5       	ldd	r24, Y+40	; 0x28
     856:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     858:	89 8d       	ldd	r24, Y+25	; 0x19
     85a:	8a 95       	dec	r24
     85c:	f1 f7       	brne	.-4      	; 0x85a <GetReg+0x5be>
     85e:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(10);
    reg = WriteByteSPI(NOP);	//Skicka NOP antalet byte som du vill hÃ¤mta (oftast 1gÃ¥ng, men t.ex addr Ã¤r 5 byte!) och spara isf inte i "reg" utan en array med en loop
     860:	8f ef       	ldi	r24, 0xFF	; 255
     862:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <WriteByteSPI>
     866:	fe 01       	movw	r30, r28
     868:	ef 59       	subi	r30, 0x9F	; 159
     86a:	ff 4f       	sbci	r31, 0xFF	; 255
     86c:	80 83       	st	Z, r24
     86e:	80 e0       	ldi	r24, 0x00	; 0
     870:	90 e0       	ldi	r25, 0x00	; 0
     872:	a0 e2       	ldi	r26, 0x20	; 32
     874:	b1 e4       	ldi	r27, 0x41	; 65
     876:	8d 8b       	std	Y+21, r24	; 0x15
     878:	9e 8b       	std	Y+22, r25	; 0x16
     87a:	af 8b       	std	Y+23, r26	; 0x17
     87c:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     87e:	6d 89       	ldd	r22, Y+21	; 0x15
     880:	7e 89       	ldd	r23, Y+22	; 0x16
     882:	8f 89       	ldd	r24, Y+23	; 0x17
     884:	98 8d       	ldd	r25, Y+24	; 0x18
     886:	2b ea       	ldi	r18, 0xAB	; 171
     888:	3a ea       	ldi	r19, 0xAA	; 170
     88a:	4a e2       	ldi	r20, 0x2A	; 42
     88c:	50 e4       	ldi	r21, 0x40	; 64
     88e:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     892:	dc 01       	movw	r26, r24
     894:	cb 01       	movw	r24, r22
     896:	89 8b       	std	Y+17, r24	; 0x11
     898:	9a 8b       	std	Y+18, r25	; 0x12
     89a:	ab 8b       	std	Y+19, r26	; 0x13
     89c:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     89e:	69 89       	ldd	r22, Y+17	; 0x11
     8a0:	7a 89       	ldd	r23, Y+18	; 0x12
     8a2:	8b 89       	ldd	r24, Y+19	; 0x13
     8a4:	9c 89       	ldd	r25, Y+20	; 0x14
     8a6:	20 e0       	ldi	r18, 0x00	; 0
     8a8:	30 e0       	ldi	r19, 0x00	; 0
     8aa:	40 e8       	ldi	r20, 0x80	; 128
     8ac:	5f e3       	ldi	r21, 0x3F	; 63
     8ae:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     8b2:	88 23       	and	r24, r24
     8b4:	1c f4       	brge	.+6      	; 0x8bc <GetReg+0x620>
		__ticks = 1;
     8b6:	81 e0       	ldi	r24, 0x01	; 1
     8b8:	88 8b       	std	Y+16, r24	; 0x10
     8ba:	91 c0       	rjmp	.+290    	; 0x9de <__stack+0xdf>
	else if (__tmp > 255)
     8bc:	69 89       	ldd	r22, Y+17	; 0x11
     8be:	7a 89       	ldd	r23, Y+18	; 0x12
     8c0:	8b 89       	ldd	r24, Y+19	; 0x13
     8c2:	9c 89       	ldd	r25, Y+20	; 0x14
     8c4:	20 e0       	ldi	r18, 0x00	; 0
     8c6:	30 e0       	ldi	r19, 0x00	; 0
     8c8:	4f e7       	ldi	r20, 0x7F	; 127
     8ca:	53 e4       	ldi	r21, 0x43	; 67
     8cc:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     8d0:	18 16       	cp	r1, r24
     8d2:	0c f0       	brlt	.+2      	; 0x8d6 <GetReg+0x63a>
     8d4:	7b c0       	rjmp	.+246    	; 0x9cc <__stack+0xcd>
	{
		_delay_ms(__us / 1000.0);
     8d6:	6d 89       	ldd	r22, Y+21	; 0x15
     8d8:	7e 89       	ldd	r23, Y+22	; 0x16
     8da:	8f 89       	ldd	r24, Y+23	; 0x17
     8dc:	98 8d       	ldd	r25, Y+24	; 0x18
     8de:	20 e0       	ldi	r18, 0x00	; 0
     8e0:	30 e0       	ldi	r19, 0x00	; 0
     8e2:	4a e7       	ldi	r20, 0x7A	; 122
     8e4:	54 e4       	ldi	r21, 0x44	; 68
     8e6:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
     8ea:	dc 01       	movw	r26, r24
     8ec:	cb 01       	movw	r24, r22
     8ee:	8c 87       	std	Y+12, r24	; 0x0c
     8f0:	9d 87       	std	Y+13, r25	; 0x0d
     8f2:	ae 87       	std	Y+14, r26	; 0x0e
     8f4:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     8f6:	6c 85       	ldd	r22, Y+12	; 0x0c
     8f8:	7d 85       	ldd	r23, Y+13	; 0x0d
     8fa:	8e 85       	ldd	r24, Y+14	; 0x0e
     8fc:	9f 85       	ldd	r25, Y+15	; 0x0f
     8fe:	20 e0       	ldi	r18, 0x00	; 0
     900:	30 e0       	ldi	r19, 0x00	; 0
     902:	4a ef       	ldi	r20, 0xFA	; 250
     904:	54 e4       	ldi	r21, 0x44	; 68
     906:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     90a:	dc 01       	movw	r26, r24
     90c:	cb 01       	movw	r24, r22
     90e:	88 87       	std	Y+8, r24	; 0x08
     910:	99 87       	std	Y+9, r25	; 0x09
     912:	aa 87       	std	Y+10, r26	; 0x0a
     914:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     916:	68 85       	ldd	r22, Y+8	; 0x08
     918:	79 85       	ldd	r23, Y+9	; 0x09
     91a:	8a 85       	ldd	r24, Y+10	; 0x0a
     91c:	9b 85       	ldd	r25, Y+11	; 0x0b
     91e:	20 e0       	ldi	r18, 0x00	; 0
     920:	30 e0       	ldi	r19, 0x00	; 0
     922:	40 e8       	ldi	r20, 0x80	; 128
     924:	5f e3       	ldi	r21, 0x3F	; 63
     926:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     92a:	88 23       	and	r24, r24
     92c:	2c f4       	brge	.+10     	; 0x938 <__stack+0x39>
		__ticks = 1;
     92e:	81 e0       	ldi	r24, 0x01	; 1
     930:	90 e0       	ldi	r25, 0x00	; 0
     932:	9f 83       	std	Y+7, r25	; 0x07
     934:	8e 83       	std	Y+6, r24	; 0x06
     936:	3f c0       	rjmp	.+126    	; 0x9b6 <__stack+0xb7>
	else if (__tmp > 65535)
     938:	68 85       	ldd	r22, Y+8	; 0x08
     93a:	79 85       	ldd	r23, Y+9	; 0x09
     93c:	8a 85       	ldd	r24, Y+10	; 0x0a
     93e:	9b 85       	ldd	r25, Y+11	; 0x0b
     940:	20 e0       	ldi	r18, 0x00	; 0
     942:	3f ef       	ldi	r19, 0xFF	; 255
     944:	4f e7       	ldi	r20, 0x7F	; 127
     946:	57 e4       	ldi	r21, 0x47	; 71
     948:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     94c:	18 16       	cp	r1, r24
     94e:	4c f5       	brge	.+82     	; 0x9a2 <__stack+0xa3>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     950:	6c 85       	ldd	r22, Y+12	; 0x0c
     952:	7d 85       	ldd	r23, Y+13	; 0x0d
     954:	8e 85       	ldd	r24, Y+14	; 0x0e
     956:	9f 85       	ldd	r25, Y+15	; 0x0f
     958:	20 e0       	ldi	r18, 0x00	; 0
     95a:	30 e0       	ldi	r19, 0x00	; 0
     95c:	40 e2       	ldi	r20, 0x20	; 32
     95e:	51 e4       	ldi	r21, 0x41	; 65
     960:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     964:	dc 01       	movw	r26, r24
     966:	cb 01       	movw	r24, r22
     968:	bc 01       	movw	r22, r24
     96a:	cd 01       	movw	r24, r26
     96c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     970:	dc 01       	movw	r26, r24
     972:	cb 01       	movw	r24, r22
     974:	9f 83       	std	Y+7, r25	; 0x07
     976:	8e 83       	std	Y+6, r24	; 0x06
     978:	0f c0       	rjmp	.+30     	; 0x998 <__stack+0x99>
     97a:	88 ec       	ldi	r24, 0xC8	; 200
     97c:	90 e0       	ldi	r25, 0x00	; 0
     97e:	9d 83       	std	Y+5, r25	; 0x05
     980:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     982:	8c 81       	ldd	r24, Y+4	; 0x04
     984:	9d 81       	ldd	r25, Y+5	; 0x05
     986:	01 97       	sbiw	r24, 0x01	; 1
     988:	f1 f7       	brne	.-4      	; 0x986 <__stack+0x87>
     98a:	9d 83       	std	Y+5, r25	; 0x05
     98c:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     98e:	8e 81       	ldd	r24, Y+6	; 0x06
     990:	9f 81       	ldd	r25, Y+7	; 0x07
     992:	01 97       	sbiw	r24, 0x01	; 1
     994:	9f 83       	std	Y+7, r25	; 0x07
     996:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     998:	8e 81       	ldd	r24, Y+6	; 0x06
     99a:	9f 81       	ldd	r25, Y+7	; 0x07
     99c:	00 97       	sbiw	r24, 0x00	; 0
     99e:	69 f7       	brne	.-38     	; 0x97a <__stack+0x7b>
     9a0:	24 c0       	rjmp	.+72     	; 0x9ea <__stack+0xeb>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     9a2:	68 85       	ldd	r22, Y+8	; 0x08
     9a4:	79 85       	ldd	r23, Y+9	; 0x09
     9a6:	8a 85       	ldd	r24, Y+10	; 0x0a
     9a8:	9b 85       	ldd	r25, Y+11	; 0x0b
     9aa:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     9ae:	dc 01       	movw	r26, r24
     9b0:	cb 01       	movw	r24, r22
     9b2:	9f 83       	std	Y+7, r25	; 0x07
     9b4:	8e 83       	std	Y+6, r24	; 0x06
     9b6:	8e 81       	ldd	r24, Y+6	; 0x06
     9b8:	9f 81       	ldd	r25, Y+7	; 0x07
     9ba:	9b 83       	std	Y+3, r25	; 0x03
     9bc:	8a 83       	std	Y+2, r24	; 0x02
     9be:	8a 81       	ldd	r24, Y+2	; 0x02
     9c0:	9b 81       	ldd	r25, Y+3	; 0x03
     9c2:	01 97       	sbiw	r24, 0x01	; 1
     9c4:	f1 f7       	brne	.-4      	; 0x9c2 <__stack+0xc3>
     9c6:	9b 83       	std	Y+3, r25	; 0x03
     9c8:	8a 83       	std	Y+2, r24	; 0x02
     9ca:	0f c0       	rjmp	.+30     	; 0x9ea <__stack+0xeb>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     9cc:	69 89       	ldd	r22, Y+17	; 0x11
     9ce:	7a 89       	ldd	r23, Y+18	; 0x12
     9d0:	8b 89       	ldd	r24, Y+19	; 0x13
     9d2:	9c 89       	ldd	r25, Y+20	; 0x14
     9d4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     9d8:	dc 01       	movw	r26, r24
     9da:	cb 01       	movw	r24, r22
     9dc:	88 8b       	std	Y+16, r24	; 0x10
     9de:	88 89       	ldd	r24, Y+16	; 0x10
     9e0:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     9e2:	89 81       	ldd	r24, Y+1	; 0x01
     9e4:	8a 95       	dec	r24
     9e6:	f1 f7       	brne	.-4      	; 0x9e4 <__stack+0xe5>
     9e8:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    //PORTB|=_BV(2);	//CSN IR_High
            PORTB|=_BV(2);
     9ea:	a5 e2       	ldi	r26, 0x25	; 37
     9ec:	b0 e0       	ldi	r27, 0x00	; 0
     9ee:	e5 e2       	ldi	r30, 0x25	; 37
     9f0:	f0 e0       	ldi	r31, 0x00	; 0
     9f2:	80 81       	ld	r24, Z
     9f4:	84 60       	ori	r24, 0x04	; 4
     9f6:	8c 93       	st	X, r24

    return reg;	// Returnerar registret fÃ¶rhoppningsvis med bit5=1 (tx_ds=lyckad sÃ¤ndning)
     9f8:	fe 01       	movw	r30, r28
     9fa:	ef 59       	subi	r30, 0x9F	; 159
     9fc:	ff 4f       	sbci	r31, 0xFF	; 255
     9fe:	80 81       	ld	r24, Z
}
     a00:	cf 59       	subi	r28, 0x9F	; 159
     a02:	df 4f       	sbci	r29, 0xFF	; 255
     a04:	0f b6       	in	r0, 0x3f	; 63
     a06:	f8 94       	cli
     a08:	de bf       	out	0x3e, r29	; 62
     a0a:	0f be       	out	0x3f, r0	; 63
     a0c:	cd bf       	out	0x3d, r28	; 61
     a0e:	cf 91       	pop	r28
     a10:	df 91       	pop	r29
     a12:	1f 91       	pop	r17
     a14:	0f 91       	pop	r16
     a16:	08 95       	ret

00000a18 <WriteToNrf>:


/*****************nrf-setup***************************/ //StÃ¤ller in nrf'en genoma att fÃ¶rst skicka vilket register, sen vÃ¤rdet pÃ¥ registret.
uint8_t *WriteToNrf(uint8_t ReadWrite, uint8_t reg, uint8_t *val, uint8_t antVal)	//tar in "ReadWrite" (W el R), "reg" (ett register), "*val" (en array) & "antVal" (antal integer i variabeln)
{
     a18:	0f 93       	push	r16
     a1a:	1f 93       	push	r17
     a1c:	df 93       	push	r29
     a1e:	cf 93       	push	r28
     a20:	cd b7       	in	r28, 0x3d	; 61
     a22:	de b7       	in	r29, 0x3e	; 62
     a24:	cf 57       	subi	r28, 0x7F	; 127
     a26:	d0 40       	sbci	r29, 0x00	; 0
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	de bf       	out	0x3e, r29	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	cd bf       	out	0x3d, r28	; 61
     a32:	fe 01       	movw	r30, r28
     a34:	e5 58       	subi	r30, 0x85	; 133
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	80 83       	st	Z, r24
     a3a:	fe 01       	movw	r30, r28
     a3c:	e4 58       	subi	r30, 0x84	; 132
     a3e:	ff 4f       	sbci	r31, 0xFF	; 255
     a40:	60 83       	st	Z, r22
     a42:	fe 01       	movw	r30, r28
     a44:	e3 58       	subi	r30, 0x83	; 131
     a46:	ff 4f       	sbci	r31, 0xFF	; 255
     a48:	51 83       	std	Z+1, r21	; 0x01
     a4a:	40 83       	st	Z, r20
     a4c:	fe 01       	movw	r30, r28
     a4e:	e1 58       	subi	r30, 0x81	; 129
     a50:	ff 4f       	sbci	r31, 0xFF	; 255
     a52:	20 83       	st	Z, r18
    cli();	//disable global interrupt
     a54:	f8 94       	cli

    if (ReadWrite == 'W')	//W=vill skriva till nrf-en (R=lÃ¤sa av den, R_REGISTER (0x00) ,sÃ¥ skiter i en else funktion)
     a56:	fe 01       	movw	r30, r28
     a58:	e5 58       	subi	r30, 0x85	; 133
     a5a:	ff 4f       	sbci	r31, 0xFF	; 255
     a5c:	80 81       	ld	r24, Z
     a5e:	87 35       	cpi	r24, 0x57	; 87
     a60:	49 f4       	brne	.+18     	; 0xa74 <WriteToNrf+0x5c>
    {
        reg = W_REGISTER + reg;	//ex: reg = EN_AA: 0b0010 0000 + 0b0000 0001 = 0b0010 0001
     a62:	de 01       	movw	r26, r28
     a64:	a4 58       	subi	r26, 0x84	; 132
     a66:	bf 4f       	sbci	r27, 0xFF	; 255
     a68:	fe 01       	movw	r30, r28
     a6a:	e4 58       	subi	r30, 0x84	; 132
     a6c:	ff 4f       	sbci	r31, 0xFF	; 255
     a6e:	80 81       	ld	r24, Z
     a70:	80 5e       	subi	r24, 0xE0	; 224
     a72:	8c 93       	st	X, r24
     a74:	fe 01       	movw	r30, r28
     a76:	eb 58       	subi	r30, 0x8B	; 139
     a78:	ff 4f       	sbci	r31, 0xFF	; 255
     a7a:	80 e0       	ldi	r24, 0x00	; 0
     a7c:	90 e0       	ldi	r25, 0x00	; 0
     a7e:	a0 e2       	ldi	r26, 0x20	; 32
     a80:	b1 e4       	ldi	r27, 0x41	; 65
     a82:	80 83       	st	Z, r24
     a84:	91 83       	std	Z+1, r25	; 0x01
     a86:	a2 83       	std	Z+2, r26	; 0x02
     a88:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     a8a:	8e 01       	movw	r16, r28
     a8c:	0f 58       	subi	r16, 0x8F	; 143
     a8e:	1f 4f       	sbci	r17, 0xFF	; 255
     a90:	fe 01       	movw	r30, r28
     a92:	eb 58       	subi	r30, 0x8B	; 139
     a94:	ff 4f       	sbci	r31, 0xFF	; 255
     a96:	60 81       	ld	r22, Z
     a98:	71 81       	ldd	r23, Z+1	; 0x01
     a9a:	82 81       	ldd	r24, Z+2	; 0x02
     a9c:	93 81       	ldd	r25, Z+3	; 0x03
     a9e:	2b ea       	ldi	r18, 0xAB	; 171
     aa0:	3a ea       	ldi	r19, 0xAA	; 170
     aa2:	4a e2       	ldi	r20, 0x2A	; 42
     aa4:	50 e4       	ldi	r21, 0x40	; 64
     aa6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     aaa:	dc 01       	movw	r26, r24
     aac:	cb 01       	movw	r24, r22
     aae:	f8 01       	movw	r30, r16
     ab0:	80 83       	st	Z, r24
     ab2:	91 83       	std	Z+1, r25	; 0x01
     ab4:	a2 83       	std	Z+2, r26	; 0x02
     ab6:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     ab8:	fe 01       	movw	r30, r28
     aba:	ef 58       	subi	r30, 0x8F	; 143
     abc:	ff 4f       	sbci	r31, 0xFF	; 255
     abe:	60 81       	ld	r22, Z
     ac0:	71 81       	ldd	r23, Z+1	; 0x01
     ac2:	82 81       	ldd	r24, Z+2	; 0x02
     ac4:	93 81       	ldd	r25, Z+3	; 0x03
     ac6:	20 e0       	ldi	r18, 0x00	; 0
     ac8:	30 e0       	ldi	r19, 0x00	; 0
     aca:	40 e8       	ldi	r20, 0x80	; 128
     acc:	5f e3       	ldi	r21, 0x3F	; 63
     ace:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     ad2:	88 23       	and	r24, r24
     ad4:	34 f4       	brge	.+12     	; 0xae2 <WriteToNrf+0xca>
		__ticks = 1;
     ad6:	fe 01       	movw	r30, r28
     ad8:	e0 59       	subi	r30, 0x90	; 144
     ada:	ff 4f       	sbci	r31, 0xFF	; 255
     adc:	81 e0       	ldi	r24, 0x01	; 1
     ade:	80 83       	st	Z, r24
     ae0:	e0 c0       	rjmp	.+448    	; 0xca2 <WriteToNrf+0x28a>
	else if (__tmp > 255)
     ae2:	fe 01       	movw	r30, r28
     ae4:	ef 58       	subi	r30, 0x8F	; 143
     ae6:	ff 4f       	sbci	r31, 0xFF	; 255
     ae8:	60 81       	ld	r22, Z
     aea:	71 81       	ldd	r23, Z+1	; 0x01
     aec:	82 81       	ldd	r24, Z+2	; 0x02
     aee:	93 81       	ldd	r25, Z+3	; 0x03
     af0:	20 e0       	ldi	r18, 0x00	; 0
     af2:	30 e0       	ldi	r19, 0x00	; 0
     af4:	4f e7       	ldi	r20, 0x7F	; 127
     af6:	53 e4       	ldi	r21, 0x43	; 67
     af8:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     afc:	18 16       	cp	r1, r24
     afe:	0c f0       	brlt	.+2      	; 0xb02 <WriteToNrf+0xea>
     b00:	c0 c0       	rjmp	.+384    	; 0xc82 <WriteToNrf+0x26a>
	{
		_delay_ms(__us / 1000.0);
     b02:	fe 01       	movw	r30, r28
     b04:	eb 58       	subi	r30, 0x8B	; 139
     b06:	ff 4f       	sbci	r31, 0xFF	; 255
     b08:	60 81       	ld	r22, Z
     b0a:	71 81       	ldd	r23, Z+1	; 0x01
     b0c:	82 81       	ldd	r24, Z+2	; 0x02
     b0e:	93 81       	ldd	r25, Z+3	; 0x03
     b10:	20 e0       	ldi	r18, 0x00	; 0
     b12:	30 e0       	ldi	r19, 0x00	; 0
     b14:	4a e7       	ldi	r20, 0x7A	; 122
     b16:	54 e4       	ldi	r21, 0x44	; 68
     b18:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
     b1c:	dc 01       	movw	r26, r24
     b1e:	cb 01       	movw	r24, r22
     b20:	fe 01       	movw	r30, r28
     b22:	e4 59       	subi	r30, 0x94	; 148
     b24:	ff 4f       	sbci	r31, 0xFF	; 255
     b26:	80 83       	st	Z, r24
     b28:	91 83       	std	Z+1, r25	; 0x01
     b2a:	a2 83       	std	Z+2, r26	; 0x02
     b2c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     b2e:	8e 01       	movw	r16, r28
     b30:	08 59       	subi	r16, 0x98	; 152
     b32:	1f 4f       	sbci	r17, 0xFF	; 255
     b34:	fe 01       	movw	r30, r28
     b36:	e4 59       	subi	r30, 0x94	; 148
     b38:	ff 4f       	sbci	r31, 0xFF	; 255
     b3a:	60 81       	ld	r22, Z
     b3c:	71 81       	ldd	r23, Z+1	; 0x01
     b3e:	82 81       	ldd	r24, Z+2	; 0x02
     b40:	93 81       	ldd	r25, Z+3	; 0x03
     b42:	20 e0       	ldi	r18, 0x00	; 0
     b44:	30 e0       	ldi	r19, 0x00	; 0
     b46:	4a ef       	ldi	r20, 0xFA	; 250
     b48:	54 e4       	ldi	r21, 0x44	; 68
     b4a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     b4e:	dc 01       	movw	r26, r24
     b50:	cb 01       	movw	r24, r22
     b52:	f8 01       	movw	r30, r16
     b54:	80 83       	st	Z, r24
     b56:	91 83       	std	Z+1, r25	; 0x01
     b58:	a2 83       	std	Z+2, r26	; 0x02
     b5a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     b5c:	fe 01       	movw	r30, r28
     b5e:	e8 59       	subi	r30, 0x98	; 152
     b60:	ff 4f       	sbci	r31, 0xFF	; 255
     b62:	60 81       	ld	r22, Z
     b64:	71 81       	ldd	r23, Z+1	; 0x01
     b66:	82 81       	ldd	r24, Z+2	; 0x02
     b68:	93 81       	ldd	r25, Z+3	; 0x03
     b6a:	20 e0       	ldi	r18, 0x00	; 0
     b6c:	30 e0       	ldi	r19, 0x00	; 0
     b6e:	40 e8       	ldi	r20, 0x80	; 128
     b70:	5f e3       	ldi	r21, 0x3F	; 63
     b72:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     b76:	88 23       	and	r24, r24
     b78:	44 f4       	brge	.+16     	; 0xb8a <WriteToNrf+0x172>
		__ticks = 1;
     b7a:	fe 01       	movw	r30, r28
     b7c:	ea 59       	subi	r30, 0x9A	; 154
     b7e:	ff 4f       	sbci	r31, 0xFF	; 255
     b80:	81 e0       	ldi	r24, 0x01	; 1
     b82:	90 e0       	ldi	r25, 0x00	; 0
     b84:	91 83       	std	Z+1, r25	; 0x01
     b86:	80 83       	st	Z, r24
     b88:	64 c0       	rjmp	.+200    	; 0xc52 <WriteToNrf+0x23a>
	else if (__tmp > 65535)
     b8a:	fe 01       	movw	r30, r28
     b8c:	e8 59       	subi	r30, 0x98	; 152
     b8e:	ff 4f       	sbci	r31, 0xFF	; 255
     b90:	60 81       	ld	r22, Z
     b92:	71 81       	ldd	r23, Z+1	; 0x01
     b94:	82 81       	ldd	r24, Z+2	; 0x02
     b96:	93 81       	ldd	r25, Z+3	; 0x03
     b98:	20 e0       	ldi	r18, 0x00	; 0
     b9a:	3f ef       	ldi	r19, 0xFF	; 255
     b9c:	4f e7       	ldi	r20, 0x7F	; 127
     b9e:	57 e4       	ldi	r21, 0x47	; 71
     ba0:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     ba4:	18 16       	cp	r1, r24
     ba6:	0c f0       	brlt	.+2      	; 0xbaa <WriteToNrf+0x192>
     ba8:	43 c0       	rjmp	.+134    	; 0xc30 <WriteToNrf+0x218>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     baa:	fe 01       	movw	r30, r28
     bac:	e4 59       	subi	r30, 0x94	; 148
     bae:	ff 4f       	sbci	r31, 0xFF	; 255
     bb0:	60 81       	ld	r22, Z
     bb2:	71 81       	ldd	r23, Z+1	; 0x01
     bb4:	82 81       	ldd	r24, Z+2	; 0x02
     bb6:	93 81       	ldd	r25, Z+3	; 0x03
     bb8:	20 e0       	ldi	r18, 0x00	; 0
     bba:	30 e0       	ldi	r19, 0x00	; 0
     bbc:	40 e2       	ldi	r20, 0x20	; 32
     bbe:	51 e4       	ldi	r21, 0x41	; 65
     bc0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     bc4:	dc 01       	movw	r26, r24
     bc6:	cb 01       	movw	r24, r22
     bc8:	8e 01       	movw	r16, r28
     bca:	0a 59       	subi	r16, 0x9A	; 154
     bcc:	1f 4f       	sbci	r17, 0xFF	; 255
     bce:	bc 01       	movw	r22, r24
     bd0:	cd 01       	movw	r24, r26
     bd2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     bd6:	dc 01       	movw	r26, r24
     bd8:	cb 01       	movw	r24, r22
     bda:	f8 01       	movw	r30, r16
     bdc:	91 83       	std	Z+1, r25	; 0x01
     bde:	80 83       	st	Z, r24
     be0:	1f c0       	rjmp	.+62     	; 0xc20 <WriteToNrf+0x208>
     be2:	fe 01       	movw	r30, r28
     be4:	ec 59       	subi	r30, 0x9C	; 156
     be6:	ff 4f       	sbci	r31, 0xFF	; 255
     be8:	88 ec       	ldi	r24, 0xC8	; 200
     bea:	90 e0       	ldi	r25, 0x00	; 0
     bec:	91 83       	std	Z+1, r25	; 0x01
     bee:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     bf0:	fe 01       	movw	r30, r28
     bf2:	ec 59       	subi	r30, 0x9C	; 156
     bf4:	ff 4f       	sbci	r31, 0xFF	; 255
     bf6:	80 81       	ld	r24, Z
     bf8:	91 81       	ldd	r25, Z+1	; 0x01
     bfa:	01 97       	sbiw	r24, 0x01	; 1
     bfc:	f1 f7       	brne	.-4      	; 0xbfa <WriteToNrf+0x1e2>
     bfe:	fe 01       	movw	r30, r28
     c00:	ec 59       	subi	r30, 0x9C	; 156
     c02:	ff 4f       	sbci	r31, 0xFF	; 255
     c04:	91 83       	std	Z+1, r25	; 0x01
     c06:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     c08:	de 01       	movw	r26, r28
     c0a:	aa 59       	subi	r26, 0x9A	; 154
     c0c:	bf 4f       	sbci	r27, 0xFF	; 255
     c0e:	fe 01       	movw	r30, r28
     c10:	ea 59       	subi	r30, 0x9A	; 154
     c12:	ff 4f       	sbci	r31, 0xFF	; 255
     c14:	80 81       	ld	r24, Z
     c16:	91 81       	ldd	r25, Z+1	; 0x01
     c18:	01 97       	sbiw	r24, 0x01	; 1
     c1a:	11 96       	adiw	r26, 0x01	; 1
     c1c:	9c 93       	st	X, r25
     c1e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     c20:	fe 01       	movw	r30, r28
     c22:	ea 59       	subi	r30, 0x9A	; 154
     c24:	ff 4f       	sbci	r31, 0xFF	; 255
     c26:	80 81       	ld	r24, Z
     c28:	91 81       	ldd	r25, Z+1	; 0x01
     c2a:	00 97       	sbiw	r24, 0x00	; 0
     c2c:	d1 f6       	brne	.-76     	; 0xbe2 <WriteToNrf+0x1ca>
     c2e:	4b c0       	rjmp	.+150    	; 0xcc6 <WriteToNrf+0x2ae>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     c30:	8e 01       	movw	r16, r28
     c32:	0a 59       	subi	r16, 0x9A	; 154
     c34:	1f 4f       	sbci	r17, 0xFF	; 255
     c36:	fe 01       	movw	r30, r28
     c38:	e8 59       	subi	r30, 0x98	; 152
     c3a:	ff 4f       	sbci	r31, 0xFF	; 255
     c3c:	60 81       	ld	r22, Z
     c3e:	71 81       	ldd	r23, Z+1	; 0x01
     c40:	82 81       	ldd	r24, Z+2	; 0x02
     c42:	93 81       	ldd	r25, Z+3	; 0x03
     c44:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     c48:	dc 01       	movw	r26, r24
     c4a:	cb 01       	movw	r24, r22
     c4c:	f8 01       	movw	r30, r16
     c4e:	91 83       	std	Z+1, r25	; 0x01
     c50:	80 83       	st	Z, r24
     c52:	de 01       	movw	r26, r28
     c54:	ae 59       	subi	r26, 0x9E	; 158
     c56:	bf 4f       	sbci	r27, 0xFF	; 255
     c58:	fe 01       	movw	r30, r28
     c5a:	ea 59       	subi	r30, 0x9A	; 154
     c5c:	ff 4f       	sbci	r31, 0xFF	; 255
     c5e:	80 81       	ld	r24, Z
     c60:	91 81       	ldd	r25, Z+1	; 0x01
     c62:	11 96       	adiw	r26, 0x01	; 1
     c64:	9c 93       	st	X, r25
     c66:	8e 93       	st	-X, r24
     c68:	fe 01       	movw	r30, r28
     c6a:	ee 59       	subi	r30, 0x9E	; 158
     c6c:	ff 4f       	sbci	r31, 0xFF	; 255
     c6e:	80 81       	ld	r24, Z
     c70:	91 81       	ldd	r25, Z+1	; 0x01
     c72:	01 97       	sbiw	r24, 0x01	; 1
     c74:	f1 f7       	brne	.-4      	; 0xc72 <WriteToNrf+0x25a>
     c76:	fe 01       	movw	r30, r28
     c78:	ee 59       	subi	r30, 0x9E	; 158
     c7a:	ff 4f       	sbci	r31, 0xFF	; 255
     c7c:	91 83       	std	Z+1, r25	; 0x01
     c7e:	80 83       	st	Z, r24
     c80:	22 c0       	rjmp	.+68     	; 0xcc6 <WriteToNrf+0x2ae>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     c82:	8e 01       	movw	r16, r28
     c84:	00 59       	subi	r16, 0x90	; 144
     c86:	1f 4f       	sbci	r17, 0xFF	; 255
     c88:	fe 01       	movw	r30, r28
     c8a:	ef 58       	subi	r30, 0x8F	; 143
     c8c:	ff 4f       	sbci	r31, 0xFF	; 255
     c8e:	60 81       	ld	r22, Z
     c90:	71 81       	ldd	r23, Z+1	; 0x01
     c92:	82 81       	ldd	r24, Z+2	; 0x02
     c94:	93 81       	ldd	r25, Z+3	; 0x03
     c96:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     c9a:	dc 01       	movw	r26, r24
     c9c:	cb 01       	movw	r24, r22
     c9e:	f8 01       	movw	r30, r16
     ca0:	80 83       	st	Z, r24
     ca2:	de 01       	movw	r26, r28
     ca4:	af 59       	subi	r26, 0x9F	; 159
     ca6:	bf 4f       	sbci	r27, 0xFF	; 255
     ca8:	fe 01       	movw	r30, r28
     caa:	e0 59       	subi	r30, 0x90	; 144
     cac:	ff 4f       	sbci	r31, 0xFF	; 255
     cae:	80 81       	ld	r24, Z
     cb0:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     cb2:	fe 01       	movw	r30, r28
     cb4:	ef 59       	subi	r30, 0x9F	; 159
     cb6:	ff 4f       	sbci	r31, 0xFF	; 255
     cb8:	80 81       	ld	r24, Z
     cba:	8a 95       	dec	r24
     cbc:	f1 f7       	brne	.-4      	; 0xcba <WriteToNrf+0x2a2>
     cbe:	fe 01       	movw	r30, r28
     cc0:	ef 59       	subi	r30, 0x9F	; 159
     cc2:	ff 4f       	sbci	r31, 0xFF	; 255
     cc4:	80 83       	st	Z, r24
    //Static uint8_t fÃ¶r att det ska gÃ¥ att returnera en array (lÃ¤gg mÃ¤rke till "*" uppe pÃ¥ funktionen!!!)
    static uint8_t ret[dataLen];	//antar att det lÃ¤ngsta man vill lÃ¤sa ut nÃ¤r man kallar pÃ¥ "R" Ã¤r dataleng-lÃ¥ngt, dvs anvÃ¤nder man bara 1byte datalengd Ã¥ vill lÃ¤sa ut 5byte RF_Adress sÃ¥ skriv 5 hÃ¤r ist!!!

    _delay_us(10);		//alla delay Ã¤r sÃ¥ att nrfen ska hinna med! (microsekunder)
    //PORTB&=~_BV(2);	//CSN low = nrf-chippet bÃ¶rjar lyssna
    PORTB&=~_BV(2);
     cc6:	a5 e2       	ldi	r26, 0x25	; 37
     cc8:	b0 e0       	ldi	r27, 0x00	; 0
     cca:	e5 e2       	ldi	r30, 0x25	; 37
     ccc:	f0 e0       	ldi	r31, 0x00	; 0
     cce:	80 81       	ld	r24, Z
     cd0:	8b 7f       	andi	r24, 0xFB	; 251
     cd2:	8c 93       	st	X, r24
     cd4:	fe 01       	movw	r30, r28
     cd6:	e3 5a       	subi	r30, 0xA3	; 163
     cd8:	ff 4f       	sbci	r31, 0xFF	; 255
     cda:	80 e0       	ldi	r24, 0x00	; 0
     cdc:	90 e0       	ldi	r25, 0x00	; 0
     cde:	a0 e2       	ldi	r26, 0x20	; 32
     ce0:	b1 e4       	ldi	r27, 0x41	; 65
     ce2:	80 83       	st	Z, r24
     ce4:	91 83       	std	Z+1, r25	; 0x01
     ce6:	a2 83       	std	Z+2, r26	; 0x02
     ce8:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     cea:	8e 01       	movw	r16, r28
     cec:	07 5a       	subi	r16, 0xA7	; 167
     cee:	1f 4f       	sbci	r17, 0xFF	; 255
     cf0:	fe 01       	movw	r30, r28
     cf2:	e3 5a       	subi	r30, 0xA3	; 163
     cf4:	ff 4f       	sbci	r31, 0xFF	; 255
     cf6:	60 81       	ld	r22, Z
     cf8:	71 81       	ldd	r23, Z+1	; 0x01
     cfa:	82 81       	ldd	r24, Z+2	; 0x02
     cfc:	93 81       	ldd	r25, Z+3	; 0x03
     cfe:	2b ea       	ldi	r18, 0xAB	; 171
     d00:	3a ea       	ldi	r19, 0xAA	; 170
     d02:	4a e2       	ldi	r20, 0x2A	; 42
     d04:	50 e4       	ldi	r21, 0x40	; 64
     d06:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     d0a:	dc 01       	movw	r26, r24
     d0c:	cb 01       	movw	r24, r22
     d0e:	f8 01       	movw	r30, r16
     d10:	80 83       	st	Z, r24
     d12:	91 83       	std	Z+1, r25	; 0x01
     d14:	a2 83       	std	Z+2, r26	; 0x02
     d16:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     d18:	fe 01       	movw	r30, r28
     d1a:	e7 5a       	subi	r30, 0xA7	; 167
     d1c:	ff 4f       	sbci	r31, 0xFF	; 255
     d1e:	60 81       	ld	r22, Z
     d20:	71 81       	ldd	r23, Z+1	; 0x01
     d22:	82 81       	ldd	r24, Z+2	; 0x02
     d24:	93 81       	ldd	r25, Z+3	; 0x03
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	40 e8       	ldi	r20, 0x80	; 128
     d2c:	5f e3       	ldi	r21, 0x3F	; 63
     d2e:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     d32:	88 23       	and	r24, r24
     d34:	34 f4       	brge	.+12     	; 0xd42 <WriteToNrf+0x32a>
		__ticks = 1;
     d36:	fe 01       	movw	r30, r28
     d38:	e8 5a       	subi	r30, 0xA8	; 168
     d3a:	ff 4f       	sbci	r31, 0xFF	; 255
     d3c:	81 e0       	ldi	r24, 0x01	; 1
     d3e:	80 83       	st	Z, r24
     d40:	e0 c0       	rjmp	.+448    	; 0xf02 <WriteToNrf+0x4ea>
	else if (__tmp > 255)
     d42:	fe 01       	movw	r30, r28
     d44:	e7 5a       	subi	r30, 0xA7	; 167
     d46:	ff 4f       	sbci	r31, 0xFF	; 255
     d48:	60 81       	ld	r22, Z
     d4a:	71 81       	ldd	r23, Z+1	; 0x01
     d4c:	82 81       	ldd	r24, Z+2	; 0x02
     d4e:	93 81       	ldd	r25, Z+3	; 0x03
     d50:	20 e0       	ldi	r18, 0x00	; 0
     d52:	30 e0       	ldi	r19, 0x00	; 0
     d54:	4f e7       	ldi	r20, 0x7F	; 127
     d56:	53 e4       	ldi	r21, 0x43	; 67
     d58:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     d5c:	18 16       	cp	r1, r24
     d5e:	0c f0       	brlt	.+2      	; 0xd62 <WriteToNrf+0x34a>
     d60:	c0 c0       	rjmp	.+384    	; 0xee2 <WriteToNrf+0x4ca>
	{
		_delay_ms(__us / 1000.0);
     d62:	fe 01       	movw	r30, r28
     d64:	e3 5a       	subi	r30, 0xA3	; 163
     d66:	ff 4f       	sbci	r31, 0xFF	; 255
     d68:	60 81       	ld	r22, Z
     d6a:	71 81       	ldd	r23, Z+1	; 0x01
     d6c:	82 81       	ldd	r24, Z+2	; 0x02
     d6e:	93 81       	ldd	r25, Z+3	; 0x03
     d70:	20 e0       	ldi	r18, 0x00	; 0
     d72:	30 e0       	ldi	r19, 0x00	; 0
     d74:	4a e7       	ldi	r20, 0x7A	; 122
     d76:	54 e4       	ldi	r21, 0x44	; 68
     d78:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
     d7c:	dc 01       	movw	r26, r24
     d7e:	cb 01       	movw	r24, r22
     d80:	fe 01       	movw	r30, r28
     d82:	ec 5a       	subi	r30, 0xAC	; 172
     d84:	ff 4f       	sbci	r31, 0xFF	; 255
     d86:	80 83       	st	Z, r24
     d88:	91 83       	std	Z+1, r25	; 0x01
     d8a:	a2 83       	std	Z+2, r26	; 0x02
     d8c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d8e:	8e 01       	movw	r16, r28
     d90:	00 5b       	subi	r16, 0xB0	; 176
     d92:	1f 4f       	sbci	r17, 0xFF	; 255
     d94:	fe 01       	movw	r30, r28
     d96:	ec 5a       	subi	r30, 0xAC	; 172
     d98:	ff 4f       	sbci	r31, 0xFF	; 255
     d9a:	60 81       	ld	r22, Z
     d9c:	71 81       	ldd	r23, Z+1	; 0x01
     d9e:	82 81       	ldd	r24, Z+2	; 0x02
     da0:	93 81       	ldd	r25, Z+3	; 0x03
     da2:	20 e0       	ldi	r18, 0x00	; 0
     da4:	30 e0       	ldi	r19, 0x00	; 0
     da6:	4a ef       	ldi	r20, 0xFA	; 250
     da8:	54 e4       	ldi	r21, 0x44	; 68
     daa:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     dae:	dc 01       	movw	r26, r24
     db0:	cb 01       	movw	r24, r22
     db2:	f8 01       	movw	r30, r16
     db4:	80 83       	st	Z, r24
     db6:	91 83       	std	Z+1, r25	; 0x01
     db8:	a2 83       	std	Z+2, r26	; 0x02
     dba:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     dbc:	fe 01       	movw	r30, r28
     dbe:	e0 5b       	subi	r30, 0xB0	; 176
     dc0:	ff 4f       	sbci	r31, 0xFF	; 255
     dc2:	60 81       	ld	r22, Z
     dc4:	71 81       	ldd	r23, Z+1	; 0x01
     dc6:	82 81       	ldd	r24, Z+2	; 0x02
     dc8:	93 81       	ldd	r25, Z+3	; 0x03
     dca:	20 e0       	ldi	r18, 0x00	; 0
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	40 e8       	ldi	r20, 0x80	; 128
     dd0:	5f e3       	ldi	r21, 0x3F	; 63
     dd2:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     dd6:	88 23       	and	r24, r24
     dd8:	44 f4       	brge	.+16     	; 0xdea <WriteToNrf+0x3d2>
		__ticks = 1;
     dda:	fe 01       	movw	r30, r28
     ddc:	e2 5b       	subi	r30, 0xB2	; 178
     dde:	ff 4f       	sbci	r31, 0xFF	; 255
     de0:	81 e0       	ldi	r24, 0x01	; 1
     de2:	90 e0       	ldi	r25, 0x00	; 0
     de4:	91 83       	std	Z+1, r25	; 0x01
     de6:	80 83       	st	Z, r24
     de8:	64 c0       	rjmp	.+200    	; 0xeb2 <WriteToNrf+0x49a>
	else if (__tmp > 65535)
     dea:	fe 01       	movw	r30, r28
     dec:	e0 5b       	subi	r30, 0xB0	; 176
     dee:	ff 4f       	sbci	r31, 0xFF	; 255
     df0:	60 81       	ld	r22, Z
     df2:	71 81       	ldd	r23, Z+1	; 0x01
     df4:	82 81       	ldd	r24, Z+2	; 0x02
     df6:	93 81       	ldd	r25, Z+3	; 0x03
     df8:	20 e0       	ldi	r18, 0x00	; 0
     dfa:	3f ef       	ldi	r19, 0xFF	; 255
     dfc:	4f e7       	ldi	r20, 0x7F	; 127
     dfe:	57 e4       	ldi	r21, 0x47	; 71
     e00:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     e04:	18 16       	cp	r1, r24
     e06:	0c f0       	brlt	.+2      	; 0xe0a <WriteToNrf+0x3f2>
     e08:	43 c0       	rjmp	.+134    	; 0xe90 <WriteToNrf+0x478>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     e0a:	fe 01       	movw	r30, r28
     e0c:	ec 5a       	subi	r30, 0xAC	; 172
     e0e:	ff 4f       	sbci	r31, 0xFF	; 255
     e10:	60 81       	ld	r22, Z
     e12:	71 81       	ldd	r23, Z+1	; 0x01
     e14:	82 81       	ldd	r24, Z+2	; 0x02
     e16:	93 81       	ldd	r25, Z+3	; 0x03
     e18:	20 e0       	ldi	r18, 0x00	; 0
     e1a:	30 e0       	ldi	r19, 0x00	; 0
     e1c:	40 e2       	ldi	r20, 0x20	; 32
     e1e:	51 e4       	ldi	r21, 0x41	; 65
     e20:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     e24:	dc 01       	movw	r26, r24
     e26:	cb 01       	movw	r24, r22
     e28:	8e 01       	movw	r16, r28
     e2a:	02 5b       	subi	r16, 0xB2	; 178
     e2c:	1f 4f       	sbci	r17, 0xFF	; 255
     e2e:	bc 01       	movw	r22, r24
     e30:	cd 01       	movw	r24, r26
     e32:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     e36:	dc 01       	movw	r26, r24
     e38:	cb 01       	movw	r24, r22
     e3a:	f8 01       	movw	r30, r16
     e3c:	91 83       	std	Z+1, r25	; 0x01
     e3e:	80 83       	st	Z, r24
     e40:	1f c0       	rjmp	.+62     	; 0xe80 <WriteToNrf+0x468>
     e42:	fe 01       	movw	r30, r28
     e44:	e4 5b       	subi	r30, 0xB4	; 180
     e46:	ff 4f       	sbci	r31, 0xFF	; 255
     e48:	88 ec       	ldi	r24, 0xC8	; 200
     e4a:	90 e0       	ldi	r25, 0x00	; 0
     e4c:	91 83       	std	Z+1, r25	; 0x01
     e4e:	80 83       	st	Z, r24
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     e50:	fe 01       	movw	r30, r28
     e52:	e4 5b       	subi	r30, 0xB4	; 180
     e54:	ff 4f       	sbci	r31, 0xFF	; 255
     e56:	80 81       	ld	r24, Z
     e58:	91 81       	ldd	r25, Z+1	; 0x01
     e5a:	01 97       	sbiw	r24, 0x01	; 1
     e5c:	f1 f7       	brne	.-4      	; 0xe5a <WriteToNrf+0x442>
     e5e:	fe 01       	movw	r30, r28
     e60:	e4 5b       	subi	r30, 0xB4	; 180
     e62:	ff 4f       	sbci	r31, 0xFF	; 255
     e64:	91 83       	std	Z+1, r25	; 0x01
     e66:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     e68:	de 01       	movw	r26, r28
     e6a:	a2 5b       	subi	r26, 0xB2	; 178
     e6c:	bf 4f       	sbci	r27, 0xFF	; 255
     e6e:	fe 01       	movw	r30, r28
     e70:	e2 5b       	subi	r30, 0xB2	; 178
     e72:	ff 4f       	sbci	r31, 0xFF	; 255
     e74:	80 81       	ld	r24, Z
     e76:	91 81       	ldd	r25, Z+1	; 0x01
     e78:	01 97       	sbiw	r24, 0x01	; 1
     e7a:	11 96       	adiw	r26, 0x01	; 1
     e7c:	9c 93       	st	X, r25
     e7e:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     e80:	fe 01       	movw	r30, r28
     e82:	e2 5b       	subi	r30, 0xB2	; 178
     e84:	ff 4f       	sbci	r31, 0xFF	; 255
     e86:	80 81       	ld	r24, Z
     e88:	91 81       	ldd	r25, Z+1	; 0x01
     e8a:	00 97       	sbiw	r24, 0x00	; 0
     e8c:	d1 f6       	brne	.-76     	; 0xe42 <WriteToNrf+0x42a>
     e8e:	4b c0       	rjmp	.+150    	; 0xf26 <WriteToNrf+0x50e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     e90:	8e 01       	movw	r16, r28
     e92:	02 5b       	subi	r16, 0xB2	; 178
     e94:	1f 4f       	sbci	r17, 0xFF	; 255
     e96:	fe 01       	movw	r30, r28
     e98:	e0 5b       	subi	r30, 0xB0	; 176
     e9a:	ff 4f       	sbci	r31, 0xFF	; 255
     e9c:	60 81       	ld	r22, Z
     e9e:	71 81       	ldd	r23, Z+1	; 0x01
     ea0:	82 81       	ldd	r24, Z+2	; 0x02
     ea2:	93 81       	ldd	r25, Z+3	; 0x03
     ea4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     ea8:	dc 01       	movw	r26, r24
     eaa:	cb 01       	movw	r24, r22
     eac:	f8 01       	movw	r30, r16
     eae:	91 83       	std	Z+1, r25	; 0x01
     eb0:	80 83       	st	Z, r24
     eb2:	de 01       	movw	r26, r28
     eb4:	a6 5b       	subi	r26, 0xB6	; 182
     eb6:	bf 4f       	sbci	r27, 0xFF	; 255
     eb8:	fe 01       	movw	r30, r28
     eba:	e2 5b       	subi	r30, 0xB2	; 178
     ebc:	ff 4f       	sbci	r31, 0xFF	; 255
     ebe:	80 81       	ld	r24, Z
     ec0:	91 81       	ldd	r25, Z+1	; 0x01
     ec2:	11 96       	adiw	r26, 0x01	; 1
     ec4:	9c 93       	st	X, r25
     ec6:	8e 93       	st	-X, r24
     ec8:	fe 01       	movw	r30, r28
     eca:	e6 5b       	subi	r30, 0xB6	; 182
     ecc:	ff 4f       	sbci	r31, 0xFF	; 255
     ece:	80 81       	ld	r24, Z
     ed0:	91 81       	ldd	r25, Z+1	; 0x01
     ed2:	01 97       	sbiw	r24, 0x01	; 1
     ed4:	f1 f7       	brne	.-4      	; 0xed2 <WriteToNrf+0x4ba>
     ed6:	fe 01       	movw	r30, r28
     ed8:	e6 5b       	subi	r30, 0xB6	; 182
     eda:	ff 4f       	sbci	r31, 0xFF	; 255
     edc:	91 83       	std	Z+1, r25	; 0x01
     ede:	80 83       	st	Z, r24
     ee0:	22 c0       	rjmp	.+68     	; 0xf26 <WriteToNrf+0x50e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     ee2:	8e 01       	movw	r16, r28
     ee4:	08 5a       	subi	r16, 0xA8	; 168
     ee6:	1f 4f       	sbci	r17, 0xFF	; 255
     ee8:	fe 01       	movw	r30, r28
     eea:	e7 5a       	subi	r30, 0xA7	; 167
     eec:	ff 4f       	sbci	r31, 0xFF	; 255
     eee:	60 81       	ld	r22, Z
     ef0:	71 81       	ldd	r23, Z+1	; 0x01
     ef2:	82 81       	ldd	r24, Z+2	; 0x02
     ef4:	93 81       	ldd	r25, Z+3	; 0x03
     ef6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
     efa:	dc 01       	movw	r26, r24
     efc:	cb 01       	movw	r24, r22
     efe:	f8 01       	movw	r30, r16
     f00:	80 83       	st	Z, r24
     f02:	de 01       	movw	r26, r28
     f04:	a7 5b       	subi	r26, 0xB7	; 183
     f06:	bf 4f       	sbci	r27, 0xFF	; 255
     f08:	fe 01       	movw	r30, r28
     f0a:	e8 5a       	subi	r30, 0xA8	; 168
     f0c:	ff 4f       	sbci	r31, 0xFF	; 255
     f0e:	80 81       	ld	r24, Z
     f10:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f12:	fe 01       	movw	r30, r28
     f14:	e7 5b       	subi	r30, 0xB7	; 183
     f16:	ff 4f       	sbci	r31, 0xFF	; 255
     f18:	80 81       	ld	r24, Z
     f1a:	8a 95       	dec	r24
     f1c:	f1 f7       	brne	.-4      	; 0xf1a <WriteToNrf+0x502>
     f1e:	fe 01       	movw	r30, r28
     f20:	e7 5b       	subi	r30, 0xB7	; 183
     f22:	ff 4f       	sbci	r31, 0xFF	; 255
     f24:	80 83       	st	Z, r24

    _delay_us(10);
    WriteByteSPI(reg);	//fÃ¶rsta SPI-kommandot efter CSN-lÃ¥g berÃ¤ttar fÃ¶r nrf'en vilket av dess register som ska redigeras ex: 0b0010 0001 write to registry EN_AA
     f26:	fe 01       	movw	r30, r28
     f28:	e4 58       	subi	r30, 0x84	; 132
     f2a:	ff 4f       	sbci	r31, 0xFF	; 255
     f2c:	80 81       	ld	r24, Z
     f2e:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <WriteByteSPI>
     f32:	fe 01       	movw	r30, r28
     f34:	eb 5b       	subi	r30, 0xBB	; 187
     f36:	ff 4f       	sbci	r31, 0xFF	; 255
     f38:	80 e0       	ldi	r24, 0x00	; 0
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	a0 e2       	ldi	r26, 0x20	; 32
     f3e:	b1 e4       	ldi	r27, 0x41	; 65
     f40:	80 83       	st	Z, r24
     f42:	91 83       	std	Z+1, r25	; 0x01
     f44:	a2 83       	std	Z+2, r26	; 0x02
     f46:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     f48:	8e 01       	movw	r16, r28
     f4a:	0f 5b       	subi	r16, 0xBF	; 191
     f4c:	1f 4f       	sbci	r17, 0xFF	; 255
     f4e:	fe 01       	movw	r30, r28
     f50:	eb 5b       	subi	r30, 0xBB	; 187
     f52:	ff 4f       	sbci	r31, 0xFF	; 255
     f54:	60 81       	ld	r22, Z
     f56:	71 81       	ldd	r23, Z+1	; 0x01
     f58:	82 81       	ldd	r24, Z+2	; 0x02
     f5a:	93 81       	ldd	r25, Z+3	; 0x03
     f5c:	2b ea       	ldi	r18, 0xAB	; 171
     f5e:	3a ea       	ldi	r19, 0xAA	; 170
     f60:	4a e2       	ldi	r20, 0x2A	; 42
     f62:	50 e4       	ldi	r21, 0x40	; 64
     f64:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     f68:	dc 01       	movw	r26, r24
     f6a:	cb 01       	movw	r24, r22
     f6c:	f8 01       	movw	r30, r16
     f6e:	80 83       	st	Z, r24
     f70:	91 83       	std	Z+1, r25	; 0x01
     f72:	a2 83       	std	Z+2, r26	; 0x02
     f74:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
     f76:	fe 01       	movw	r30, r28
     f78:	ef 5b       	subi	r30, 0xBF	; 191
     f7a:	ff 4f       	sbci	r31, 0xFF	; 255
     f7c:	60 81       	ld	r22, Z
     f7e:	71 81       	ldd	r23, Z+1	; 0x01
     f80:	82 81       	ldd	r24, Z+2	; 0x02
     f82:	93 81       	ldd	r25, Z+3	; 0x03
     f84:	20 e0       	ldi	r18, 0x00	; 0
     f86:	30 e0       	ldi	r19, 0x00	; 0
     f88:	40 e8       	ldi	r20, 0x80	; 128
     f8a:	5f e3       	ldi	r21, 0x3F	; 63
     f8c:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
     f90:	88 23       	and	r24, r24
     f92:	34 f4       	brge	.+12     	; 0xfa0 <WriteToNrf+0x588>
		__ticks = 1;
     f94:	81 e0       	ldi	r24, 0x01	; 1
     f96:	fe 01       	movw	r30, r28
     f98:	e0 5c       	subi	r30, 0xC0	; 192
     f9a:	ff 4f       	sbci	r31, 0xFF	; 255
     f9c:	80 83       	st	Z, r24
     f9e:	9d c0       	rjmp	.+314    	; 0x10da <WriteToNrf+0x6c2>
	else if (__tmp > 255)
     fa0:	fe 01       	movw	r30, r28
     fa2:	ef 5b       	subi	r30, 0xBF	; 191
     fa4:	ff 4f       	sbci	r31, 0xFF	; 255
     fa6:	60 81       	ld	r22, Z
     fa8:	71 81       	ldd	r23, Z+1	; 0x01
     faa:	82 81       	ldd	r24, Z+2	; 0x02
     fac:	93 81       	ldd	r25, Z+3	; 0x03
     fae:	20 e0       	ldi	r18, 0x00	; 0
     fb0:	30 e0       	ldi	r19, 0x00	; 0
     fb2:	4f e7       	ldi	r20, 0x7F	; 127
     fb4:	53 e4       	ldi	r21, 0x43	; 67
     fb6:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
     fba:	18 16       	cp	r1, r24
     fbc:	0c f0       	brlt	.+2      	; 0xfc0 <WriteToNrf+0x5a8>
     fbe:	7e c0       	rjmp	.+252    	; 0x10bc <WriteToNrf+0x6a4>
	{
		_delay_ms(__us / 1000.0);
     fc0:	fe 01       	movw	r30, r28
     fc2:	eb 5b       	subi	r30, 0xBB	; 187
     fc4:	ff 4f       	sbci	r31, 0xFF	; 255
     fc6:	60 81       	ld	r22, Z
     fc8:	71 81       	ldd	r23, Z+1	; 0x01
     fca:	82 81       	ldd	r24, Z+2	; 0x02
     fcc:	93 81       	ldd	r25, Z+3	; 0x03
     fce:	20 e0       	ldi	r18, 0x00	; 0
     fd0:	30 e0       	ldi	r19, 0x00	; 0
     fd2:	4a e7       	ldi	r20, 0x7A	; 122
     fd4:	54 e4       	ldi	r21, 0x44	; 68
     fd6:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
     fda:	dc 01       	movw	r26, r24
     fdc:	cb 01       	movw	r24, r22
     fde:	8c af       	std	Y+60, r24	; 0x3c
     fe0:	9d af       	std	Y+61, r25	; 0x3d
     fe2:	ae af       	std	Y+62, r26	; 0x3e
     fe4:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     fe6:	6c ad       	ldd	r22, Y+60	; 0x3c
     fe8:	7d ad       	ldd	r23, Y+61	; 0x3d
     fea:	8e ad       	ldd	r24, Y+62	; 0x3e
     fec:	9f ad       	ldd	r25, Y+63	; 0x3f
     fee:	20 e0       	ldi	r18, 0x00	; 0
     ff0:	30 e0       	ldi	r19, 0x00	; 0
     ff2:	4a ef       	ldi	r20, 0xFA	; 250
     ff4:	54 e4       	ldi	r21, 0x44	; 68
     ff6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
     ffa:	dc 01       	movw	r26, r24
     ffc:	cb 01       	movw	r24, r22
     ffe:	88 af       	std	Y+56, r24	; 0x38
    1000:	99 af       	std	Y+57, r25	; 0x39
    1002:	aa af       	std	Y+58, r26	; 0x3a
    1004:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1006:	68 ad       	ldd	r22, Y+56	; 0x38
    1008:	79 ad       	ldd	r23, Y+57	; 0x39
    100a:	8a ad       	ldd	r24, Y+58	; 0x3a
    100c:	9b ad       	ldd	r25, Y+59	; 0x3b
    100e:	20 e0       	ldi	r18, 0x00	; 0
    1010:	30 e0       	ldi	r19, 0x00	; 0
    1012:	40 e8       	ldi	r20, 0x80	; 128
    1014:	5f e3       	ldi	r21, 0x3F	; 63
    1016:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    101a:	88 23       	and	r24, r24
    101c:	2c f4       	brge	.+10     	; 0x1028 <WriteToNrf+0x610>
		__ticks = 1;
    101e:	81 e0       	ldi	r24, 0x01	; 1
    1020:	90 e0       	ldi	r25, 0x00	; 0
    1022:	9f ab       	std	Y+55, r25	; 0x37
    1024:	8e ab       	std	Y+54, r24	; 0x36
    1026:	3f c0       	rjmp	.+126    	; 0x10a6 <WriteToNrf+0x68e>
	else if (__tmp > 65535)
    1028:	68 ad       	ldd	r22, Y+56	; 0x38
    102a:	79 ad       	ldd	r23, Y+57	; 0x39
    102c:	8a ad       	ldd	r24, Y+58	; 0x3a
    102e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1030:	20 e0       	ldi	r18, 0x00	; 0
    1032:	3f ef       	ldi	r19, 0xFF	; 255
    1034:	4f e7       	ldi	r20, 0x7F	; 127
    1036:	57 e4       	ldi	r21, 0x47	; 71
    1038:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    103c:	18 16       	cp	r1, r24
    103e:	4c f5       	brge	.+82     	; 0x1092 <WriteToNrf+0x67a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1040:	6c ad       	ldd	r22, Y+60	; 0x3c
    1042:	7d ad       	ldd	r23, Y+61	; 0x3d
    1044:	8e ad       	ldd	r24, Y+62	; 0x3e
    1046:	9f ad       	ldd	r25, Y+63	; 0x3f
    1048:	20 e0       	ldi	r18, 0x00	; 0
    104a:	30 e0       	ldi	r19, 0x00	; 0
    104c:	40 e2       	ldi	r20, 0x20	; 32
    104e:	51 e4       	ldi	r21, 0x41	; 65
    1050:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1054:	dc 01       	movw	r26, r24
    1056:	cb 01       	movw	r24, r22
    1058:	bc 01       	movw	r22, r24
    105a:	cd 01       	movw	r24, r26
    105c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1060:	dc 01       	movw	r26, r24
    1062:	cb 01       	movw	r24, r22
    1064:	9f ab       	std	Y+55, r25	; 0x37
    1066:	8e ab       	std	Y+54, r24	; 0x36
    1068:	0f c0       	rjmp	.+30     	; 0x1088 <WriteToNrf+0x670>
    106a:	88 ec       	ldi	r24, 0xC8	; 200
    106c:	90 e0       	ldi	r25, 0x00	; 0
    106e:	9d ab       	std	Y+53, r25	; 0x35
    1070:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1072:	8c a9       	ldd	r24, Y+52	; 0x34
    1074:	9d a9       	ldd	r25, Y+53	; 0x35
    1076:	01 97       	sbiw	r24, 0x01	; 1
    1078:	f1 f7       	brne	.-4      	; 0x1076 <WriteToNrf+0x65e>
    107a:	9d ab       	std	Y+53, r25	; 0x35
    107c:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    107e:	8e a9       	ldd	r24, Y+54	; 0x36
    1080:	9f a9       	ldd	r25, Y+55	; 0x37
    1082:	01 97       	sbiw	r24, 0x01	; 1
    1084:	9f ab       	std	Y+55, r25	; 0x37
    1086:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1088:	8e a9       	ldd	r24, Y+54	; 0x36
    108a:	9f a9       	ldd	r25, Y+55	; 0x37
    108c:	00 97       	sbiw	r24, 0x00	; 0
    108e:	69 f7       	brne	.-38     	; 0x106a <WriteToNrf+0x652>
    1090:	2d c0       	rjmp	.+90     	; 0x10ec <WriteToNrf+0x6d4>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1092:	68 ad       	ldd	r22, Y+56	; 0x38
    1094:	79 ad       	ldd	r23, Y+57	; 0x39
    1096:	8a ad       	ldd	r24, Y+58	; 0x3a
    1098:	9b ad       	ldd	r25, Y+59	; 0x3b
    109a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    109e:	dc 01       	movw	r26, r24
    10a0:	cb 01       	movw	r24, r22
    10a2:	9f ab       	std	Y+55, r25	; 0x37
    10a4:	8e ab       	std	Y+54, r24	; 0x36
    10a6:	8e a9       	ldd	r24, Y+54	; 0x36
    10a8:	9f a9       	ldd	r25, Y+55	; 0x37
    10aa:	9b ab       	std	Y+51, r25	; 0x33
    10ac:	8a ab       	std	Y+50, r24	; 0x32
    10ae:	8a a9       	ldd	r24, Y+50	; 0x32
    10b0:	9b a9       	ldd	r25, Y+51	; 0x33
    10b2:	01 97       	sbiw	r24, 0x01	; 1
    10b4:	f1 f7       	brne	.-4      	; 0x10b2 <WriteToNrf+0x69a>
    10b6:	9b ab       	std	Y+51, r25	; 0x33
    10b8:	8a ab       	std	Y+50, r24	; 0x32
    10ba:	18 c0       	rjmp	.+48     	; 0x10ec <WriteToNrf+0x6d4>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    10bc:	fe 01       	movw	r30, r28
    10be:	ef 5b       	subi	r30, 0xBF	; 191
    10c0:	ff 4f       	sbci	r31, 0xFF	; 255
    10c2:	60 81       	ld	r22, Z
    10c4:	71 81       	ldd	r23, Z+1	; 0x01
    10c6:	82 81       	ldd	r24, Z+2	; 0x02
    10c8:	93 81       	ldd	r25, Z+3	; 0x03
    10ca:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    10ce:	dc 01       	movw	r26, r24
    10d0:	cb 01       	movw	r24, r22
    10d2:	fe 01       	movw	r30, r28
    10d4:	e0 5c       	subi	r30, 0xC0	; 192
    10d6:	ff 4f       	sbci	r31, 0xFF	; 255
    10d8:	80 83       	st	Z, r24
    10da:	fe 01       	movw	r30, r28
    10dc:	e0 5c       	subi	r30, 0xC0	; 192
    10de:	ff 4f       	sbci	r31, 0xFF	; 255
    10e0:	80 81       	ld	r24, Z
    10e2:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    10e4:	89 a9       	ldd	r24, Y+49	; 0x31
    10e6:	8a 95       	dec	r24
    10e8:	f1 f7       	brne	.-4      	; 0x10e6 <WriteToNrf+0x6ce>
    10ea:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(10);

    int i;
    for(i=0; i<antVal; i++)
    10ec:	fe 01       	movw	r30, r28
    10ee:	e7 58       	subi	r30, 0x87	; 135
    10f0:	ff 4f       	sbci	r31, 0xFF	; 255
    10f2:	11 82       	std	Z+1, r1	; 0x01
    10f4:	10 82       	st	Z, r1
    10f6:	b3 c1       	rjmp	.+870    	; 0x145e <WriteToNrf+0xa46>
    {
        if (ReadWrite == 'R' && reg != W_TX_PAYLOAD)
    10f8:	fe 01       	movw	r30, r28
    10fa:	e5 58       	subi	r30, 0x85	; 133
    10fc:	ff 4f       	sbci	r31, 0xFF	; 255
    10fe:	80 81       	ld	r24, Z
    1100:	82 35       	cpi	r24, 0x52	; 82
    1102:	09 f0       	breq	.+2      	; 0x1106 <WriteToNrf+0x6ee>
    1104:	d2 c0       	rjmp	.+420    	; 0x12aa <WriteToNrf+0x892>
    1106:	fe 01       	movw	r30, r28
    1108:	e4 58       	subi	r30, 0x84	; 132
    110a:	ff 4f       	sbci	r31, 0xFF	; 255
    110c:	80 81       	ld	r24, Z
    110e:	80 3a       	cpi	r24, 0xA0	; 160
    1110:	09 f4       	brne	.+2      	; 0x1114 <WriteToNrf+0x6fc>
    1112:	cb c0       	rjmp	.+406    	; 0x12aa <WriteToNrf+0x892>
        {
            ret[i]=WriteByteSPI(NOP);	//Andra och resten av SPI kommandot sÃ¤ger Ã¥t nrfen vilka vÃ¤rden som i det hÃ¤r fallet ska lÃ¤sas
    1114:	fe 01       	movw	r30, r28
    1116:	e7 58       	subi	r30, 0x87	; 135
    1118:	ff 4f       	sbci	r31, 0xFF	; 255
    111a:	00 81       	ld	r16, Z
    111c:	11 81       	ldd	r17, Z+1	; 0x01
    111e:	8f ef       	ldi	r24, 0xFF	; 255
    1120:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <WriteByteSPI>
    1124:	f8 01       	movw	r30, r16
    1126:	e8 5f       	subi	r30, 0xF8	; 248
    1128:	fe 4f       	sbci	r31, 0xFE	; 254
    112a:	80 83       	st	Z, r24
    112c:	80 e0       	ldi	r24, 0x00	; 0
    112e:	90 e0       	ldi	r25, 0x00	; 0
    1130:	a0 e2       	ldi	r26, 0x20	; 32
    1132:	b1 e4       	ldi	r27, 0x41	; 65
    1134:	8d a7       	std	Y+45, r24	; 0x2d
    1136:	9e a7       	std	Y+46, r25	; 0x2e
    1138:	af a7       	std	Y+47, r26	; 0x2f
    113a:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    113c:	6d a5       	ldd	r22, Y+45	; 0x2d
    113e:	7e a5       	ldd	r23, Y+46	; 0x2e
    1140:	8f a5       	ldd	r24, Y+47	; 0x2f
    1142:	98 a9       	ldd	r25, Y+48	; 0x30
    1144:	2b ea       	ldi	r18, 0xAB	; 171
    1146:	3a ea       	ldi	r19, 0xAA	; 170
    1148:	4a e2       	ldi	r20, 0x2A	; 42
    114a:	50 e4       	ldi	r21, 0x40	; 64
    114c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	89 a7       	std	Y+41, r24	; 0x29
    1156:	9a a7       	std	Y+42, r25	; 0x2a
    1158:	ab a7       	std	Y+43, r26	; 0x2b
    115a:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    115c:	69 a5       	ldd	r22, Y+41	; 0x29
    115e:	7a a5       	ldd	r23, Y+42	; 0x2a
    1160:	8b a5       	ldd	r24, Y+43	; 0x2b
    1162:	9c a5       	ldd	r25, Y+44	; 0x2c
    1164:	20 e0       	ldi	r18, 0x00	; 0
    1166:	30 e0       	ldi	r19, 0x00	; 0
    1168:	40 e8       	ldi	r20, 0x80	; 128
    116a:	5f e3       	ldi	r21, 0x3F	; 63
    116c:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1170:	88 23       	and	r24, r24
    1172:	1c f4       	brge	.+6      	; 0x117a <WriteToNrf+0x762>
		__ticks = 1;
    1174:	81 e0       	ldi	r24, 0x01	; 1
    1176:	88 a7       	std	Y+40, r24	; 0x28
    1178:	91 c0       	rjmp	.+290    	; 0x129c <WriteToNrf+0x884>
	else if (__tmp > 255)
    117a:	69 a5       	ldd	r22, Y+41	; 0x29
    117c:	7a a5       	ldd	r23, Y+42	; 0x2a
    117e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1180:	9c a5       	ldd	r25, Y+44	; 0x2c
    1182:	20 e0       	ldi	r18, 0x00	; 0
    1184:	30 e0       	ldi	r19, 0x00	; 0
    1186:	4f e7       	ldi	r20, 0x7F	; 127
    1188:	53 e4       	ldi	r21, 0x43	; 67
    118a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    118e:	18 16       	cp	r1, r24
    1190:	0c f0       	brlt	.+2      	; 0x1194 <WriteToNrf+0x77c>
    1192:	7b c0       	rjmp	.+246    	; 0x128a <WriteToNrf+0x872>
	{
		_delay_ms(__us / 1000.0);
    1194:	6d a5       	ldd	r22, Y+45	; 0x2d
    1196:	7e a5       	ldd	r23, Y+46	; 0x2e
    1198:	8f a5       	ldd	r24, Y+47	; 0x2f
    119a:	98 a9       	ldd	r25, Y+48	; 0x30
    119c:	20 e0       	ldi	r18, 0x00	; 0
    119e:	30 e0       	ldi	r19, 0x00	; 0
    11a0:	4a e7       	ldi	r20, 0x7A	; 122
    11a2:	54 e4       	ldi	r21, 0x44	; 68
    11a4:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
    11a8:	dc 01       	movw	r26, r24
    11aa:	cb 01       	movw	r24, r22
    11ac:	8c a3       	std	Y+36, r24	; 0x24
    11ae:	9d a3       	std	Y+37, r25	; 0x25
    11b0:	ae a3       	std	Y+38, r26	; 0x26
    11b2:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    11b4:	6c a1       	ldd	r22, Y+36	; 0x24
    11b6:	7d a1       	ldd	r23, Y+37	; 0x25
    11b8:	8e a1       	ldd	r24, Y+38	; 0x26
    11ba:	9f a1       	ldd	r25, Y+39	; 0x27
    11bc:	20 e0       	ldi	r18, 0x00	; 0
    11be:	30 e0       	ldi	r19, 0x00	; 0
    11c0:	4a ef       	ldi	r20, 0xFA	; 250
    11c2:	54 e4       	ldi	r21, 0x44	; 68
    11c4:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    11c8:	dc 01       	movw	r26, r24
    11ca:	cb 01       	movw	r24, r22
    11cc:	88 a3       	std	Y+32, r24	; 0x20
    11ce:	99 a3       	std	Y+33, r25	; 0x21
    11d0:	aa a3       	std	Y+34, r26	; 0x22
    11d2:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    11d4:	68 a1       	ldd	r22, Y+32	; 0x20
    11d6:	79 a1       	ldd	r23, Y+33	; 0x21
    11d8:	8a a1       	ldd	r24, Y+34	; 0x22
    11da:	9b a1       	ldd	r25, Y+35	; 0x23
    11dc:	20 e0       	ldi	r18, 0x00	; 0
    11de:	30 e0       	ldi	r19, 0x00	; 0
    11e0:	40 e8       	ldi	r20, 0x80	; 128
    11e2:	5f e3       	ldi	r21, 0x3F	; 63
    11e4:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    11e8:	88 23       	and	r24, r24
    11ea:	2c f4       	brge	.+10     	; 0x11f6 <WriteToNrf+0x7de>
		__ticks = 1;
    11ec:	81 e0       	ldi	r24, 0x01	; 1
    11ee:	90 e0       	ldi	r25, 0x00	; 0
    11f0:	9f 8f       	std	Y+31, r25	; 0x1f
    11f2:	8e 8f       	std	Y+30, r24	; 0x1e
    11f4:	3f c0       	rjmp	.+126    	; 0x1274 <WriteToNrf+0x85c>
	else if (__tmp > 65535)
    11f6:	68 a1       	ldd	r22, Y+32	; 0x20
    11f8:	79 a1       	ldd	r23, Y+33	; 0x21
    11fa:	8a a1       	ldd	r24, Y+34	; 0x22
    11fc:	9b a1       	ldd	r25, Y+35	; 0x23
    11fe:	20 e0       	ldi	r18, 0x00	; 0
    1200:	3f ef       	ldi	r19, 0xFF	; 255
    1202:	4f e7       	ldi	r20, 0x7F	; 127
    1204:	57 e4       	ldi	r21, 0x47	; 71
    1206:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    120a:	18 16       	cp	r1, r24
    120c:	4c f5       	brge	.+82     	; 0x1260 <WriteToNrf+0x848>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    120e:	6c a1       	ldd	r22, Y+36	; 0x24
    1210:	7d a1       	ldd	r23, Y+37	; 0x25
    1212:	8e a1       	ldd	r24, Y+38	; 0x26
    1214:	9f a1       	ldd	r25, Y+39	; 0x27
    1216:	20 e0       	ldi	r18, 0x00	; 0
    1218:	30 e0       	ldi	r19, 0x00	; 0
    121a:	40 e2       	ldi	r20, 0x20	; 32
    121c:	51 e4       	ldi	r21, 0x41	; 65
    121e:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1222:	dc 01       	movw	r26, r24
    1224:	cb 01       	movw	r24, r22
    1226:	bc 01       	movw	r22, r24
    1228:	cd 01       	movw	r24, r26
    122a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    122e:	dc 01       	movw	r26, r24
    1230:	cb 01       	movw	r24, r22
    1232:	9f 8f       	std	Y+31, r25	; 0x1f
    1234:	8e 8f       	std	Y+30, r24	; 0x1e
    1236:	0f c0       	rjmp	.+30     	; 0x1256 <WriteToNrf+0x83e>
    1238:	88 ec       	ldi	r24, 0xC8	; 200
    123a:	90 e0       	ldi	r25, 0x00	; 0
    123c:	9d 8f       	std	Y+29, r25	; 0x1d
    123e:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1240:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1242:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1244:	01 97       	sbiw	r24, 0x01	; 1
    1246:	f1 f7       	brne	.-4      	; 0x1244 <WriteToNrf+0x82c>
    1248:	9d 8f       	std	Y+29, r25	; 0x1d
    124a:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    124c:	8e 8d       	ldd	r24, Y+30	; 0x1e
    124e:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1250:	01 97       	sbiw	r24, 0x01	; 1
    1252:	9f 8f       	std	Y+31, r25	; 0x1f
    1254:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1256:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1258:	9f 8d       	ldd	r25, Y+31	; 0x1f
    125a:	00 97       	sbiw	r24, 0x00	; 0
    125c:	69 f7       	brne	.-38     	; 0x1238 <WriteToNrf+0x820>
    125e:	f3 c0       	rjmp	.+486    	; 0x1446 <WriteToNrf+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1260:	68 a1       	ldd	r22, Y+32	; 0x20
    1262:	79 a1       	ldd	r23, Y+33	; 0x21
    1264:	8a a1       	ldd	r24, Y+34	; 0x22
    1266:	9b a1       	ldd	r25, Y+35	; 0x23
    1268:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    126c:	dc 01       	movw	r26, r24
    126e:	cb 01       	movw	r24, r22
    1270:	9f 8f       	std	Y+31, r25	; 0x1f
    1272:	8e 8f       	std	Y+30, r24	; 0x1e
    1274:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1276:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1278:	9b 8f       	std	Y+27, r25	; 0x1b
    127a:	8a 8f       	std	Y+26, r24	; 0x1a
    127c:	8a 8d       	ldd	r24, Y+26	; 0x1a
    127e:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1280:	01 97       	sbiw	r24, 0x01	; 1
    1282:	f1 f7       	brne	.-4      	; 0x1280 <WriteToNrf+0x868>
    1284:	9b 8f       	std	Y+27, r25	; 0x1b
    1286:	8a 8f       	std	Y+26, r24	; 0x1a
    1288:	de c0       	rjmp	.+444    	; 0x1446 <WriteToNrf+0xa2e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    128a:	69 a5       	ldd	r22, Y+41	; 0x29
    128c:	7a a5       	ldd	r23, Y+42	; 0x2a
    128e:	8b a5       	ldd	r24, Y+43	; 0x2b
    1290:	9c a5       	ldd	r25, Y+44	; 0x2c
    1292:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1296:	dc 01       	movw	r26, r24
    1298:	cb 01       	movw	r24, r22
    129a:	88 a7       	std	Y+40, r24	; 0x28
    129c:	88 a5       	ldd	r24, Y+40	; 0x28
    129e:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    12a0:	89 8d       	ldd	r24, Y+25	; 0x19
    12a2:	8a 95       	dec	r24
    12a4:	f1 f7       	brne	.-4      	; 0x12a2 <WriteToNrf+0x88a>
    12a6:	89 8f       	std	Y+25, r24	; 0x19
    12a8:	ce c0       	rjmp	.+412    	; 0x1446 <WriteToNrf+0xa2e>
            _delay_us(10);
        }
        else
        {
            WriteByteSPI(val[i]);	//Andra och resten av SPI kommandot sÃ¤ger Ã¥t nrfen vilka vÃ¤rden som i det hÃ¤r fallet ska skrivas till
    12aa:	fe 01       	movw	r30, r28
    12ac:	e7 58       	subi	r30, 0x87	; 135
    12ae:	ff 4f       	sbci	r31, 0xFF	; 255
    12b0:	20 81       	ld	r18, Z
    12b2:	31 81       	ldd	r19, Z+1	; 0x01
    12b4:	fe 01       	movw	r30, r28
    12b6:	e3 58       	subi	r30, 0x83	; 131
    12b8:	ff 4f       	sbci	r31, 0xFF	; 255
    12ba:	80 81       	ld	r24, Z
    12bc:	91 81       	ldd	r25, Z+1	; 0x01
    12be:	fc 01       	movw	r30, r24
    12c0:	e2 0f       	add	r30, r18
    12c2:	f3 1f       	adc	r31, r19
    12c4:	80 81       	ld	r24, Z
    12c6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <WriteByteSPI>
    12ca:	80 e0       	ldi	r24, 0x00	; 0
    12cc:	90 e0       	ldi	r25, 0x00	; 0
    12ce:	a0 e2       	ldi	r26, 0x20	; 32
    12d0:	b1 e4       	ldi	r27, 0x41	; 65
    12d2:	8d 8b       	std	Y+21, r24	; 0x15
    12d4:	9e 8b       	std	Y+22, r25	; 0x16
    12d6:	af 8b       	std	Y+23, r26	; 0x17
    12d8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    12da:	6d 89       	ldd	r22, Y+21	; 0x15
    12dc:	7e 89       	ldd	r23, Y+22	; 0x16
    12de:	8f 89       	ldd	r24, Y+23	; 0x17
    12e0:	98 8d       	ldd	r25, Y+24	; 0x18
    12e2:	2b ea       	ldi	r18, 0xAB	; 171
    12e4:	3a ea       	ldi	r19, 0xAA	; 170
    12e6:	4a e2       	ldi	r20, 0x2A	; 42
    12e8:	50 e4       	ldi	r21, 0x40	; 64
    12ea:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    12ee:	dc 01       	movw	r26, r24
    12f0:	cb 01       	movw	r24, r22
    12f2:	89 8b       	std	Y+17, r24	; 0x11
    12f4:	9a 8b       	std	Y+18, r25	; 0x12
    12f6:	ab 8b       	std	Y+19, r26	; 0x13
    12f8:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    12fa:	69 89       	ldd	r22, Y+17	; 0x11
    12fc:	7a 89       	ldd	r23, Y+18	; 0x12
    12fe:	8b 89       	ldd	r24, Y+19	; 0x13
    1300:	9c 89       	ldd	r25, Y+20	; 0x14
    1302:	20 e0       	ldi	r18, 0x00	; 0
    1304:	30 e0       	ldi	r19, 0x00	; 0
    1306:	40 e8       	ldi	r20, 0x80	; 128
    1308:	5f e3       	ldi	r21, 0x3F	; 63
    130a:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    130e:	88 23       	and	r24, r24
    1310:	1c f4       	brge	.+6      	; 0x1318 <WriteToNrf+0x900>
		__ticks = 1;
    1312:	81 e0       	ldi	r24, 0x01	; 1
    1314:	88 8b       	std	Y+16, r24	; 0x10
    1316:	91 c0       	rjmp	.+290    	; 0x143a <WriteToNrf+0xa22>
	else if (__tmp > 255)
    1318:	69 89       	ldd	r22, Y+17	; 0x11
    131a:	7a 89       	ldd	r23, Y+18	; 0x12
    131c:	8b 89       	ldd	r24, Y+19	; 0x13
    131e:	9c 89       	ldd	r25, Y+20	; 0x14
    1320:	20 e0       	ldi	r18, 0x00	; 0
    1322:	30 e0       	ldi	r19, 0x00	; 0
    1324:	4f e7       	ldi	r20, 0x7F	; 127
    1326:	53 e4       	ldi	r21, 0x43	; 67
    1328:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    132c:	18 16       	cp	r1, r24
    132e:	0c f0       	brlt	.+2      	; 0x1332 <WriteToNrf+0x91a>
    1330:	7b c0       	rjmp	.+246    	; 0x1428 <WriteToNrf+0xa10>
	{
		_delay_ms(__us / 1000.0);
    1332:	6d 89       	ldd	r22, Y+21	; 0x15
    1334:	7e 89       	ldd	r23, Y+22	; 0x16
    1336:	8f 89       	ldd	r24, Y+23	; 0x17
    1338:	98 8d       	ldd	r25, Y+24	; 0x18
    133a:	20 e0       	ldi	r18, 0x00	; 0
    133c:	30 e0       	ldi	r19, 0x00	; 0
    133e:	4a e7       	ldi	r20, 0x7A	; 122
    1340:	54 e4       	ldi	r21, 0x44	; 68
    1342:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
    1346:	dc 01       	movw	r26, r24
    1348:	cb 01       	movw	r24, r22
    134a:	8c 87       	std	Y+12, r24	; 0x0c
    134c:	9d 87       	std	Y+13, r25	; 0x0d
    134e:	ae 87       	std	Y+14, r26	; 0x0e
    1350:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1352:	6c 85       	ldd	r22, Y+12	; 0x0c
    1354:	7d 85       	ldd	r23, Y+13	; 0x0d
    1356:	8e 85       	ldd	r24, Y+14	; 0x0e
    1358:	9f 85       	ldd	r25, Y+15	; 0x0f
    135a:	20 e0       	ldi	r18, 0x00	; 0
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	4a ef       	ldi	r20, 0xFA	; 250
    1360:	54 e4       	ldi	r21, 0x44	; 68
    1362:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1366:	dc 01       	movw	r26, r24
    1368:	cb 01       	movw	r24, r22
    136a:	88 87       	std	Y+8, r24	; 0x08
    136c:	99 87       	std	Y+9, r25	; 0x09
    136e:	aa 87       	std	Y+10, r26	; 0x0a
    1370:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    1372:	68 85       	ldd	r22, Y+8	; 0x08
    1374:	79 85       	ldd	r23, Y+9	; 0x09
    1376:	8a 85       	ldd	r24, Y+10	; 0x0a
    1378:	9b 85       	ldd	r25, Y+11	; 0x0b
    137a:	20 e0       	ldi	r18, 0x00	; 0
    137c:	30 e0       	ldi	r19, 0x00	; 0
    137e:	40 e8       	ldi	r20, 0x80	; 128
    1380:	5f e3       	ldi	r21, 0x3F	; 63
    1382:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1386:	88 23       	and	r24, r24
    1388:	2c f4       	brge	.+10     	; 0x1394 <WriteToNrf+0x97c>
		__ticks = 1;
    138a:	81 e0       	ldi	r24, 0x01	; 1
    138c:	90 e0       	ldi	r25, 0x00	; 0
    138e:	9f 83       	std	Y+7, r25	; 0x07
    1390:	8e 83       	std	Y+6, r24	; 0x06
    1392:	3f c0       	rjmp	.+126    	; 0x1412 <WriteToNrf+0x9fa>
	else if (__tmp > 65535)
    1394:	68 85       	ldd	r22, Y+8	; 0x08
    1396:	79 85       	ldd	r23, Y+9	; 0x09
    1398:	8a 85       	ldd	r24, Y+10	; 0x0a
    139a:	9b 85       	ldd	r25, Y+11	; 0x0b
    139c:	20 e0       	ldi	r18, 0x00	; 0
    139e:	3f ef       	ldi	r19, 0xFF	; 255
    13a0:	4f e7       	ldi	r20, 0x7F	; 127
    13a2:	57 e4       	ldi	r21, 0x47	; 71
    13a4:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    13a8:	18 16       	cp	r1, r24
    13aa:	4c f5       	brge	.+82     	; 0x13fe <WriteToNrf+0x9e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    13ac:	6c 85       	ldd	r22, Y+12	; 0x0c
    13ae:	7d 85       	ldd	r23, Y+13	; 0x0d
    13b0:	8e 85       	ldd	r24, Y+14	; 0x0e
    13b2:	9f 85       	ldd	r25, Y+15	; 0x0f
    13b4:	20 e0       	ldi	r18, 0x00	; 0
    13b6:	30 e0       	ldi	r19, 0x00	; 0
    13b8:	40 e2       	ldi	r20, 0x20	; 32
    13ba:	51 e4       	ldi	r21, 0x41	; 65
    13bc:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    13c0:	dc 01       	movw	r26, r24
    13c2:	cb 01       	movw	r24, r22
    13c4:	bc 01       	movw	r22, r24
    13c6:	cd 01       	movw	r24, r26
    13c8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    13cc:	dc 01       	movw	r26, r24
    13ce:	cb 01       	movw	r24, r22
    13d0:	9f 83       	std	Y+7, r25	; 0x07
    13d2:	8e 83       	std	Y+6, r24	; 0x06
    13d4:	0f c0       	rjmp	.+30     	; 0x13f4 <WriteToNrf+0x9dc>
    13d6:	88 ec       	ldi	r24, 0xC8	; 200
    13d8:	90 e0       	ldi	r25, 0x00	; 0
    13da:	9d 83       	std	Y+5, r25	; 0x05
    13dc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    13de:	8c 81       	ldd	r24, Y+4	; 0x04
    13e0:	9d 81       	ldd	r25, Y+5	; 0x05
    13e2:	01 97       	sbiw	r24, 0x01	; 1
    13e4:	f1 f7       	brne	.-4      	; 0x13e2 <WriteToNrf+0x9ca>
    13e6:	9d 83       	std	Y+5, r25	; 0x05
    13e8:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    13ea:	8e 81       	ldd	r24, Y+6	; 0x06
    13ec:	9f 81       	ldd	r25, Y+7	; 0x07
    13ee:	01 97       	sbiw	r24, 0x01	; 1
    13f0:	9f 83       	std	Y+7, r25	; 0x07
    13f2:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    13f4:	8e 81       	ldd	r24, Y+6	; 0x06
    13f6:	9f 81       	ldd	r25, Y+7	; 0x07
    13f8:	00 97       	sbiw	r24, 0x00	; 0
    13fa:	69 f7       	brne	.-38     	; 0x13d6 <WriteToNrf+0x9be>
    13fc:	24 c0       	rjmp	.+72     	; 0x1446 <WriteToNrf+0xa2e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    13fe:	68 85       	ldd	r22, Y+8	; 0x08
    1400:	79 85       	ldd	r23, Y+9	; 0x09
    1402:	8a 85       	ldd	r24, Y+10	; 0x0a
    1404:	9b 85       	ldd	r25, Y+11	; 0x0b
    1406:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    140a:	dc 01       	movw	r26, r24
    140c:	cb 01       	movw	r24, r22
    140e:	9f 83       	std	Y+7, r25	; 0x07
    1410:	8e 83       	std	Y+6, r24	; 0x06
    1412:	8e 81       	ldd	r24, Y+6	; 0x06
    1414:	9f 81       	ldd	r25, Y+7	; 0x07
    1416:	9b 83       	std	Y+3, r25	; 0x03
    1418:	8a 83       	std	Y+2, r24	; 0x02
    141a:	8a 81       	ldd	r24, Y+2	; 0x02
    141c:	9b 81       	ldd	r25, Y+3	; 0x03
    141e:	01 97       	sbiw	r24, 0x01	; 1
    1420:	f1 f7       	brne	.-4      	; 0x141e <WriteToNrf+0xa06>
    1422:	9b 83       	std	Y+3, r25	; 0x03
    1424:	8a 83       	std	Y+2, r24	; 0x02
    1426:	0f c0       	rjmp	.+30     	; 0x1446 <WriteToNrf+0xa2e>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1428:	69 89       	ldd	r22, Y+17	; 0x11
    142a:	7a 89       	ldd	r23, Y+18	; 0x12
    142c:	8b 89       	ldd	r24, Y+19	; 0x13
    142e:	9c 89       	ldd	r25, Y+20	; 0x14
    1430:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1434:	dc 01       	movw	r26, r24
    1436:	cb 01       	movw	r24, r22
    1438:	88 8b       	std	Y+16, r24	; 0x10
    143a:	88 89       	ldd	r24, Y+16	; 0x10
    143c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    143e:	89 81       	ldd	r24, Y+1	; 0x01
    1440:	8a 95       	dec	r24
    1442:	f1 f7       	brne	.-4      	; 0x1440 <WriteToNrf+0xa28>
    1444:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    WriteByteSPI(reg);	//fÃ¶rsta SPI-kommandot efter CSN-lÃ¥g berÃ¤ttar fÃ¶r nrf'en vilket av dess register som ska redigeras ex: 0b0010 0001 write to registry EN_AA
    _delay_us(10);

    int i;
    for(i=0; i<antVal; i++)
    1446:	de 01       	movw	r26, r28
    1448:	a7 58       	subi	r26, 0x87	; 135
    144a:	bf 4f       	sbci	r27, 0xFF	; 255
    144c:	fe 01       	movw	r30, r28
    144e:	e7 58       	subi	r30, 0x87	; 135
    1450:	ff 4f       	sbci	r31, 0xFF	; 255
    1452:	80 81       	ld	r24, Z
    1454:	91 81       	ldd	r25, Z+1	; 0x01
    1456:	01 96       	adiw	r24, 0x01	; 1
    1458:	11 96       	adiw	r26, 0x01	; 1
    145a:	9c 93       	st	X, r25
    145c:	8e 93       	st	-X, r24
    145e:	fe 01       	movw	r30, r28
    1460:	e1 58       	subi	r30, 0x81	; 129
    1462:	ff 4f       	sbci	r31, 0xFF	; 255
    1464:	80 81       	ld	r24, Z
    1466:	28 2f       	mov	r18, r24
    1468:	30 e0       	ldi	r19, 0x00	; 0
    146a:	fe 01       	movw	r30, r28
    146c:	e7 58       	subi	r30, 0x87	; 135
    146e:	ff 4f       	sbci	r31, 0xFF	; 255
    1470:	80 81       	ld	r24, Z
    1472:	91 81       	ldd	r25, Z+1	; 0x01
    1474:	82 17       	cp	r24, r18
    1476:	93 07       	cpc	r25, r19
    1478:	0c f4       	brge	.+2      	; 0x147c <WriteToNrf+0xa64>
    147a:	3e ce       	rjmp	.-900    	; 0x10f8 <WriteToNrf+0x6e0>
            WriteByteSPI(val[i]);	//Andra och resten av SPI kommandot sÃ¤ger Ã¥t nrfen vilka vÃ¤rden som i det hÃ¤r fallet ska skrivas till
            _delay_us(10);
        }
    }
    //PORTB|=_BV(2);	//CSN IR_High = nrf-chippet slutar lyssna
        PORTB|=_BV(2);
    147c:	a5 e2       	ldi	r26, 0x25	; 37
    147e:	b0 e0       	ldi	r27, 0x00	; 0
    1480:	e5 e2       	ldi	r30, 0x25	; 37
    1482:	f0 e0       	ldi	r31, 0x00	; 0
    1484:	80 81       	ld	r24, Z
    1486:	84 60       	ori	r24, 0x04	; 4
    1488:	8c 93       	st	X, r24

    sei(); //enable global interrupt
    148a:	78 94       	sei

    return ret;	//returnerar en array
    148c:	88 e0       	ldi	r24, 0x08	; 8
    148e:	91 e0       	ldi	r25, 0x01	; 1
}
    1490:	c1 58       	subi	r28, 0x81	; 129
    1492:	df 4f       	sbci	r29, 0xFF	; 255
    1494:	0f b6       	in	r0, 0x3f	; 63
    1496:	f8 94       	cli
    1498:	de bf       	out	0x3e, r29	; 62
    149a:	0f be       	out	0x3f, r0	; 63
    149c:	cd bf       	out	0x3d, r28	; 61
    149e:	cf 91       	pop	r28
    14a0:	df 91       	pop	r29
    14a2:	1f 91       	pop	r17
    14a4:	0f 91       	pop	r16
    14a6:	08 95       	ret

000014a8 <nrf24L01_init>:

//initierar nrf'en (obs nrfen mÃ¥ste vala i vila nÃ¤r detta sker CE-lÃ¥g)
void nrf24L01_init(void)
{
    14a8:	df 93       	push	r29
    14aa:	cf 93       	push	r28
    14ac:	cd b7       	in	r28, 0x3d	; 61
    14ae:	de b7       	in	r29, 0x3e	; 62
    14b0:	a3 97       	sbiw	r28, 0x23	; 35
    14b2:	0f b6       	in	r0, 0x3f	; 63
    14b4:	f8 94       	cli
    14b6:	de bf       	out	0x3e, r29	; 62
    14b8:	0f be       	out	0x3f, r0	; 63
    14ba:	cd bf       	out	0x3d, r28	; 61
    14bc:	80 e0       	ldi	r24, 0x00	; 0
    14be:	90 e0       	ldi	r25, 0x00	; 0
    14c0:	a8 ec       	ldi	r26, 0xC8	; 200
    14c2:	b2 e4       	ldi	r27, 0x42	; 66
    14c4:	89 8f       	std	Y+25, r24	; 0x19
    14c6:	9a 8f       	std	Y+26, r25	; 0x1a
    14c8:	ab 8f       	std	Y+27, r26	; 0x1b
    14ca:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    14cc:	69 8d       	ldd	r22, Y+25	; 0x19
    14ce:	7a 8d       	ldd	r23, Y+26	; 0x1a
    14d0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    14d2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    14d4:	20 e0       	ldi	r18, 0x00	; 0
    14d6:	30 e0       	ldi	r19, 0x00	; 0
    14d8:	4a ef       	ldi	r20, 0xFA	; 250
    14da:	54 e4       	ldi	r21, 0x44	; 68
    14dc:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    14e0:	dc 01       	movw	r26, r24
    14e2:	cb 01       	movw	r24, r22
    14e4:	8d 8b       	std	Y+21, r24	; 0x15
    14e6:	9e 8b       	std	Y+22, r25	; 0x16
    14e8:	af 8b       	std	Y+23, r26	; 0x17
    14ea:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    14ec:	6d 89       	ldd	r22, Y+21	; 0x15
    14ee:	7e 89       	ldd	r23, Y+22	; 0x16
    14f0:	8f 89       	ldd	r24, Y+23	; 0x17
    14f2:	98 8d       	ldd	r25, Y+24	; 0x18
    14f4:	20 e0       	ldi	r18, 0x00	; 0
    14f6:	30 e0       	ldi	r19, 0x00	; 0
    14f8:	40 e8       	ldi	r20, 0x80	; 128
    14fa:	5f e3       	ldi	r21, 0x3F	; 63
    14fc:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1500:	88 23       	and	r24, r24
    1502:	2c f4       	brge	.+10     	; 0x150e <nrf24L01_init+0x66>
		__ticks = 1;
    1504:	81 e0       	ldi	r24, 0x01	; 1
    1506:	90 e0       	ldi	r25, 0x00	; 0
    1508:	9c 8b       	std	Y+20, r25	; 0x14
    150a:	8b 8b       	std	Y+19, r24	; 0x13
    150c:	3f c0       	rjmp	.+126    	; 0x158c <nrf24L01_init+0xe4>
	else if (__tmp > 65535)
    150e:	6d 89       	ldd	r22, Y+21	; 0x15
    1510:	7e 89       	ldd	r23, Y+22	; 0x16
    1512:	8f 89       	ldd	r24, Y+23	; 0x17
    1514:	98 8d       	ldd	r25, Y+24	; 0x18
    1516:	20 e0       	ldi	r18, 0x00	; 0
    1518:	3f ef       	ldi	r19, 0xFF	; 255
    151a:	4f e7       	ldi	r20, 0x7F	; 127
    151c:	57 e4       	ldi	r21, 0x47	; 71
    151e:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    1522:	18 16       	cp	r1, r24
    1524:	4c f5       	brge	.+82     	; 0x1578 <nrf24L01_init+0xd0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1526:	69 8d       	ldd	r22, Y+25	; 0x19
    1528:	7a 8d       	ldd	r23, Y+26	; 0x1a
    152a:	8b 8d       	ldd	r24, Y+27	; 0x1b
    152c:	9c 8d       	ldd	r25, Y+28	; 0x1c
    152e:	20 e0       	ldi	r18, 0x00	; 0
    1530:	30 e0       	ldi	r19, 0x00	; 0
    1532:	40 e2       	ldi	r20, 0x20	; 32
    1534:	51 e4       	ldi	r21, 0x41	; 65
    1536:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    153a:	dc 01       	movw	r26, r24
    153c:	cb 01       	movw	r24, r22
    153e:	bc 01       	movw	r22, r24
    1540:	cd 01       	movw	r24, r26
    1542:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1546:	dc 01       	movw	r26, r24
    1548:	cb 01       	movw	r24, r22
    154a:	9c 8b       	std	Y+20, r25	; 0x14
    154c:	8b 8b       	std	Y+19, r24	; 0x13
    154e:	0f c0       	rjmp	.+30     	; 0x156e <nrf24L01_init+0xc6>
    1550:	88 ec       	ldi	r24, 0xC8	; 200
    1552:	90 e0       	ldi	r25, 0x00	; 0
    1554:	9a 8b       	std	Y+18, r25	; 0x12
    1556:	89 8b       	std	Y+17, r24	; 0x11
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1558:	89 89       	ldd	r24, Y+17	; 0x11
    155a:	9a 89       	ldd	r25, Y+18	; 0x12
    155c:	01 97       	sbiw	r24, 0x01	; 1
    155e:	f1 f7       	brne	.-4      	; 0x155c <nrf24L01_init+0xb4>
    1560:	9a 8b       	std	Y+18, r25	; 0x12
    1562:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1564:	8b 89       	ldd	r24, Y+19	; 0x13
    1566:	9c 89       	ldd	r25, Y+20	; 0x14
    1568:	01 97       	sbiw	r24, 0x01	; 1
    156a:	9c 8b       	std	Y+20, r25	; 0x14
    156c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    156e:	8b 89       	ldd	r24, Y+19	; 0x13
    1570:	9c 89       	ldd	r25, Y+20	; 0x14
    1572:	00 97       	sbiw	r24, 0x00	; 0
    1574:	69 f7       	brne	.-38     	; 0x1550 <nrf24L01_init+0xa8>
    1576:	14 c0       	rjmp	.+40     	; 0x15a0 <nrf24L01_init+0xf8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1578:	6d 89       	ldd	r22, Y+21	; 0x15
    157a:	7e 89       	ldd	r23, Y+22	; 0x16
    157c:	8f 89       	ldd	r24, Y+23	; 0x17
    157e:	98 8d       	ldd	r25, Y+24	; 0x18
    1580:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1584:	dc 01       	movw	r26, r24
    1586:	cb 01       	movw	r24, r22
    1588:	9c 8b       	std	Y+20, r25	; 0x14
    158a:	8b 8b       	std	Y+19, r24	; 0x13
    158c:	8b 89       	ldd	r24, Y+19	; 0x13
    158e:	9c 89       	ldd	r25, Y+20	; 0x14
    1590:	98 8b       	std	Y+16, r25	; 0x10
    1592:	8f 87       	std	Y+15, r24	; 0x0f
    1594:	8f 85       	ldd	r24, Y+15	; 0x0f
    1596:	98 89       	ldd	r25, Y+16	; 0x10
    1598:	01 97       	sbiw	r24, 0x01	; 1
    159a:	f1 f7       	brne	.-4      	; 0x1598 <nrf24L01_init+0xf0>
    159c:	98 8b       	std	Y+16, r25	; 0x10
    159e:	8f 87       	std	Y+15, r24	; 0x0f

    uint8_t val[5];	//en array av integers som skickar vÃ¤rden till WriteToNrf-funktionen

    //EN_AA - (auto-acknowledgements) - Transmittern fÃ¥r svar av recivern att packetet kommit fram, grymt!!! (behÃ¶ver endast vara enablad pÃ¥ Transmittern!)
    //KrÃ¤ver att Transmittern Ã¤ven har satt SAMMA RF_Adress pÃ¥ sin mottagarkanal nedan ex: RX_ADDR_P0 = TX_ADDR
    val[0]=0x01;	//ger fÃ¶rsta integern i arrayen "val" ett vÃ¤rde: 0x01=EN_AA pÃ¥ pipe P0.
    15a0:	81 e0       	ldi	r24, 0x01	; 1
    15a2:	8f 8f       	std	Y+31, r24	; 0x1f
    WriteToNrf('W', EN_AA, val, 1);	//W=ska skriva/Ã¤ndra nÃ¥t i nrfen, EN_AA=vilket register ska Ã¤ndras, val=en array med 1 till 32 vÃ¤rden  som ska skrivas till registret, 1=antal vÃ¤rden som ska lÃ¤sas ur "val" arrayen.
    15a4:	9e 01       	movw	r18, r28
    15a6:	21 5e       	subi	r18, 0xE1	; 225
    15a8:	3f 4f       	sbci	r19, 0xFF	; 255
    15aa:	87 e5       	ldi	r24, 0x57	; 87
    15ac:	61 e0       	ldi	r22, 0x01	; 1
    15ae:	a9 01       	movw	r20, r18
    15b0:	21 e0       	ldi	r18, 0x01	; 1
    15b2:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //SETUP_RETR (the setup for "EN_AA")
    val[0]=0x2F;	//0b0010 00011 "2" sets it up to 750uS delay between every retry (at least 500us at 250kbps and if payload >5bytes in 1Mbps, and if payload >15byte in 2Mbps) "F" is number of retries (1-15, now 15)
    15b6:	8f e2       	ldi	r24, 0x2F	; 47
    15b8:	8f 8f       	std	Y+31, r24	; 0x1f
    WriteToNrf('W', SETUP_RETR, val, 1);
    15ba:	9e 01       	movw	r18, r28
    15bc:	21 5e       	subi	r18, 0xE1	; 225
    15be:	3f 4f       	sbci	r19, 0xFF	; 255
    15c0:	87 e5       	ldi	r24, 0x57	; 87
    15c2:	64 e0       	ldi	r22, 0x04	; 4
    15c4:	a9 01       	movw	r20, r18
    15c6:	21 e0       	ldi	r18, 0x01	; 1
    15c8:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //VÃ¤ljer vilken/vilka datapipes (0-5) som ska vara igÃ¥ng.
    val[0]=0x01;
    15cc:	81 e0       	ldi	r24, 0x01	; 1
    15ce:	8f 8f       	std	Y+31, r24	; 0x1f
    WriteToNrf('W', EN_RXADDR, val, 1); //enable data pipe 0
    15d0:	9e 01       	movw	r18, r28
    15d2:	21 5e       	subi	r18, 0xE1	; 225
    15d4:	3f 4f       	sbci	r19, 0xFF	; 255
    15d6:	87 e5       	ldi	r24, 0x57	; 87
    15d8:	62 e0       	ldi	r22, 0x02	; 2
    15da:	a9 01       	movw	r20, r18
    15dc:	21 e0       	ldi	r18, 0x01	; 1
    15de:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //RF_Adress width setup (hur mÃ¥nga byte ska RF_Adressen bestÃ¥ av? 1-5 bytes) (5bytes sÃ¤krare dÃ¥ det finns stÃ¶rningar men lÃ¥ngsammare dataÃ¶verfÃ¶ring) 5addr-32data-5addr-32data....
    val[0]=0x03;
    15e2:	83 e0       	ldi	r24, 0x03	; 3
    15e4:	8f 8f       	std	Y+31, r24	; 0x1f
    WriteToNrf('W', SETUP_AW, val, 1); //0b0000 00011 motsvarar 5byte RF_Adress
    15e6:	9e 01       	movw	r18, r28
    15e8:	21 5e       	subi	r18, 0xE1	; 225
    15ea:	3f 4f       	sbci	r19, 0xFF	; 255
    15ec:	87 e5       	ldi	r24, 0x57	; 87
    15ee:	63 e0       	ldi	r22, 0x03	; 3
    15f0:	a9 01       	movw	r20, r18
    15f2:	21 e0       	ldi	r18, 0x01	; 1
    15f4:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //RF channel setup - vÃ¤ljer frekvens 2,400-2,527GHz 1MHz/steg
    val[0]=0x01;
    15f8:	81 e0       	ldi	r24, 0x01	; 1
    15fa:	8f 8f       	std	Y+31, r24	; 0x1f
    WriteToNrf('W', RF_CH, val, 1); //RF channel registry 0b0000 0001 = 2,401GHz (samma pÃ¥ TX Ã¥ RX)
    15fc:	9e 01       	movw	r18, r28
    15fe:	21 5e       	subi	r18, 0xE1	; 225
    1600:	3f 4f       	sbci	r19, 0xFF	; 255
    1602:	87 e5       	ldi	r24, 0x57	; 87
    1604:	65 e0       	ldi	r22, 0x05	; 5
    1606:	a9 01       	movw	r20, r18
    1608:	21 e0       	ldi	r18, 0x01	; 1
    160a:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //RF setup	- vÃ¤ljer effekt och Ã¶verfÃ¶ringshastighet
    val[0]=0x07;
    160e:	87 e0       	ldi	r24, 0x07	; 7
    1610:	8f 8f       	std	Y+31, r24	; 0x1f
    WriteToNrf('W', RF_SETUP, val, 1); //00000111 bit 3="0" ger lÃ¤gre Ã¶verfÃ¶ringshastighet 1Mbps=LÃ¤ngre rÃ¤ckvidd, bit 2-1 ger effektlÃ¤ge hÃ¶g (-0dB) ("11"=(-18dB) ger lÃ¤gre effekt =strÃ¶msnÃ¥lare men lÃ¤gre range)
    1612:	9e 01       	movw	r18, r28
    1614:	21 5e       	subi	r18, 0xE1	; 225
    1616:	3f 4f       	sbci	r19, 0xFF	; 255
    1618:	87 e5       	ldi	r24, 0x57	; 87
    161a:	66 e0       	ldi	r22, 0x06	; 6
    161c:	a9 01       	movw	r20, r18
    161e:	21 e0       	ldi	r18, 0x01	; 1
    1620:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //RX RF_Adress setup 5 byte - vÃ¤ljer RF_Adressen pÃ¥ Recivern (MÃ¥ste ges samma RF_Adress om Transmittern har EN_AA pÃ¥slaget!!!)
    int i;
    for(i=0; i<5; i++)
    1624:	1e 8e       	std	Y+30, r1	; 0x1e
    1626:	1d 8e       	std	Y+29, r1	; 0x1d
    1628:	0e c0       	rjmp	.+28     	; 0x1646 <nrf24L01_init+0x19e>
    {
        val[i]=0x12;	//RF channel registry 0b10101011 x 5 - skriver samma RF_Adress 5ggr fÃ¶r att fÃ¥ en lÃ¤tt och sÃ¤ker RF_Adress (samma pÃ¥ transmitterns chip!!!)
    162a:	2d 8d       	ldd	r18, Y+29	; 0x1d
    162c:	3e 8d       	ldd	r19, Y+30	; 0x1e
    162e:	ce 01       	movw	r24, r28
    1630:	4f 96       	adiw	r24, 0x1f	; 31
    1632:	fc 01       	movw	r30, r24
    1634:	e2 0f       	add	r30, r18
    1636:	f3 1f       	adc	r31, r19
    1638:	82 e1       	ldi	r24, 0x12	; 18
    163a:	80 83       	st	Z, r24
    val[0]=0x07;
    WriteToNrf('W', RF_SETUP, val, 1); //00000111 bit 3="0" ger lÃ¤gre Ã¶verfÃ¶ringshastighet 1Mbps=LÃ¤ngre rÃ¤ckvidd, bit 2-1 ger effektlÃ¤ge hÃ¶g (-0dB) ("11"=(-18dB) ger lÃ¤gre effekt =strÃ¶msnÃ¥lare men lÃ¤gre range)

    //RX RF_Adress setup 5 byte - vÃ¤ljer RF_Adressen pÃ¥ Recivern (MÃ¥ste ges samma RF_Adress om Transmittern har EN_AA pÃ¥slaget!!!)
    int i;
    for(i=0; i<5; i++)
    163c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    163e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1640:	01 96       	adiw	r24, 0x01	; 1
    1642:	9e 8f       	std	Y+30, r25	; 0x1e
    1644:	8d 8f       	std	Y+29, r24	; 0x1d
    1646:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1648:	9e 8d       	ldd	r25, Y+30	; 0x1e
    164a:	85 30       	cpi	r24, 0x05	; 5
    164c:	91 05       	cpc	r25, r1
    164e:	6c f3       	brlt	.-38     	; 0x162a <nrf24L01_init+0x182>
    {
        val[i]=0x12;	//RF channel registry 0b10101011 x 5 - skriver samma RF_Adress 5ggr fÃ¶r att fÃ¥ en lÃ¤tt och sÃ¤ker RF_Adress (samma pÃ¥ transmitterns chip!!!)
    }
    WriteToNrf('W', RX_ADDR_P0, val, 5); //0b0010 1010 write registry - eftersom vi valde pipe 0 i "EN_RXADDR" ovan, ger vi RF_Adressen till denna pipe. (kan ge olika RF_Adresser till olika pipes och dÃ¤rmed lyssna pÃ¥ olika transmittrar)
    1650:	9e 01       	movw	r18, r28
    1652:	21 5e       	subi	r18, 0xE1	; 225
    1654:	3f 4f       	sbci	r19, 0xFF	; 255
    1656:	87 e5       	ldi	r24, 0x57	; 87
    1658:	6a e0       	ldi	r22, 0x0A	; 10
    165a:	a9 01       	movw	r20, r18
    165c:	25 e0       	ldi	r18, 0x05	; 5
    165e:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //TX RF_Adress setup 5 byte -  vÃ¤ljer RF_Adressen pÃ¥ Transmittern (kan kommenteras bort pÃ¥ en "ren" Reciver)
    //int i; //Ã¥teranvÃ¤nder fÃ¶regÃ¥ende i...
    for(i=0; i<5; i++)
    1662:	1e 8e       	std	Y+30, r1	; 0x1e
    1664:	1d 8e       	std	Y+29, r1	; 0x1d
    1666:	0e c0       	rjmp	.+28     	; 0x1684 <nrf24L01_init+0x1dc>
    {
        val[i]=0x12;	//RF channel registry 0b10111100 x 5 - skriver samma RF_Adress 5ggr fÃ¶r att fÃ¥ en lÃ¤tt och sÃ¤ker RF_Adress (samma pÃ¥ Reciverns chip och pÃ¥ RX-RF_Adressen ovan om EN_AA enablats!!!)
    1668:	2d 8d       	ldd	r18, Y+29	; 0x1d
    166a:	3e 8d       	ldd	r19, Y+30	; 0x1e
    166c:	ce 01       	movw	r24, r28
    166e:	4f 96       	adiw	r24, 0x1f	; 31
    1670:	fc 01       	movw	r30, r24
    1672:	e2 0f       	add	r30, r18
    1674:	f3 1f       	adc	r31, r19
    1676:	82 e1       	ldi	r24, 0x12	; 18
    1678:	80 83       	st	Z, r24
    }
    WriteToNrf('W', RX_ADDR_P0, val, 5); //0b0010 1010 write registry - eftersom vi valde pipe 0 i "EN_RXADDR" ovan, ger vi RF_Adressen till denna pipe. (kan ge olika RF_Adresser till olika pipes och dÃ¤rmed lyssna pÃ¥ olika transmittrar)

    //TX RF_Adress setup 5 byte -  vÃ¤ljer RF_Adressen pÃ¥ Transmittern (kan kommenteras bort pÃ¥ en "ren" Reciver)
    //int i; //Ã¥teranvÃ¤nder fÃ¶regÃ¥ende i...
    for(i=0; i<5; i++)
    167a:	8d 8d       	ldd	r24, Y+29	; 0x1d
    167c:	9e 8d       	ldd	r25, Y+30	; 0x1e
    167e:	01 96       	adiw	r24, 0x01	; 1
    1680:	9e 8f       	std	Y+30, r25	; 0x1e
    1682:	8d 8f       	std	Y+29, r24	; 0x1d
    1684:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1686:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1688:	85 30       	cpi	r24, 0x05	; 5
    168a:	91 05       	cpc	r25, r1
    168c:	6c f3       	brlt	.-38     	; 0x1668 <nrf24L01_init+0x1c0>
    {
        val[i]=0x12;	//RF channel registry 0b10111100 x 5 - skriver samma RF_Adress 5ggr fÃ¶r att fÃ¥ en lÃ¤tt och sÃ¤ker RF_Adress (samma pÃ¥ Reciverns chip och pÃ¥ RX-RF_Adressen ovan om EN_AA enablats!!!)
    }
    WriteToNrf('W', TX_ADDR, val, 5);
    168e:	9e 01       	movw	r18, r28
    1690:	21 5e       	subi	r18, 0xE1	; 225
    1692:	3f 4f       	sbci	r19, 0xFF	; 255
    1694:	87 e5       	ldi	r24, 0x57	; 87
    1696:	60 e1       	ldi	r22, 0x10	; 16
    1698:	a9 01       	movw	r20, r18
    169a:	25 e0       	ldi	r18, 0x05	; 5
    169c:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    // payload width setup - Hur mÃ¥nga byte ska skickas per sÃ¤ndning? 1-32byte
    val[0]=dataLen;		//"0b0000 0001"=1 byte per 5byte RF_Adress  (kan vÃ¤lja upp till "0b00100000"=32byte/5byte RF_Adress) (definierat hÃ¶gst uppe i global variabel!)
    16a0:	83 e0       	ldi	r24, 0x03	; 3
    16a2:	8f 8f       	std	Y+31, r24	; 0x1f
    WriteToNrf('W', RX_PW_P0, val, 1);
    16a4:	9e 01       	movw	r18, r28
    16a6:	21 5e       	subi	r18, 0xE1	; 225
    16a8:	3f 4f       	sbci	r19, 0xFF	; 255
    16aa:	87 e5       	ldi	r24, 0x57	; 87
    16ac:	61 e1       	ldi	r22, 0x11	; 17
    16ae:	a9 01       	movw	r20, r18
    16b0:	21 e0       	ldi	r18, 0x01	; 1
    16b2:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //CONFIG reg setup - Nu Ã¤r allt instÃ¤llt, boota upp nrf'en och gÃ¶r den antingen Transmitter lr Reciver
    val[0]=0x1E;  //0b0000 1110 config registry	bit "1":1=power up,  bit "0":0=transmitter (bit "0":1=Reciver) (bit "4":1=>mask_Max_RT,dvs IRQ-vektorn reagerar inte om sÃ¤ndningen misslyckades.
    16b6:	8e e1       	ldi	r24, 0x1E	; 30
    16b8:	8f 8f       	std	Y+31, r24	; 0x1f
    WriteToNrf('W', CONFIG, val, 1);
    16ba:	9e 01       	movw	r18, r28
    16bc:	21 5e       	subi	r18, 0xE1	; 225
    16be:	3f 4f       	sbci	r19, 0xFF	; 255
    16c0:	87 e5       	ldi	r24, 0x57	; 87
    16c2:	60 e0       	ldi	r22, 0x00	; 0
    16c4:	a9 01       	movw	r20, r18
    16c6:	21 e0       	ldi	r18, 0x01	; 1
    16c8:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>
    16cc:	80 e0       	ldi	r24, 0x00	; 0
    16ce:	90 e0       	ldi	r25, 0x00	; 0
    16d0:	a8 ec       	ldi	r26, 0xC8	; 200
    16d2:	b2 e4       	ldi	r27, 0x42	; 66
    16d4:	8b 87       	std	Y+11, r24	; 0x0b
    16d6:	9c 87       	std	Y+12, r25	; 0x0c
    16d8:	ad 87       	std	Y+13, r26	; 0x0d
    16da:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    16dc:	6b 85       	ldd	r22, Y+11	; 0x0b
    16de:	7c 85       	ldd	r23, Y+12	; 0x0c
    16e0:	8d 85       	ldd	r24, Y+13	; 0x0d
    16e2:	9e 85       	ldd	r25, Y+14	; 0x0e
    16e4:	20 e0       	ldi	r18, 0x00	; 0
    16e6:	30 e0       	ldi	r19, 0x00	; 0
    16e8:	4a ef       	ldi	r20, 0xFA	; 250
    16ea:	54 e4       	ldi	r21, 0x44	; 68
    16ec:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    16f0:	dc 01       	movw	r26, r24
    16f2:	cb 01       	movw	r24, r22
    16f4:	8f 83       	std	Y+7, r24	; 0x07
    16f6:	98 87       	std	Y+8, r25	; 0x08
    16f8:	a9 87       	std	Y+9, r26	; 0x09
    16fa:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    16fc:	6f 81       	ldd	r22, Y+7	; 0x07
    16fe:	78 85       	ldd	r23, Y+8	; 0x08
    1700:	89 85       	ldd	r24, Y+9	; 0x09
    1702:	9a 85       	ldd	r25, Y+10	; 0x0a
    1704:	20 e0       	ldi	r18, 0x00	; 0
    1706:	30 e0       	ldi	r19, 0x00	; 0
    1708:	40 e8       	ldi	r20, 0x80	; 128
    170a:	5f e3       	ldi	r21, 0x3F	; 63
    170c:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1710:	88 23       	and	r24, r24
    1712:	2c f4       	brge	.+10     	; 0x171e <nrf24L01_init+0x276>
		__ticks = 1;
    1714:	81 e0       	ldi	r24, 0x01	; 1
    1716:	90 e0       	ldi	r25, 0x00	; 0
    1718:	9e 83       	std	Y+6, r25	; 0x06
    171a:	8d 83       	std	Y+5, r24	; 0x05
    171c:	3f c0       	rjmp	.+126    	; 0x179c <nrf24L01_init+0x2f4>
	else if (__tmp > 65535)
    171e:	6f 81       	ldd	r22, Y+7	; 0x07
    1720:	78 85       	ldd	r23, Y+8	; 0x08
    1722:	89 85       	ldd	r24, Y+9	; 0x09
    1724:	9a 85       	ldd	r25, Y+10	; 0x0a
    1726:	20 e0       	ldi	r18, 0x00	; 0
    1728:	3f ef       	ldi	r19, 0xFF	; 255
    172a:	4f e7       	ldi	r20, 0x7F	; 127
    172c:	57 e4       	ldi	r21, 0x47	; 71
    172e:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    1732:	18 16       	cp	r1, r24
    1734:	4c f5       	brge	.+82     	; 0x1788 <nrf24L01_init+0x2e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1736:	6b 85       	ldd	r22, Y+11	; 0x0b
    1738:	7c 85       	ldd	r23, Y+12	; 0x0c
    173a:	8d 85       	ldd	r24, Y+13	; 0x0d
    173c:	9e 85       	ldd	r25, Y+14	; 0x0e
    173e:	20 e0       	ldi	r18, 0x00	; 0
    1740:	30 e0       	ldi	r19, 0x00	; 0
    1742:	40 e2       	ldi	r20, 0x20	; 32
    1744:	51 e4       	ldi	r21, 0x41	; 65
    1746:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    174a:	dc 01       	movw	r26, r24
    174c:	cb 01       	movw	r24, r22
    174e:	bc 01       	movw	r22, r24
    1750:	cd 01       	movw	r24, r26
    1752:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1756:	dc 01       	movw	r26, r24
    1758:	cb 01       	movw	r24, r22
    175a:	9e 83       	std	Y+6, r25	; 0x06
    175c:	8d 83       	std	Y+5, r24	; 0x05
    175e:	0f c0       	rjmp	.+30     	; 0x177e <nrf24L01_init+0x2d6>
    1760:	88 ec       	ldi	r24, 0xC8	; 200
    1762:	90 e0       	ldi	r25, 0x00	; 0
    1764:	9c 83       	std	Y+4, r25	; 0x04
    1766:	8b 83       	std	Y+3, r24	; 0x03
    1768:	8b 81       	ldd	r24, Y+3	; 0x03
    176a:	9c 81       	ldd	r25, Y+4	; 0x04
    176c:	01 97       	sbiw	r24, 0x01	; 1
    176e:	f1 f7       	brne	.-4      	; 0x176c <nrf24L01_init+0x2c4>
    1770:	9c 83       	std	Y+4, r25	; 0x04
    1772:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1774:	8d 81       	ldd	r24, Y+5	; 0x05
    1776:	9e 81       	ldd	r25, Y+6	; 0x06
    1778:	01 97       	sbiw	r24, 0x01	; 1
    177a:	9e 83       	std	Y+6, r25	; 0x06
    177c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    177e:	8d 81       	ldd	r24, Y+5	; 0x05
    1780:	9e 81       	ldd	r25, Y+6	; 0x06
    1782:	00 97       	sbiw	r24, 0x00	; 0
    1784:	69 f7       	brne	.-38     	; 0x1760 <nrf24L01_init+0x2b8>
    1786:	14 c0       	rjmp	.+40     	; 0x17b0 <nrf24L01_init+0x308>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1788:	6f 81       	ldd	r22, Y+7	; 0x07
    178a:	78 85       	ldd	r23, Y+8	; 0x08
    178c:	89 85       	ldd	r24, Y+9	; 0x09
    178e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1790:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1794:	dc 01       	movw	r26, r24
    1796:	cb 01       	movw	r24, r22
    1798:	9e 83       	std	Y+6, r25	; 0x06
    179a:	8d 83       	std	Y+5, r24	; 0x05
    179c:	8d 81       	ldd	r24, Y+5	; 0x05
    179e:	9e 81       	ldd	r25, Y+6	; 0x06
    17a0:	9a 83       	std	Y+2, r25	; 0x02
    17a2:	89 83       	std	Y+1, r24	; 0x01
    17a4:	89 81       	ldd	r24, Y+1	; 0x01
    17a6:	9a 81       	ldd	r25, Y+2	; 0x02
    17a8:	01 97       	sbiw	r24, 0x01	; 1
    17aa:	f1 f7       	brne	.-4      	; 0x17a8 <nrf24L01_init+0x300>
    17ac:	9a 83       	std	Y+2, r25	; 0x02
    17ae:	89 83       	std	Y+1, r24	; 0x01

    //device need 1.5ms to reach standby mode
    _delay_ms(100);

    //sei();
}
    17b0:	a3 96       	adiw	r28, 0x23	; 35
    17b2:	0f b6       	in	r0, 0x3f	; 63
    17b4:	f8 94       	cli
    17b6:	de bf       	out	0x3e, r29	; 62
    17b8:	0f be       	out	0x3f, r0	; 63
    17ba:	cd bf       	out	0x3d, r28	; 61
    17bc:	cf 91       	pop	r28
    17be:	df 91       	pop	r29
    17c0:	08 95       	ret

000017c2 <ChangeAddress>:

void ChangeAddress(uint8_t adress)
{
    17c2:	df 93       	push	r29
    17c4:	cf 93       	push	r28
    17c6:	cd b7       	in	r28, 0x3d	; 61
    17c8:	de b7       	in	r29, 0x3e	; 62
    17ca:	a4 97       	sbiw	r28, 0x24	; 36
    17cc:	0f b6       	in	r0, 0x3f	; 63
    17ce:	f8 94       	cli
    17d0:	de bf       	out	0x3e, r29	; 62
    17d2:	0f be       	out	0x3f, r0	; 63
    17d4:	cd bf       	out	0x3d, r28	; 61
    17d6:	8c a3       	std	Y+36, r24	; 0x24
    17d8:	80 e0       	ldi	r24, 0x00	; 0
    17da:	90 e0       	ldi	r25, 0x00	; 0
    17dc:	a8 ec       	ldi	r26, 0xC8	; 200
    17de:	b2 e4       	ldi	r27, 0x42	; 66
    17e0:	89 8f       	std	Y+25, r24	; 0x19
    17e2:	9a 8f       	std	Y+26, r25	; 0x1a
    17e4:	ab 8f       	std	Y+27, r26	; 0x1b
    17e6:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    17e8:	69 8d       	ldd	r22, Y+25	; 0x19
    17ea:	7a 8d       	ldd	r23, Y+26	; 0x1a
    17ec:	8b 8d       	ldd	r24, Y+27	; 0x1b
    17ee:	9c 8d       	ldd	r25, Y+28	; 0x1c
    17f0:	20 e0       	ldi	r18, 0x00	; 0
    17f2:	30 e0       	ldi	r19, 0x00	; 0
    17f4:	4a ef       	ldi	r20, 0xFA	; 250
    17f6:	54 e4       	ldi	r21, 0x44	; 68
    17f8:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    17fc:	dc 01       	movw	r26, r24
    17fe:	cb 01       	movw	r24, r22
    1800:	8d 8b       	std	Y+21, r24	; 0x15
    1802:	9e 8b       	std	Y+22, r25	; 0x16
    1804:	af 8b       	std	Y+23, r26	; 0x17
    1806:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    1808:	6d 89       	ldd	r22, Y+21	; 0x15
    180a:	7e 89       	ldd	r23, Y+22	; 0x16
    180c:	8f 89       	ldd	r24, Y+23	; 0x17
    180e:	98 8d       	ldd	r25, Y+24	; 0x18
    1810:	20 e0       	ldi	r18, 0x00	; 0
    1812:	30 e0       	ldi	r19, 0x00	; 0
    1814:	40 e8       	ldi	r20, 0x80	; 128
    1816:	5f e3       	ldi	r21, 0x3F	; 63
    1818:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    181c:	88 23       	and	r24, r24
    181e:	2c f4       	brge	.+10     	; 0x182a <ChangeAddress+0x68>
		__ticks = 1;
    1820:	81 e0       	ldi	r24, 0x01	; 1
    1822:	90 e0       	ldi	r25, 0x00	; 0
    1824:	9c 8b       	std	Y+20, r25	; 0x14
    1826:	8b 8b       	std	Y+19, r24	; 0x13
    1828:	3f c0       	rjmp	.+126    	; 0x18a8 <ChangeAddress+0xe6>
	else if (__tmp > 65535)
    182a:	6d 89       	ldd	r22, Y+21	; 0x15
    182c:	7e 89       	ldd	r23, Y+22	; 0x16
    182e:	8f 89       	ldd	r24, Y+23	; 0x17
    1830:	98 8d       	ldd	r25, Y+24	; 0x18
    1832:	20 e0       	ldi	r18, 0x00	; 0
    1834:	3f ef       	ldi	r19, 0xFF	; 255
    1836:	4f e7       	ldi	r20, 0x7F	; 127
    1838:	57 e4       	ldi	r21, 0x47	; 71
    183a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    183e:	18 16       	cp	r1, r24
    1840:	4c f5       	brge	.+82     	; 0x1894 <ChangeAddress+0xd2>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1842:	69 8d       	ldd	r22, Y+25	; 0x19
    1844:	7a 8d       	ldd	r23, Y+26	; 0x1a
    1846:	8b 8d       	ldd	r24, Y+27	; 0x1b
    1848:	9c 8d       	ldd	r25, Y+28	; 0x1c
    184a:	20 e0       	ldi	r18, 0x00	; 0
    184c:	30 e0       	ldi	r19, 0x00	; 0
    184e:	40 e2       	ldi	r20, 0x20	; 32
    1850:	51 e4       	ldi	r21, 0x41	; 65
    1852:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1856:	dc 01       	movw	r26, r24
    1858:	cb 01       	movw	r24, r22
    185a:	bc 01       	movw	r22, r24
    185c:	cd 01       	movw	r24, r26
    185e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1862:	dc 01       	movw	r26, r24
    1864:	cb 01       	movw	r24, r22
    1866:	9c 8b       	std	Y+20, r25	; 0x14
    1868:	8b 8b       	std	Y+19, r24	; 0x13
    186a:	0f c0       	rjmp	.+30     	; 0x188a <ChangeAddress+0xc8>
    186c:	88 ec       	ldi	r24, 0xC8	; 200
    186e:	90 e0       	ldi	r25, 0x00	; 0
    1870:	9a 8b       	std	Y+18, r25	; 0x12
    1872:	89 8b       	std	Y+17, r24	; 0x11
    1874:	89 89       	ldd	r24, Y+17	; 0x11
    1876:	9a 89       	ldd	r25, Y+18	; 0x12
    1878:	01 97       	sbiw	r24, 0x01	; 1
    187a:	f1 f7       	brne	.-4      	; 0x1878 <ChangeAddress+0xb6>
    187c:	9a 8b       	std	Y+18, r25	; 0x12
    187e:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1880:	8b 89       	ldd	r24, Y+19	; 0x13
    1882:	9c 89       	ldd	r25, Y+20	; 0x14
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	9c 8b       	std	Y+20, r25	; 0x14
    1888:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    188a:	8b 89       	ldd	r24, Y+19	; 0x13
    188c:	9c 89       	ldd	r25, Y+20	; 0x14
    188e:	00 97       	sbiw	r24, 0x00	; 0
    1890:	69 f7       	brne	.-38     	; 0x186c <ChangeAddress+0xaa>
    1892:	14 c0       	rjmp	.+40     	; 0x18bc <ChangeAddress+0xfa>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1894:	6d 89       	ldd	r22, Y+21	; 0x15
    1896:	7e 89       	ldd	r23, Y+22	; 0x16
    1898:	8f 89       	ldd	r24, Y+23	; 0x17
    189a:	98 8d       	ldd	r25, Y+24	; 0x18
    189c:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    18a0:	dc 01       	movw	r26, r24
    18a2:	cb 01       	movw	r24, r22
    18a4:	9c 8b       	std	Y+20, r25	; 0x14
    18a6:	8b 8b       	std	Y+19, r24	; 0x13
    18a8:	8b 89       	ldd	r24, Y+19	; 0x13
    18aa:	9c 89       	ldd	r25, Y+20	; 0x14
    18ac:	98 8b       	std	Y+16, r25	; 0x10
    18ae:	8f 87       	std	Y+15, r24	; 0x0f
    18b0:	8f 85       	ldd	r24, Y+15	; 0x0f
    18b2:	98 89       	ldd	r25, Y+16	; 0x10
    18b4:	01 97       	sbiw	r24, 0x01	; 1
    18b6:	f1 f7       	brne	.-4      	; 0x18b4 <ChangeAddress+0xf2>
    18b8:	98 8b       	std	Y+16, r25	; 0x10
    18ba:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_ms(100);
    uint8_t val[5];
    //RX RF_Adress setup 5 byte - vÃ¤ljer RF_Adressen pÃ¥ Recivern (MÃ¥ste ges samma RF_Adress om Transmittern har EN_AA pÃ¥slaget!!!)
    int i;
    for(i=0; i<5; i++)
    18bc:	1e 8e       	std	Y+30, r1	; 0x1e
    18be:	1d 8e       	std	Y+29, r1	; 0x1d
    18c0:	0e c0       	rjmp	.+28     	; 0x18de <ChangeAddress+0x11c>
    {
        val[i]=adress;	//RF channel registry 0b10101011 x 5 - skriver samma RF_Adress 5ggr fÃ¶r att fÃ¥ en lÃ¤tt och sÃ¤ker RF_Adress (samma pÃ¥ transmitterns chip!!!)
    18c2:	2d 8d       	ldd	r18, Y+29	; 0x1d
    18c4:	3e 8d       	ldd	r19, Y+30	; 0x1e
    18c6:	ce 01       	movw	r24, r28
    18c8:	4f 96       	adiw	r24, 0x1f	; 31
    18ca:	fc 01       	movw	r30, r24
    18cc:	e2 0f       	add	r30, r18
    18ce:	f3 1f       	adc	r31, r19
    18d0:	8c a1       	ldd	r24, Y+36	; 0x24
    18d2:	80 83       	st	Z, r24
{
    _delay_ms(100);
    uint8_t val[5];
    //RX RF_Adress setup 5 byte - vÃ¤ljer RF_Adressen pÃ¥ Recivern (MÃ¥ste ges samma RF_Adress om Transmittern har EN_AA pÃ¥slaget!!!)
    int i;
    for(i=0; i<5; i++)
    18d4:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18d6:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18d8:	01 96       	adiw	r24, 0x01	; 1
    18da:	9e 8f       	std	Y+30, r25	; 0x1e
    18dc:	8d 8f       	std	Y+29, r24	; 0x1d
    18de:	8d 8d       	ldd	r24, Y+29	; 0x1d
    18e0:	9e 8d       	ldd	r25, Y+30	; 0x1e
    18e2:	85 30       	cpi	r24, 0x05	; 5
    18e4:	91 05       	cpc	r25, r1
    18e6:	6c f3       	brlt	.-38     	; 0x18c2 <ChangeAddress+0x100>
    {
        val[i]=adress;	//RF channel registry 0b10101011 x 5 - skriver samma RF_Adress 5ggr fÃ¶r att fÃ¥ en lÃ¤tt och sÃ¤ker RF_Adress (samma pÃ¥ transmitterns chip!!!)
    }
    WriteToNrf('W', RX_ADDR_P0, val, 5); //0b0010 1010 write registry - eftersom vi valde pipe 0 i "EN_RXADDR" ovan, ger vi RF_Adressen till denna pipe. (kan ge olika RF_Adresser till olika pipes och dÃ¤rmed lyssna pÃ¥ olika transmittrar)
    18e8:	9e 01       	movw	r18, r28
    18ea:	21 5e       	subi	r18, 0xE1	; 225
    18ec:	3f 4f       	sbci	r19, 0xFF	; 255
    18ee:	87 e5       	ldi	r24, 0x57	; 87
    18f0:	6a e0       	ldi	r22, 0x0A	; 10
    18f2:	a9 01       	movw	r20, r18
    18f4:	25 e0       	ldi	r18, 0x05	; 5
    18f6:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    //TX RF_Adress setup 5 byte -  vÃ¤ljer RF_Adressen pÃ¥ Transmittern (kan kommenteras bort pÃ¥ en "ren" Reciver)
    //int i; //Ã¥teranvÃ¤nder fÃ¶regÃ¥ende i...
    for(i=0; i<5; i++)
    18fa:	1e 8e       	std	Y+30, r1	; 0x1e
    18fc:	1d 8e       	std	Y+29, r1	; 0x1d
    18fe:	0e c0       	rjmp	.+28     	; 0x191c <ChangeAddress+0x15a>
    {
        val[i]=adress;	//RF channel registry 0b10111100 x 5 - skriver samma RF_Adress 5ggr fÃ¶r att fÃ¥ en lÃ¤tt och sÃ¤ker RF_Adress (samma pÃ¥ Reciverns chip och pÃ¥ RX-RF_Adressen ovan om EN_AA enablats!!!)
    1900:	2d 8d       	ldd	r18, Y+29	; 0x1d
    1902:	3e 8d       	ldd	r19, Y+30	; 0x1e
    1904:	ce 01       	movw	r24, r28
    1906:	4f 96       	adiw	r24, 0x1f	; 31
    1908:	fc 01       	movw	r30, r24
    190a:	e2 0f       	add	r30, r18
    190c:	f3 1f       	adc	r31, r19
    190e:	8c a1       	ldd	r24, Y+36	; 0x24
    1910:	80 83       	st	Z, r24
    }
    WriteToNrf('W', RX_ADDR_P0, val, 5); //0b0010 1010 write registry - eftersom vi valde pipe 0 i "EN_RXADDR" ovan, ger vi RF_Adressen till denna pipe. (kan ge olika RF_Adresser till olika pipes och dÃ¤rmed lyssna pÃ¥ olika transmittrar)

    //TX RF_Adress setup 5 byte -  vÃ¤ljer RF_Adressen pÃ¥ Transmittern (kan kommenteras bort pÃ¥ en "ren" Reciver)
    //int i; //Ã¥teranvÃ¤nder fÃ¶regÃ¥ende i...
    for(i=0; i<5; i++)
    1912:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1914:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1916:	01 96       	adiw	r24, 0x01	; 1
    1918:	9e 8f       	std	Y+30, r25	; 0x1e
    191a:	8d 8f       	std	Y+29, r24	; 0x1d
    191c:	8d 8d       	ldd	r24, Y+29	; 0x1d
    191e:	9e 8d       	ldd	r25, Y+30	; 0x1e
    1920:	85 30       	cpi	r24, 0x05	; 5
    1922:	91 05       	cpc	r25, r1
    1924:	6c f3       	brlt	.-38     	; 0x1900 <ChangeAddress+0x13e>
    {
        val[i]=adress;	//RF channel registry 0b10111100 x 5 - skriver samma RF_Adress 5ggr fÃ¶r att fÃ¥ en lÃ¤tt och sÃ¤ker RF_Adress (samma pÃ¥ Reciverns chip och pÃ¥ RX-RF_Adressen ovan om EN_AA enablats!!!)
    }
    WriteToNrf('W', TX_ADDR, val, 5);
    1926:	9e 01       	movw	r18, r28
    1928:	21 5e       	subi	r18, 0xE1	; 225
    192a:	3f 4f       	sbci	r19, 0xFF	; 255
    192c:	87 e5       	ldi	r24, 0x57	; 87
    192e:	60 e1       	ldi	r22, 0x10	; 16
    1930:	a9 01       	movw	r20, r18
    1932:	25 e0       	ldi	r18, 0x05	; 5
    1934:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>
    1938:	80 e0       	ldi	r24, 0x00	; 0
    193a:	90 e0       	ldi	r25, 0x00	; 0
    193c:	a8 ec       	ldi	r26, 0xC8	; 200
    193e:	b2 e4       	ldi	r27, 0x42	; 66
    1940:	8b 87       	std	Y+11, r24	; 0x0b
    1942:	9c 87       	std	Y+12, r25	; 0x0c
    1944:	ad 87       	std	Y+13, r26	; 0x0d
    1946:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1948:	6b 85       	ldd	r22, Y+11	; 0x0b
    194a:	7c 85       	ldd	r23, Y+12	; 0x0c
    194c:	8d 85       	ldd	r24, Y+13	; 0x0d
    194e:	9e 85       	ldd	r25, Y+14	; 0x0e
    1950:	20 e0       	ldi	r18, 0x00	; 0
    1952:	30 e0       	ldi	r19, 0x00	; 0
    1954:	4a ef       	ldi	r20, 0xFA	; 250
    1956:	54 e4       	ldi	r21, 0x44	; 68
    1958:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    195c:	dc 01       	movw	r26, r24
    195e:	cb 01       	movw	r24, r22
    1960:	8f 83       	std	Y+7, r24	; 0x07
    1962:	98 87       	std	Y+8, r25	; 0x08
    1964:	a9 87       	std	Y+9, r26	; 0x09
    1966:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    1968:	6f 81       	ldd	r22, Y+7	; 0x07
    196a:	78 85       	ldd	r23, Y+8	; 0x08
    196c:	89 85       	ldd	r24, Y+9	; 0x09
    196e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1970:	20 e0       	ldi	r18, 0x00	; 0
    1972:	30 e0       	ldi	r19, 0x00	; 0
    1974:	40 e8       	ldi	r20, 0x80	; 128
    1976:	5f e3       	ldi	r21, 0x3F	; 63
    1978:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    197c:	88 23       	and	r24, r24
    197e:	2c f4       	brge	.+10     	; 0x198a <ChangeAddress+0x1c8>
		__ticks = 1;
    1980:	81 e0       	ldi	r24, 0x01	; 1
    1982:	90 e0       	ldi	r25, 0x00	; 0
    1984:	9e 83       	std	Y+6, r25	; 0x06
    1986:	8d 83       	std	Y+5, r24	; 0x05
    1988:	3f c0       	rjmp	.+126    	; 0x1a08 <ChangeAddress+0x246>
	else if (__tmp > 65535)
    198a:	6f 81       	ldd	r22, Y+7	; 0x07
    198c:	78 85       	ldd	r23, Y+8	; 0x08
    198e:	89 85       	ldd	r24, Y+9	; 0x09
    1990:	9a 85       	ldd	r25, Y+10	; 0x0a
    1992:	20 e0       	ldi	r18, 0x00	; 0
    1994:	3f ef       	ldi	r19, 0xFF	; 255
    1996:	4f e7       	ldi	r20, 0x7F	; 127
    1998:	57 e4       	ldi	r21, 0x47	; 71
    199a:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    199e:	18 16       	cp	r1, r24
    19a0:	4c f5       	brge	.+82     	; 0x19f4 <ChangeAddress+0x232>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    19a2:	6b 85       	ldd	r22, Y+11	; 0x0b
    19a4:	7c 85       	ldd	r23, Y+12	; 0x0c
    19a6:	8d 85       	ldd	r24, Y+13	; 0x0d
    19a8:	9e 85       	ldd	r25, Y+14	; 0x0e
    19aa:	20 e0       	ldi	r18, 0x00	; 0
    19ac:	30 e0       	ldi	r19, 0x00	; 0
    19ae:	40 e2       	ldi	r20, 0x20	; 32
    19b0:	51 e4       	ldi	r21, 0x41	; 65
    19b2:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    19b6:	dc 01       	movw	r26, r24
    19b8:	cb 01       	movw	r24, r22
    19ba:	bc 01       	movw	r22, r24
    19bc:	cd 01       	movw	r24, r26
    19be:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    19c2:	dc 01       	movw	r26, r24
    19c4:	cb 01       	movw	r24, r22
    19c6:	9e 83       	std	Y+6, r25	; 0x06
    19c8:	8d 83       	std	Y+5, r24	; 0x05
    19ca:	0f c0       	rjmp	.+30     	; 0x19ea <ChangeAddress+0x228>
    19cc:	88 ec       	ldi	r24, 0xC8	; 200
    19ce:	90 e0       	ldi	r25, 0x00	; 0
    19d0:	9c 83       	std	Y+4, r25	; 0x04
    19d2:	8b 83       	std	Y+3, r24	; 0x03
    19d4:	8b 81       	ldd	r24, Y+3	; 0x03
    19d6:	9c 81       	ldd	r25, Y+4	; 0x04
    19d8:	01 97       	sbiw	r24, 0x01	; 1
    19da:	f1 f7       	brne	.-4      	; 0x19d8 <ChangeAddress+0x216>
    19dc:	9c 83       	std	Y+4, r25	; 0x04
    19de:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    19e0:	8d 81       	ldd	r24, Y+5	; 0x05
    19e2:	9e 81       	ldd	r25, Y+6	; 0x06
    19e4:	01 97       	sbiw	r24, 0x01	; 1
    19e6:	9e 83       	std	Y+6, r25	; 0x06
    19e8:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19ea:	8d 81       	ldd	r24, Y+5	; 0x05
    19ec:	9e 81       	ldd	r25, Y+6	; 0x06
    19ee:	00 97       	sbiw	r24, 0x00	; 0
    19f0:	69 f7       	brne	.-38     	; 0x19cc <ChangeAddress+0x20a>
    19f2:	14 c0       	rjmp	.+40     	; 0x1a1c <ChangeAddress+0x25a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19f4:	6f 81       	ldd	r22, Y+7	; 0x07
    19f6:	78 85       	ldd	r23, Y+8	; 0x08
    19f8:	89 85       	ldd	r24, Y+9	; 0x09
    19fa:	9a 85       	ldd	r25, Y+10	; 0x0a
    19fc:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1a00:	dc 01       	movw	r26, r24
    1a02:	cb 01       	movw	r24, r22
    1a04:	9e 83       	std	Y+6, r25	; 0x06
    1a06:	8d 83       	std	Y+5, r24	; 0x05
    1a08:	8d 81       	ldd	r24, Y+5	; 0x05
    1a0a:	9e 81       	ldd	r25, Y+6	; 0x06
    1a0c:	9a 83       	std	Y+2, r25	; 0x02
    1a0e:	89 83       	std	Y+1, r24	; 0x01
    1a10:	89 81       	ldd	r24, Y+1	; 0x01
    1a12:	9a 81       	ldd	r25, Y+2	; 0x02
    1a14:	01 97       	sbiw	r24, 0x01	; 1
    1a16:	f1 f7       	brne	.-4      	; 0x1a14 <ChangeAddress+0x252>
    1a18:	9a 83       	std	Y+2, r25	; 0x02
    1a1a:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(100);
}
    1a1c:	a4 96       	adiw	r28, 0x24	; 36
    1a1e:	0f b6       	in	r0, 0x3f	; 63
    1a20:	f8 94       	cli
    1a22:	de bf       	out	0x3e, r29	; 62
    1a24:	0f be       	out	0x3f, r0	; 63
    1a26:	cd bf       	out	0x3d, r28	; 61
    1a28:	cf 91       	pop	r28
    1a2a:	df 91       	pop	r29
    1a2c:	08 95       	ret

00001a2e <reset>:
/////////////////////////////////////////////////////

/*****************Funktioner***************************/ //Funktioner som anvÃ¤nds i main
//Resettar nrf'en fÃ¶r ny kommunikation
void reset(void)
{
    1a2e:	0f 93       	push	r16
    1a30:	1f 93       	push	r17
    1a32:	df 93       	push	r29
    1a34:	cf 93       	push	r28
    1a36:	cd b7       	in	r28, 0x3d	; 61
    1a38:	de b7       	in	r29, 0x3e	; 62
    1a3a:	c0 56       	subi	r28, 0x60	; 96
    1a3c:	d0 40       	sbci	r29, 0x00	; 0
    1a3e:	0f b6       	in	r0, 0x3f	; 63
    1a40:	f8 94       	cli
    1a42:	de bf       	out	0x3e, r29	; 62
    1a44:	0f be       	out	0x3f, r0	; 63
    1a46:	cd bf       	out	0x3d, r28	; 61
    1a48:	fe 01       	movw	r30, r28
    1a4a:	e3 5a       	subi	r30, 0xA3	; 163
    1a4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a4e:	80 e0       	ldi	r24, 0x00	; 0
    1a50:	90 e0       	ldi	r25, 0x00	; 0
    1a52:	a0 e2       	ldi	r26, 0x20	; 32
    1a54:	b1 e4       	ldi	r27, 0x41	; 65
    1a56:	80 83       	st	Z, r24
    1a58:	91 83       	std	Z+1, r25	; 0x01
    1a5a:	a2 83       	std	Z+2, r26	; 0x02
    1a5c:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1a5e:	8e 01       	movw	r16, r28
    1a60:	07 5a       	subi	r16, 0xA7	; 167
    1a62:	1f 4f       	sbci	r17, 0xFF	; 255
    1a64:	fe 01       	movw	r30, r28
    1a66:	e3 5a       	subi	r30, 0xA3	; 163
    1a68:	ff 4f       	sbci	r31, 0xFF	; 255
    1a6a:	60 81       	ld	r22, Z
    1a6c:	71 81       	ldd	r23, Z+1	; 0x01
    1a6e:	82 81       	ldd	r24, Z+2	; 0x02
    1a70:	93 81       	ldd	r25, Z+3	; 0x03
    1a72:	2b ea       	ldi	r18, 0xAB	; 171
    1a74:	3a ea       	ldi	r19, 0xAA	; 170
    1a76:	4a e2       	ldi	r20, 0x2A	; 42
    1a78:	50 e4       	ldi	r21, 0x40	; 64
    1a7a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1a7e:	dc 01       	movw	r26, r24
    1a80:	cb 01       	movw	r24, r22
    1a82:	f8 01       	movw	r30, r16
    1a84:	80 83       	st	Z, r24
    1a86:	91 83       	std	Z+1, r25	; 0x01
    1a88:	a2 83       	std	Z+2, r26	; 0x02
    1a8a:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a8c:	fe 01       	movw	r30, r28
    1a8e:	e7 5a       	subi	r30, 0xA7	; 167
    1a90:	ff 4f       	sbci	r31, 0xFF	; 255
    1a92:	60 81       	ld	r22, Z
    1a94:	71 81       	ldd	r23, Z+1	; 0x01
    1a96:	82 81       	ldd	r24, Z+2	; 0x02
    1a98:	93 81       	ldd	r25, Z+3	; 0x03
    1a9a:	20 e0       	ldi	r18, 0x00	; 0
    1a9c:	30 e0       	ldi	r19, 0x00	; 0
    1a9e:	40 e8       	ldi	r20, 0x80	; 128
    1aa0:	5f e3       	ldi	r21, 0x3F	; 63
    1aa2:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1aa6:	88 23       	and	r24, r24
    1aa8:	34 f4       	brge	.+12     	; 0x1ab6 <reset+0x88>
		__ticks = 1;
    1aaa:	fe 01       	movw	r30, r28
    1aac:	e8 5a       	subi	r30, 0xA8	; 168
    1aae:	ff 4f       	sbci	r31, 0xFF	; 255
    1ab0:	81 e0       	ldi	r24, 0x01	; 1
    1ab2:	80 83       	st	Z, r24
    1ab4:	e0 c0       	rjmp	.+448    	; 0x1c76 <reset+0x248>
	else if (__tmp > 255)
    1ab6:	fe 01       	movw	r30, r28
    1ab8:	e7 5a       	subi	r30, 0xA7	; 167
    1aba:	ff 4f       	sbci	r31, 0xFF	; 255
    1abc:	60 81       	ld	r22, Z
    1abe:	71 81       	ldd	r23, Z+1	; 0x01
    1ac0:	82 81       	ldd	r24, Z+2	; 0x02
    1ac2:	93 81       	ldd	r25, Z+3	; 0x03
    1ac4:	20 e0       	ldi	r18, 0x00	; 0
    1ac6:	30 e0       	ldi	r19, 0x00	; 0
    1ac8:	4f e7       	ldi	r20, 0x7F	; 127
    1aca:	53 e4       	ldi	r21, 0x43	; 67
    1acc:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    1ad0:	18 16       	cp	r1, r24
    1ad2:	0c f0       	brlt	.+2      	; 0x1ad6 <reset+0xa8>
    1ad4:	c0 c0       	rjmp	.+384    	; 0x1c56 <reset+0x228>
	{
		_delay_ms(__us / 1000.0);
    1ad6:	fe 01       	movw	r30, r28
    1ad8:	e3 5a       	subi	r30, 0xA3	; 163
    1ada:	ff 4f       	sbci	r31, 0xFF	; 255
    1adc:	60 81       	ld	r22, Z
    1ade:	71 81       	ldd	r23, Z+1	; 0x01
    1ae0:	82 81       	ldd	r24, Z+2	; 0x02
    1ae2:	93 81       	ldd	r25, Z+3	; 0x03
    1ae4:	20 e0       	ldi	r18, 0x00	; 0
    1ae6:	30 e0       	ldi	r19, 0x00	; 0
    1ae8:	4a e7       	ldi	r20, 0x7A	; 122
    1aea:	54 e4       	ldi	r21, 0x44	; 68
    1aec:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
    1af0:	dc 01       	movw	r26, r24
    1af2:	cb 01       	movw	r24, r22
    1af4:	fe 01       	movw	r30, r28
    1af6:	ec 5a       	subi	r30, 0xAC	; 172
    1af8:	ff 4f       	sbci	r31, 0xFF	; 255
    1afa:	80 83       	st	Z, r24
    1afc:	91 83       	std	Z+1, r25	; 0x01
    1afe:	a2 83       	std	Z+2, r26	; 0x02
    1b00:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1b02:	8e 01       	movw	r16, r28
    1b04:	00 5b       	subi	r16, 0xB0	; 176
    1b06:	1f 4f       	sbci	r17, 0xFF	; 255
    1b08:	fe 01       	movw	r30, r28
    1b0a:	ec 5a       	subi	r30, 0xAC	; 172
    1b0c:	ff 4f       	sbci	r31, 0xFF	; 255
    1b0e:	60 81       	ld	r22, Z
    1b10:	71 81       	ldd	r23, Z+1	; 0x01
    1b12:	82 81       	ldd	r24, Z+2	; 0x02
    1b14:	93 81       	ldd	r25, Z+3	; 0x03
    1b16:	20 e0       	ldi	r18, 0x00	; 0
    1b18:	30 e0       	ldi	r19, 0x00	; 0
    1b1a:	4a ef       	ldi	r20, 0xFA	; 250
    1b1c:	54 e4       	ldi	r21, 0x44	; 68
    1b1e:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1b22:	dc 01       	movw	r26, r24
    1b24:	cb 01       	movw	r24, r22
    1b26:	f8 01       	movw	r30, r16
    1b28:	80 83       	st	Z, r24
    1b2a:	91 83       	std	Z+1, r25	; 0x01
    1b2c:	a2 83       	std	Z+2, r26	; 0x02
    1b2e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1b30:	fe 01       	movw	r30, r28
    1b32:	e0 5b       	subi	r30, 0xB0	; 176
    1b34:	ff 4f       	sbci	r31, 0xFF	; 255
    1b36:	60 81       	ld	r22, Z
    1b38:	71 81       	ldd	r23, Z+1	; 0x01
    1b3a:	82 81       	ldd	r24, Z+2	; 0x02
    1b3c:	93 81       	ldd	r25, Z+3	; 0x03
    1b3e:	20 e0       	ldi	r18, 0x00	; 0
    1b40:	30 e0       	ldi	r19, 0x00	; 0
    1b42:	40 e8       	ldi	r20, 0x80	; 128
    1b44:	5f e3       	ldi	r21, 0x3F	; 63
    1b46:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1b4a:	88 23       	and	r24, r24
    1b4c:	44 f4       	brge	.+16     	; 0x1b5e <reset+0x130>
		__ticks = 1;
    1b4e:	fe 01       	movw	r30, r28
    1b50:	e2 5b       	subi	r30, 0xB2	; 178
    1b52:	ff 4f       	sbci	r31, 0xFF	; 255
    1b54:	81 e0       	ldi	r24, 0x01	; 1
    1b56:	90 e0       	ldi	r25, 0x00	; 0
    1b58:	91 83       	std	Z+1, r25	; 0x01
    1b5a:	80 83       	st	Z, r24
    1b5c:	64 c0       	rjmp	.+200    	; 0x1c26 <reset+0x1f8>
	else if (__tmp > 65535)
    1b5e:	fe 01       	movw	r30, r28
    1b60:	e0 5b       	subi	r30, 0xB0	; 176
    1b62:	ff 4f       	sbci	r31, 0xFF	; 255
    1b64:	60 81       	ld	r22, Z
    1b66:	71 81       	ldd	r23, Z+1	; 0x01
    1b68:	82 81       	ldd	r24, Z+2	; 0x02
    1b6a:	93 81       	ldd	r25, Z+3	; 0x03
    1b6c:	20 e0       	ldi	r18, 0x00	; 0
    1b6e:	3f ef       	ldi	r19, 0xFF	; 255
    1b70:	4f e7       	ldi	r20, 0x7F	; 127
    1b72:	57 e4       	ldi	r21, 0x47	; 71
    1b74:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    1b78:	18 16       	cp	r1, r24
    1b7a:	0c f0       	brlt	.+2      	; 0x1b7e <reset+0x150>
    1b7c:	43 c0       	rjmp	.+134    	; 0x1c04 <reset+0x1d6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1b7e:	fe 01       	movw	r30, r28
    1b80:	ec 5a       	subi	r30, 0xAC	; 172
    1b82:	ff 4f       	sbci	r31, 0xFF	; 255
    1b84:	60 81       	ld	r22, Z
    1b86:	71 81       	ldd	r23, Z+1	; 0x01
    1b88:	82 81       	ldd	r24, Z+2	; 0x02
    1b8a:	93 81       	ldd	r25, Z+3	; 0x03
    1b8c:	20 e0       	ldi	r18, 0x00	; 0
    1b8e:	30 e0       	ldi	r19, 0x00	; 0
    1b90:	40 e2       	ldi	r20, 0x20	; 32
    1b92:	51 e4       	ldi	r21, 0x41	; 65
    1b94:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1b98:	dc 01       	movw	r26, r24
    1b9a:	cb 01       	movw	r24, r22
    1b9c:	8e 01       	movw	r16, r28
    1b9e:	02 5b       	subi	r16, 0xB2	; 178
    1ba0:	1f 4f       	sbci	r17, 0xFF	; 255
    1ba2:	bc 01       	movw	r22, r24
    1ba4:	cd 01       	movw	r24, r26
    1ba6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1baa:	dc 01       	movw	r26, r24
    1bac:	cb 01       	movw	r24, r22
    1bae:	f8 01       	movw	r30, r16
    1bb0:	91 83       	std	Z+1, r25	; 0x01
    1bb2:	80 83       	st	Z, r24
    1bb4:	1f c0       	rjmp	.+62     	; 0x1bf4 <reset+0x1c6>
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e4 5b       	subi	r30, 0xB4	; 180
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	88 ec       	ldi	r24, 0xC8	; 200
    1bbe:	90 e0       	ldi	r25, 0x00	; 0
    1bc0:	91 83       	std	Z+1, r25	; 0x01
    1bc2:	80 83       	st	Z, r24
    1bc4:	fe 01       	movw	r30, r28
    1bc6:	e4 5b       	subi	r30, 0xB4	; 180
    1bc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bca:	80 81       	ld	r24, Z
    1bcc:	91 81       	ldd	r25, Z+1	; 0x01
    1bce:	01 97       	sbiw	r24, 0x01	; 1
    1bd0:	f1 f7       	brne	.-4      	; 0x1bce <reset+0x1a0>
    1bd2:	fe 01       	movw	r30, r28
    1bd4:	e4 5b       	subi	r30, 0xB4	; 180
    1bd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1bdc:	de 01       	movw	r26, r28
    1bde:	a2 5b       	subi	r26, 0xB2	; 178
    1be0:	bf 4f       	sbci	r27, 0xFF	; 255
    1be2:	fe 01       	movw	r30, r28
    1be4:	e2 5b       	subi	r30, 0xB2	; 178
    1be6:	ff 4f       	sbci	r31, 0xFF	; 255
    1be8:	80 81       	ld	r24, Z
    1bea:	91 81       	ldd	r25, Z+1	; 0x01
    1bec:	01 97       	sbiw	r24, 0x01	; 1
    1bee:	11 96       	adiw	r26, 0x01	; 1
    1bf0:	9c 93       	st	X, r25
    1bf2:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1bf4:	fe 01       	movw	r30, r28
    1bf6:	e2 5b       	subi	r30, 0xB2	; 178
    1bf8:	ff 4f       	sbci	r31, 0xFF	; 255
    1bfa:	80 81       	ld	r24, Z
    1bfc:	91 81       	ldd	r25, Z+1	; 0x01
    1bfe:	00 97       	sbiw	r24, 0x00	; 0
    1c00:	d1 f6       	brne	.-76     	; 0x1bb6 <reset+0x188>
    1c02:	4b c0       	rjmp	.+150    	; 0x1c9a <reset+0x26c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1c04:	8e 01       	movw	r16, r28
    1c06:	02 5b       	subi	r16, 0xB2	; 178
    1c08:	1f 4f       	sbci	r17, 0xFF	; 255
    1c0a:	fe 01       	movw	r30, r28
    1c0c:	e0 5b       	subi	r30, 0xB0	; 176
    1c0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c10:	60 81       	ld	r22, Z
    1c12:	71 81       	ldd	r23, Z+1	; 0x01
    1c14:	82 81       	ldd	r24, Z+2	; 0x02
    1c16:	93 81       	ldd	r25, Z+3	; 0x03
    1c18:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1c1c:	dc 01       	movw	r26, r24
    1c1e:	cb 01       	movw	r24, r22
    1c20:	f8 01       	movw	r30, r16
    1c22:	91 83       	std	Z+1, r25	; 0x01
    1c24:	80 83       	st	Z, r24
    1c26:	de 01       	movw	r26, r28
    1c28:	a6 5b       	subi	r26, 0xB6	; 182
    1c2a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e2 5b       	subi	r30, 0xB2	; 178
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	80 81       	ld	r24, Z
    1c34:	91 81       	ldd	r25, Z+1	; 0x01
    1c36:	11 96       	adiw	r26, 0x01	; 1
    1c38:	9c 93       	st	X, r25
    1c3a:	8e 93       	st	-X, r24
    1c3c:	fe 01       	movw	r30, r28
    1c3e:	e6 5b       	subi	r30, 0xB6	; 182
    1c40:	ff 4f       	sbci	r31, 0xFF	; 255
    1c42:	80 81       	ld	r24, Z
    1c44:	91 81       	ldd	r25, Z+1	; 0x01
    1c46:	01 97       	sbiw	r24, 0x01	; 1
    1c48:	f1 f7       	brne	.-4      	; 0x1c46 <reset+0x218>
    1c4a:	fe 01       	movw	r30, r28
    1c4c:	e6 5b       	subi	r30, 0xB6	; 182
    1c4e:	ff 4f       	sbci	r31, 0xFF	; 255
    1c50:	91 83       	std	Z+1, r25	; 0x01
    1c52:	80 83       	st	Z, r24
    1c54:	22 c0       	rjmp	.+68     	; 0x1c9a <reset+0x26c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1c56:	8e 01       	movw	r16, r28
    1c58:	08 5a       	subi	r16, 0xA8	; 168
    1c5a:	1f 4f       	sbci	r17, 0xFF	; 255
    1c5c:	fe 01       	movw	r30, r28
    1c5e:	e7 5a       	subi	r30, 0xA7	; 167
    1c60:	ff 4f       	sbci	r31, 0xFF	; 255
    1c62:	60 81       	ld	r22, Z
    1c64:	71 81       	ldd	r23, Z+1	; 0x01
    1c66:	82 81       	ldd	r24, Z+2	; 0x02
    1c68:	93 81       	ldd	r25, Z+3	; 0x03
    1c6a:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1c6e:	dc 01       	movw	r26, r24
    1c70:	cb 01       	movw	r24, r22
    1c72:	f8 01       	movw	r30, r16
    1c74:	80 83       	st	Z, r24
    1c76:	de 01       	movw	r26, r28
    1c78:	a7 5b       	subi	r26, 0xB7	; 183
    1c7a:	bf 4f       	sbci	r27, 0xFF	; 255
    1c7c:	fe 01       	movw	r30, r28
    1c7e:	e8 5a       	subi	r30, 0xA8	; 168
    1c80:	ff 4f       	sbci	r31, 0xFF	; 255
    1c82:	80 81       	ld	r24, Z
    1c84:	8c 93       	st	X, r24
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1c86:	fe 01       	movw	r30, r28
    1c88:	e7 5b       	subi	r30, 0xB7	; 183
    1c8a:	ff 4f       	sbci	r31, 0xFF	; 255
    1c8c:	80 81       	ld	r24, Z
    1c8e:	8a 95       	dec	r24
    1c90:	f1 f7       	brne	.-4      	; 0x1c8e <reset+0x260>
    1c92:	fe 01       	movw	r30, r28
    1c94:	e7 5b       	subi	r30, 0xB7	; 183
    1c96:	ff 4f       	sbci	r31, 0xFF	; 255
    1c98:	80 83       	st	Z, r24
    _delay_us(10);
    PORTB&=~_BV(2);	//CSN low
    1c9a:	a5 e2       	ldi	r26, 0x25	; 37
    1c9c:	b0 e0       	ldi	r27, 0x00	; 0
    1c9e:	e5 e2       	ldi	r30, 0x25	; 37
    1ca0:	f0 e0       	ldi	r31, 0x00	; 0
    1ca2:	80 81       	ld	r24, Z
    1ca4:	8b 7f       	andi	r24, 0xFB	; 251
    1ca6:	8c 93       	st	X, r24
    1ca8:	fe 01       	movw	r30, r28
    1caa:	eb 5b       	subi	r30, 0xBB	; 187
    1cac:	ff 4f       	sbci	r31, 0xFF	; 255
    1cae:	80 e0       	ldi	r24, 0x00	; 0
    1cb0:	90 e0       	ldi	r25, 0x00	; 0
    1cb2:	a0 e2       	ldi	r26, 0x20	; 32
    1cb4:	b1 e4       	ldi	r27, 0x41	; 65
    1cb6:	80 83       	st	Z, r24
    1cb8:	91 83       	std	Z+1, r25	; 0x01
    1cba:	a2 83       	std	Z+2, r26	; 0x02
    1cbc:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1cbe:	8e 01       	movw	r16, r28
    1cc0:	0f 5b       	subi	r16, 0xBF	; 191
    1cc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1cc4:	fe 01       	movw	r30, r28
    1cc6:	eb 5b       	subi	r30, 0xBB	; 187
    1cc8:	ff 4f       	sbci	r31, 0xFF	; 255
    1cca:	60 81       	ld	r22, Z
    1ccc:	71 81       	ldd	r23, Z+1	; 0x01
    1cce:	82 81       	ldd	r24, Z+2	; 0x02
    1cd0:	93 81       	ldd	r25, Z+3	; 0x03
    1cd2:	2b ea       	ldi	r18, 0xAB	; 171
    1cd4:	3a ea       	ldi	r19, 0xAA	; 170
    1cd6:	4a e2       	ldi	r20, 0x2A	; 42
    1cd8:	50 e4       	ldi	r21, 0x40	; 64
    1cda:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1cde:	dc 01       	movw	r26, r24
    1ce0:	cb 01       	movw	r24, r22
    1ce2:	f8 01       	movw	r30, r16
    1ce4:	80 83       	st	Z, r24
    1ce6:	91 83       	std	Z+1, r25	; 0x01
    1ce8:	a2 83       	std	Z+2, r26	; 0x02
    1cea:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1cec:	fe 01       	movw	r30, r28
    1cee:	ef 5b       	subi	r30, 0xBF	; 191
    1cf0:	ff 4f       	sbci	r31, 0xFF	; 255
    1cf2:	60 81       	ld	r22, Z
    1cf4:	71 81       	ldd	r23, Z+1	; 0x01
    1cf6:	82 81       	ldd	r24, Z+2	; 0x02
    1cf8:	93 81       	ldd	r25, Z+3	; 0x03
    1cfa:	20 e0       	ldi	r18, 0x00	; 0
    1cfc:	30 e0       	ldi	r19, 0x00	; 0
    1cfe:	40 e8       	ldi	r20, 0x80	; 128
    1d00:	5f e3       	ldi	r21, 0x3F	; 63
    1d02:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1d06:	88 23       	and	r24, r24
    1d08:	34 f4       	brge	.+12     	; 0x1d16 <reset+0x2e8>
		__ticks = 1;
    1d0a:	81 e0       	ldi	r24, 0x01	; 1
    1d0c:	fe 01       	movw	r30, r28
    1d0e:	e0 5c       	subi	r30, 0xC0	; 192
    1d10:	ff 4f       	sbci	r31, 0xFF	; 255
    1d12:	80 83       	st	Z, r24
    1d14:	9d c0       	rjmp	.+314    	; 0x1e50 <reset+0x422>
	else if (__tmp > 255)
    1d16:	fe 01       	movw	r30, r28
    1d18:	ef 5b       	subi	r30, 0xBF	; 191
    1d1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d1c:	60 81       	ld	r22, Z
    1d1e:	71 81       	ldd	r23, Z+1	; 0x01
    1d20:	82 81       	ldd	r24, Z+2	; 0x02
    1d22:	93 81       	ldd	r25, Z+3	; 0x03
    1d24:	20 e0       	ldi	r18, 0x00	; 0
    1d26:	30 e0       	ldi	r19, 0x00	; 0
    1d28:	4f e7       	ldi	r20, 0x7F	; 127
    1d2a:	53 e4       	ldi	r21, 0x43	; 67
    1d2c:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    1d30:	18 16       	cp	r1, r24
    1d32:	0c f0       	brlt	.+2      	; 0x1d36 <reset+0x308>
    1d34:	7e c0       	rjmp	.+252    	; 0x1e32 <reset+0x404>
	{
		_delay_ms(__us / 1000.0);
    1d36:	fe 01       	movw	r30, r28
    1d38:	eb 5b       	subi	r30, 0xBB	; 187
    1d3a:	ff 4f       	sbci	r31, 0xFF	; 255
    1d3c:	60 81       	ld	r22, Z
    1d3e:	71 81       	ldd	r23, Z+1	; 0x01
    1d40:	82 81       	ldd	r24, Z+2	; 0x02
    1d42:	93 81       	ldd	r25, Z+3	; 0x03
    1d44:	20 e0       	ldi	r18, 0x00	; 0
    1d46:	30 e0       	ldi	r19, 0x00	; 0
    1d48:	4a e7       	ldi	r20, 0x7A	; 122
    1d4a:	54 e4       	ldi	r21, 0x44	; 68
    1d4c:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
    1d50:	dc 01       	movw	r26, r24
    1d52:	cb 01       	movw	r24, r22
    1d54:	8c af       	std	Y+60, r24	; 0x3c
    1d56:	9d af       	std	Y+61, r25	; 0x3d
    1d58:	ae af       	std	Y+62, r26	; 0x3e
    1d5a:	bf af       	std	Y+63, r27	; 0x3f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d5c:	6c ad       	ldd	r22, Y+60	; 0x3c
    1d5e:	7d ad       	ldd	r23, Y+61	; 0x3d
    1d60:	8e ad       	ldd	r24, Y+62	; 0x3e
    1d62:	9f ad       	ldd	r25, Y+63	; 0x3f
    1d64:	20 e0       	ldi	r18, 0x00	; 0
    1d66:	30 e0       	ldi	r19, 0x00	; 0
    1d68:	4a ef       	ldi	r20, 0xFA	; 250
    1d6a:	54 e4       	ldi	r21, 0x44	; 68
    1d6c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1d70:	dc 01       	movw	r26, r24
    1d72:	cb 01       	movw	r24, r22
    1d74:	88 af       	std	Y+56, r24	; 0x38
    1d76:	99 af       	std	Y+57, r25	; 0x39
    1d78:	aa af       	std	Y+58, r26	; 0x3a
    1d7a:	bb af       	std	Y+59, r27	; 0x3b
	if (__tmp < 1.0)
    1d7c:	68 ad       	ldd	r22, Y+56	; 0x38
    1d7e:	79 ad       	ldd	r23, Y+57	; 0x39
    1d80:	8a ad       	ldd	r24, Y+58	; 0x3a
    1d82:	9b ad       	ldd	r25, Y+59	; 0x3b
    1d84:	20 e0       	ldi	r18, 0x00	; 0
    1d86:	30 e0       	ldi	r19, 0x00	; 0
    1d88:	40 e8       	ldi	r20, 0x80	; 128
    1d8a:	5f e3       	ldi	r21, 0x3F	; 63
    1d8c:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1d90:	88 23       	and	r24, r24
    1d92:	2c f4       	brge	.+10     	; 0x1d9e <reset+0x370>
		__ticks = 1;
    1d94:	81 e0       	ldi	r24, 0x01	; 1
    1d96:	90 e0       	ldi	r25, 0x00	; 0
    1d98:	9f ab       	std	Y+55, r25	; 0x37
    1d9a:	8e ab       	std	Y+54, r24	; 0x36
    1d9c:	3f c0       	rjmp	.+126    	; 0x1e1c <reset+0x3ee>
	else if (__tmp > 65535)
    1d9e:	68 ad       	ldd	r22, Y+56	; 0x38
    1da0:	79 ad       	ldd	r23, Y+57	; 0x39
    1da2:	8a ad       	ldd	r24, Y+58	; 0x3a
    1da4:	9b ad       	ldd	r25, Y+59	; 0x3b
    1da6:	20 e0       	ldi	r18, 0x00	; 0
    1da8:	3f ef       	ldi	r19, 0xFF	; 255
    1daa:	4f e7       	ldi	r20, 0x7F	; 127
    1dac:	57 e4       	ldi	r21, 0x47	; 71
    1dae:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    1db2:	18 16       	cp	r1, r24
    1db4:	4c f5       	brge	.+82     	; 0x1e08 <reset+0x3da>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1db6:	6c ad       	ldd	r22, Y+60	; 0x3c
    1db8:	7d ad       	ldd	r23, Y+61	; 0x3d
    1dba:	8e ad       	ldd	r24, Y+62	; 0x3e
    1dbc:	9f ad       	ldd	r25, Y+63	; 0x3f
    1dbe:	20 e0       	ldi	r18, 0x00	; 0
    1dc0:	30 e0       	ldi	r19, 0x00	; 0
    1dc2:	40 e2       	ldi	r20, 0x20	; 32
    1dc4:	51 e4       	ldi	r21, 0x41	; 65
    1dc6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1dca:	dc 01       	movw	r26, r24
    1dcc:	cb 01       	movw	r24, r22
    1dce:	bc 01       	movw	r22, r24
    1dd0:	cd 01       	movw	r24, r26
    1dd2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1dd6:	dc 01       	movw	r26, r24
    1dd8:	cb 01       	movw	r24, r22
    1dda:	9f ab       	std	Y+55, r25	; 0x37
    1ddc:	8e ab       	std	Y+54, r24	; 0x36
    1dde:	0f c0       	rjmp	.+30     	; 0x1dfe <reset+0x3d0>
    1de0:	88 ec       	ldi	r24, 0xC8	; 200
    1de2:	90 e0       	ldi	r25, 0x00	; 0
    1de4:	9d ab       	std	Y+53, r25	; 0x35
    1de6:	8c ab       	std	Y+52, r24	; 0x34
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1de8:	8c a9       	ldd	r24, Y+52	; 0x34
    1dea:	9d a9       	ldd	r25, Y+53	; 0x35
    1dec:	01 97       	sbiw	r24, 0x01	; 1
    1dee:	f1 f7       	brne	.-4      	; 0x1dec <reset+0x3be>
    1df0:	9d ab       	std	Y+53, r25	; 0x35
    1df2:	8c ab       	std	Y+52, r24	; 0x34
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1df4:	8e a9       	ldd	r24, Y+54	; 0x36
    1df6:	9f a9       	ldd	r25, Y+55	; 0x37
    1df8:	01 97       	sbiw	r24, 0x01	; 1
    1dfa:	9f ab       	std	Y+55, r25	; 0x37
    1dfc:	8e ab       	std	Y+54, r24	; 0x36
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1dfe:	8e a9       	ldd	r24, Y+54	; 0x36
    1e00:	9f a9       	ldd	r25, Y+55	; 0x37
    1e02:	00 97       	sbiw	r24, 0x00	; 0
    1e04:	69 f7       	brne	.-38     	; 0x1de0 <reset+0x3b2>
    1e06:	2d c0       	rjmp	.+90     	; 0x1e62 <reset+0x434>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e08:	68 ad       	ldd	r22, Y+56	; 0x38
    1e0a:	79 ad       	ldd	r23, Y+57	; 0x39
    1e0c:	8a ad       	ldd	r24, Y+58	; 0x3a
    1e0e:	9b ad       	ldd	r25, Y+59	; 0x3b
    1e10:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1e14:	dc 01       	movw	r26, r24
    1e16:	cb 01       	movw	r24, r22
    1e18:	9f ab       	std	Y+55, r25	; 0x37
    1e1a:	8e ab       	std	Y+54, r24	; 0x36
    1e1c:	8e a9       	ldd	r24, Y+54	; 0x36
    1e1e:	9f a9       	ldd	r25, Y+55	; 0x37
    1e20:	9b ab       	std	Y+51, r25	; 0x33
    1e22:	8a ab       	std	Y+50, r24	; 0x32
    1e24:	8a a9       	ldd	r24, Y+50	; 0x32
    1e26:	9b a9       	ldd	r25, Y+51	; 0x33
    1e28:	01 97       	sbiw	r24, 0x01	; 1
    1e2a:	f1 f7       	brne	.-4      	; 0x1e28 <reset+0x3fa>
    1e2c:	9b ab       	std	Y+51, r25	; 0x33
    1e2e:	8a ab       	std	Y+50, r24	; 0x32
    1e30:	18 c0       	rjmp	.+48     	; 0x1e62 <reset+0x434>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1e32:	fe 01       	movw	r30, r28
    1e34:	ef 5b       	subi	r30, 0xBF	; 191
    1e36:	ff 4f       	sbci	r31, 0xFF	; 255
    1e38:	60 81       	ld	r22, Z
    1e3a:	71 81       	ldd	r23, Z+1	; 0x01
    1e3c:	82 81       	ldd	r24, Z+2	; 0x02
    1e3e:	93 81       	ldd	r25, Z+3	; 0x03
    1e40:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1e44:	dc 01       	movw	r26, r24
    1e46:	cb 01       	movw	r24, r22
    1e48:	fe 01       	movw	r30, r28
    1e4a:	e0 5c       	subi	r30, 0xC0	; 192
    1e4c:	ff 4f       	sbci	r31, 0xFF	; 255
    1e4e:	80 83       	st	Z, r24
    1e50:	fe 01       	movw	r30, r28
    1e52:	e0 5c       	subi	r30, 0xC0	; 192
    1e54:	ff 4f       	sbci	r31, 0xFF	; 255
    1e56:	80 81       	ld	r24, Z
    1e58:	89 ab       	std	Y+49, r24	; 0x31
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1e5a:	89 a9       	ldd	r24, Y+49	; 0x31
    1e5c:	8a 95       	dec	r24
    1e5e:	f1 f7       	brne	.-4      	; 0x1e5c <reset+0x42e>
    1e60:	89 ab       	std	Y+49, r24	; 0x31
    _delay_us(10);
    WriteByteSPI(W_REGISTER + STATUS);	//
    1e62:	87 e2       	ldi	r24, 0x27	; 39
    1e64:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <WriteByteSPI>
    1e68:	80 e0       	ldi	r24, 0x00	; 0
    1e6a:	90 e0       	ldi	r25, 0x00	; 0
    1e6c:	a0 e2       	ldi	r26, 0x20	; 32
    1e6e:	b1 e4       	ldi	r27, 0x41	; 65
    1e70:	8d a7       	std	Y+45, r24	; 0x2d
    1e72:	9e a7       	std	Y+46, r25	; 0x2e
    1e74:	af a7       	std	Y+47, r26	; 0x2f
    1e76:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1e78:	6d a5       	ldd	r22, Y+45	; 0x2d
    1e7a:	7e a5       	ldd	r23, Y+46	; 0x2e
    1e7c:	8f a5       	ldd	r24, Y+47	; 0x2f
    1e7e:	98 a9       	ldd	r25, Y+48	; 0x30
    1e80:	2b ea       	ldi	r18, 0xAB	; 171
    1e82:	3a ea       	ldi	r19, 0xAA	; 170
    1e84:	4a e2       	ldi	r20, 0x2A	; 42
    1e86:	50 e4       	ldi	r21, 0x40	; 64
    1e88:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1e8c:	dc 01       	movw	r26, r24
    1e8e:	cb 01       	movw	r24, r22
    1e90:	89 a7       	std	Y+41, r24	; 0x29
    1e92:	9a a7       	std	Y+42, r25	; 0x2a
    1e94:	ab a7       	std	Y+43, r26	; 0x2b
    1e96:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
    1e98:	69 a5       	ldd	r22, Y+41	; 0x29
    1e9a:	7a a5       	ldd	r23, Y+42	; 0x2a
    1e9c:	8b a5       	ldd	r24, Y+43	; 0x2b
    1e9e:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ea0:	20 e0       	ldi	r18, 0x00	; 0
    1ea2:	30 e0       	ldi	r19, 0x00	; 0
    1ea4:	40 e8       	ldi	r20, 0x80	; 128
    1ea6:	5f e3       	ldi	r21, 0x3F	; 63
    1ea8:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1eac:	88 23       	and	r24, r24
    1eae:	1c f4       	brge	.+6      	; 0x1eb6 <reset+0x488>
		__ticks = 1;
    1eb0:	81 e0       	ldi	r24, 0x01	; 1
    1eb2:	88 a7       	std	Y+40, r24	; 0x28
    1eb4:	91 c0       	rjmp	.+290    	; 0x1fd8 <reset+0x5aa>
	else if (__tmp > 255)
    1eb6:	69 a5       	ldd	r22, Y+41	; 0x29
    1eb8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1eba:	8b a5       	ldd	r24, Y+43	; 0x2b
    1ebc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1ebe:	20 e0       	ldi	r18, 0x00	; 0
    1ec0:	30 e0       	ldi	r19, 0x00	; 0
    1ec2:	4f e7       	ldi	r20, 0x7F	; 127
    1ec4:	53 e4       	ldi	r21, 0x43	; 67
    1ec6:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    1eca:	18 16       	cp	r1, r24
    1ecc:	0c f0       	brlt	.+2      	; 0x1ed0 <reset+0x4a2>
    1ece:	7b c0       	rjmp	.+246    	; 0x1fc6 <reset+0x598>
	{
		_delay_ms(__us / 1000.0);
    1ed0:	6d a5       	ldd	r22, Y+45	; 0x2d
    1ed2:	7e a5       	ldd	r23, Y+46	; 0x2e
    1ed4:	8f a5       	ldd	r24, Y+47	; 0x2f
    1ed6:	98 a9       	ldd	r25, Y+48	; 0x30
    1ed8:	20 e0       	ldi	r18, 0x00	; 0
    1eda:	30 e0       	ldi	r19, 0x00	; 0
    1edc:	4a e7       	ldi	r20, 0x7A	; 122
    1ede:	54 e4       	ldi	r21, 0x44	; 68
    1ee0:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
    1ee4:	dc 01       	movw	r26, r24
    1ee6:	cb 01       	movw	r24, r22
    1ee8:	8c a3       	std	Y+36, r24	; 0x24
    1eea:	9d a3       	std	Y+37, r25	; 0x25
    1eec:	ae a3       	std	Y+38, r26	; 0x26
    1eee:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1ef0:	6c a1       	ldd	r22, Y+36	; 0x24
    1ef2:	7d a1       	ldd	r23, Y+37	; 0x25
    1ef4:	8e a1       	ldd	r24, Y+38	; 0x26
    1ef6:	9f a1       	ldd	r25, Y+39	; 0x27
    1ef8:	20 e0       	ldi	r18, 0x00	; 0
    1efa:	30 e0       	ldi	r19, 0x00	; 0
    1efc:	4a ef       	ldi	r20, 0xFA	; 250
    1efe:	54 e4       	ldi	r21, 0x44	; 68
    1f00:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1f04:	dc 01       	movw	r26, r24
    1f06:	cb 01       	movw	r24, r22
    1f08:	88 a3       	std	Y+32, r24	; 0x20
    1f0a:	99 a3       	std	Y+33, r25	; 0x21
    1f0c:	aa a3       	std	Y+34, r26	; 0x22
    1f0e:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
    1f10:	68 a1       	ldd	r22, Y+32	; 0x20
    1f12:	79 a1       	ldd	r23, Y+33	; 0x21
    1f14:	8a a1       	ldd	r24, Y+34	; 0x22
    1f16:	9b a1       	ldd	r25, Y+35	; 0x23
    1f18:	20 e0       	ldi	r18, 0x00	; 0
    1f1a:	30 e0       	ldi	r19, 0x00	; 0
    1f1c:	40 e8       	ldi	r20, 0x80	; 128
    1f1e:	5f e3       	ldi	r21, 0x3F	; 63
    1f20:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    1f24:	88 23       	and	r24, r24
    1f26:	2c f4       	brge	.+10     	; 0x1f32 <reset+0x504>
		__ticks = 1;
    1f28:	81 e0       	ldi	r24, 0x01	; 1
    1f2a:	90 e0       	ldi	r25, 0x00	; 0
    1f2c:	9f 8f       	std	Y+31, r25	; 0x1f
    1f2e:	8e 8f       	std	Y+30, r24	; 0x1e
    1f30:	3f c0       	rjmp	.+126    	; 0x1fb0 <reset+0x582>
	else if (__tmp > 65535)
    1f32:	68 a1       	ldd	r22, Y+32	; 0x20
    1f34:	79 a1       	ldd	r23, Y+33	; 0x21
    1f36:	8a a1       	ldd	r24, Y+34	; 0x22
    1f38:	9b a1       	ldd	r25, Y+35	; 0x23
    1f3a:	20 e0       	ldi	r18, 0x00	; 0
    1f3c:	3f ef       	ldi	r19, 0xFF	; 255
    1f3e:	4f e7       	ldi	r20, 0x7F	; 127
    1f40:	57 e4       	ldi	r21, 0x47	; 71
    1f42:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    1f46:	18 16       	cp	r1, r24
    1f48:	4c f5       	brge	.+82     	; 0x1f9c <reset+0x56e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f4a:	6c a1       	ldd	r22, Y+36	; 0x24
    1f4c:	7d a1       	ldd	r23, Y+37	; 0x25
    1f4e:	8e a1       	ldd	r24, Y+38	; 0x26
    1f50:	9f a1       	ldd	r25, Y+39	; 0x27
    1f52:	20 e0       	ldi	r18, 0x00	; 0
    1f54:	30 e0       	ldi	r19, 0x00	; 0
    1f56:	40 e2       	ldi	r20, 0x20	; 32
    1f58:	51 e4       	ldi	r21, 0x41	; 65
    1f5a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    1f5e:	dc 01       	movw	r26, r24
    1f60:	cb 01       	movw	r24, r22
    1f62:	bc 01       	movw	r22, r24
    1f64:	cd 01       	movw	r24, r26
    1f66:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1f6a:	dc 01       	movw	r26, r24
    1f6c:	cb 01       	movw	r24, r22
    1f6e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f70:	8e 8f       	std	Y+30, r24	; 0x1e
    1f72:	0f c0       	rjmp	.+30     	; 0x1f92 <reset+0x564>
    1f74:	88 ec       	ldi	r24, 0xC8	; 200
    1f76:	90 e0       	ldi	r25, 0x00	; 0
    1f78:	9d 8f       	std	Y+29, r25	; 0x1d
    1f7a:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1f7c:	8c 8d       	ldd	r24, Y+28	; 0x1c
    1f7e:	9d 8d       	ldd	r25, Y+29	; 0x1d
    1f80:	01 97       	sbiw	r24, 0x01	; 1
    1f82:	f1 f7       	brne	.-4      	; 0x1f80 <reset+0x552>
    1f84:	9d 8f       	std	Y+29, r25	; 0x1d
    1f86:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f88:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f8a:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f8c:	01 97       	sbiw	r24, 0x01	; 1
    1f8e:	9f 8f       	std	Y+31, r25	; 0x1f
    1f90:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f92:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1f94:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1f96:	00 97       	sbiw	r24, 0x00	; 0
    1f98:	69 f7       	brne	.-38     	; 0x1f74 <reset+0x546>
    1f9a:	24 c0       	rjmp	.+72     	; 0x1fe4 <reset+0x5b6>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9c:	68 a1       	ldd	r22, Y+32	; 0x20
    1f9e:	79 a1       	ldd	r23, Y+33	; 0x21
    1fa0:	8a a1       	ldd	r24, Y+34	; 0x22
    1fa2:	9b a1       	ldd	r25, Y+35	; 0x23
    1fa4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1fa8:	dc 01       	movw	r26, r24
    1faa:	cb 01       	movw	r24, r22
    1fac:	9f 8f       	std	Y+31, r25	; 0x1f
    1fae:	8e 8f       	std	Y+30, r24	; 0x1e
    1fb0:	8e 8d       	ldd	r24, Y+30	; 0x1e
    1fb2:	9f 8d       	ldd	r25, Y+31	; 0x1f
    1fb4:	9b 8f       	std	Y+27, r25	; 0x1b
    1fb6:	8a 8f       	std	Y+26, r24	; 0x1a
    1fb8:	8a 8d       	ldd	r24, Y+26	; 0x1a
    1fba:	9b 8d       	ldd	r25, Y+27	; 0x1b
    1fbc:	01 97       	sbiw	r24, 0x01	; 1
    1fbe:	f1 f7       	brne	.-4      	; 0x1fbc <reset+0x58e>
    1fc0:	9b 8f       	std	Y+27, r25	; 0x1b
    1fc2:	8a 8f       	std	Y+26, r24	; 0x1a
    1fc4:	0f c0       	rjmp	.+30     	; 0x1fe4 <reset+0x5b6>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    1fc6:	69 a5       	ldd	r22, Y+41	; 0x29
    1fc8:	7a a5       	ldd	r23, Y+42	; 0x2a
    1fca:	8b a5       	ldd	r24, Y+43	; 0x2b
    1fcc:	9c a5       	ldd	r25, Y+44	; 0x2c
    1fce:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    1fd2:	dc 01       	movw	r26, r24
    1fd4:	cb 01       	movw	r24, r22
    1fd6:	88 a7       	std	Y+40, r24	; 0x28
    1fd8:	88 a5       	ldd	r24, Y+40	; 0x28
    1fda:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    1fdc:	89 8d       	ldd	r24, Y+25	; 0x19
    1fde:	8a 95       	dec	r24
    1fe0:	f1 f7       	brne	.-4      	; 0x1fde <reset+0x5b0>
    1fe2:	89 8f       	std	Y+25, r24	; 0x19
    _delay_us(10);
    WriteByteSPI(0b01110000);	//radedrar alla irq i statusregistret (fÃ¶r att kunna lyssna igen)
    1fe4:	80 e7       	ldi	r24, 0x70	; 112
    1fe6:	0e 94 f9 00 	call	0x1f2	; 0x1f2 <WriteByteSPI>
    1fea:	80 e0       	ldi	r24, 0x00	; 0
    1fec:	90 e0       	ldi	r25, 0x00	; 0
    1fee:	a0 e2       	ldi	r26, 0x20	; 32
    1ff0:	b1 e4       	ldi	r27, 0x41	; 65
    1ff2:	8d 8b       	std	Y+21, r24	; 0x15
    1ff4:	9e 8b       	std	Y+22, r25	; 0x16
    1ff6:	af 8b       	std	Y+23, r26	; 0x17
    1ff8:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    1ffa:	6d 89       	ldd	r22, Y+21	; 0x15
    1ffc:	7e 89       	ldd	r23, Y+22	; 0x16
    1ffe:	8f 89       	ldd	r24, Y+23	; 0x17
    2000:	98 8d       	ldd	r25, Y+24	; 0x18
    2002:	2b ea       	ldi	r18, 0xAB	; 171
    2004:	3a ea       	ldi	r19, 0xAA	; 170
    2006:	4a e2       	ldi	r20, 0x2A	; 42
    2008:	50 e4       	ldi	r21, 0x40	; 64
    200a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    200e:	dc 01       	movw	r26, r24
    2010:	cb 01       	movw	r24, r22
    2012:	89 8b       	std	Y+17, r24	; 0x11
    2014:	9a 8b       	std	Y+18, r25	; 0x12
    2016:	ab 8b       	std	Y+19, r26	; 0x13
    2018:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
    201a:	69 89       	ldd	r22, Y+17	; 0x11
    201c:	7a 89       	ldd	r23, Y+18	; 0x12
    201e:	8b 89       	ldd	r24, Y+19	; 0x13
    2020:	9c 89       	ldd	r25, Y+20	; 0x14
    2022:	20 e0       	ldi	r18, 0x00	; 0
    2024:	30 e0       	ldi	r19, 0x00	; 0
    2026:	40 e8       	ldi	r20, 0x80	; 128
    2028:	5f e3       	ldi	r21, 0x3F	; 63
    202a:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    202e:	88 23       	and	r24, r24
    2030:	1c f4       	brge	.+6      	; 0x2038 <reset+0x60a>
		__ticks = 1;
    2032:	81 e0       	ldi	r24, 0x01	; 1
    2034:	88 8b       	std	Y+16, r24	; 0x10
    2036:	91 c0       	rjmp	.+290    	; 0x215a <reset+0x72c>
	else if (__tmp > 255)
    2038:	69 89       	ldd	r22, Y+17	; 0x11
    203a:	7a 89       	ldd	r23, Y+18	; 0x12
    203c:	8b 89       	ldd	r24, Y+19	; 0x13
    203e:	9c 89       	ldd	r25, Y+20	; 0x14
    2040:	20 e0       	ldi	r18, 0x00	; 0
    2042:	30 e0       	ldi	r19, 0x00	; 0
    2044:	4f e7       	ldi	r20, 0x7F	; 127
    2046:	53 e4       	ldi	r21, 0x43	; 67
    2048:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    204c:	18 16       	cp	r1, r24
    204e:	0c f0       	brlt	.+2      	; 0x2052 <reset+0x624>
    2050:	7b c0       	rjmp	.+246    	; 0x2148 <reset+0x71a>
	{
		_delay_ms(__us / 1000.0);
    2052:	6d 89       	ldd	r22, Y+21	; 0x15
    2054:	7e 89       	ldd	r23, Y+22	; 0x16
    2056:	8f 89       	ldd	r24, Y+23	; 0x17
    2058:	98 8d       	ldd	r25, Y+24	; 0x18
    205a:	20 e0       	ldi	r18, 0x00	; 0
    205c:	30 e0       	ldi	r19, 0x00	; 0
    205e:	4a e7       	ldi	r20, 0x7A	; 122
    2060:	54 e4       	ldi	r21, 0x44	; 68
    2062:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
    2066:	dc 01       	movw	r26, r24
    2068:	cb 01       	movw	r24, r22
    206a:	8c 87       	std	Y+12, r24	; 0x0c
    206c:	9d 87       	std	Y+13, r25	; 0x0d
    206e:	ae 87       	std	Y+14, r26	; 0x0e
    2070:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2072:	6c 85       	ldd	r22, Y+12	; 0x0c
    2074:	7d 85       	ldd	r23, Y+13	; 0x0d
    2076:	8e 85       	ldd	r24, Y+14	; 0x0e
    2078:	9f 85       	ldd	r25, Y+15	; 0x0f
    207a:	20 e0       	ldi	r18, 0x00	; 0
    207c:	30 e0       	ldi	r19, 0x00	; 0
    207e:	4a ef       	ldi	r20, 0xFA	; 250
    2080:	54 e4       	ldi	r21, 0x44	; 68
    2082:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    2086:	dc 01       	movw	r26, r24
    2088:	cb 01       	movw	r24, r22
    208a:	88 87       	std	Y+8, r24	; 0x08
    208c:	99 87       	std	Y+9, r25	; 0x09
    208e:	aa 87       	std	Y+10, r26	; 0x0a
    2090:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
    2092:	68 85       	ldd	r22, Y+8	; 0x08
    2094:	79 85       	ldd	r23, Y+9	; 0x09
    2096:	8a 85       	ldd	r24, Y+10	; 0x0a
    2098:	9b 85       	ldd	r25, Y+11	; 0x0b
    209a:	20 e0       	ldi	r18, 0x00	; 0
    209c:	30 e0       	ldi	r19, 0x00	; 0
    209e:	40 e8       	ldi	r20, 0x80	; 128
    20a0:	5f e3       	ldi	r21, 0x3F	; 63
    20a2:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    20a6:	88 23       	and	r24, r24
    20a8:	2c f4       	brge	.+10     	; 0x20b4 <reset+0x686>
		__ticks = 1;
    20aa:	81 e0       	ldi	r24, 0x01	; 1
    20ac:	90 e0       	ldi	r25, 0x00	; 0
    20ae:	9f 83       	std	Y+7, r25	; 0x07
    20b0:	8e 83       	std	Y+6, r24	; 0x06
    20b2:	3f c0       	rjmp	.+126    	; 0x2132 <reset+0x704>
	else if (__tmp > 65535)
    20b4:	68 85       	ldd	r22, Y+8	; 0x08
    20b6:	79 85       	ldd	r23, Y+9	; 0x09
    20b8:	8a 85       	ldd	r24, Y+10	; 0x0a
    20ba:	9b 85       	ldd	r25, Y+11	; 0x0b
    20bc:	20 e0       	ldi	r18, 0x00	; 0
    20be:	3f ef       	ldi	r19, 0xFF	; 255
    20c0:	4f e7       	ldi	r20, 0x7F	; 127
    20c2:	57 e4       	ldi	r21, 0x47	; 71
    20c4:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    20c8:	18 16       	cp	r1, r24
    20ca:	4c f5       	brge	.+82     	; 0x211e <reset+0x6f0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    20cc:	6c 85       	ldd	r22, Y+12	; 0x0c
    20ce:	7d 85       	ldd	r23, Y+13	; 0x0d
    20d0:	8e 85       	ldd	r24, Y+14	; 0x0e
    20d2:	9f 85       	ldd	r25, Y+15	; 0x0f
    20d4:	20 e0       	ldi	r18, 0x00	; 0
    20d6:	30 e0       	ldi	r19, 0x00	; 0
    20d8:	40 e2       	ldi	r20, 0x20	; 32
    20da:	51 e4       	ldi	r21, 0x41	; 65
    20dc:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    20e0:	dc 01       	movw	r26, r24
    20e2:	cb 01       	movw	r24, r22
    20e4:	bc 01       	movw	r22, r24
    20e6:	cd 01       	movw	r24, r26
    20e8:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    20ec:	dc 01       	movw	r26, r24
    20ee:	cb 01       	movw	r24, r22
    20f0:	9f 83       	std	Y+7, r25	; 0x07
    20f2:	8e 83       	std	Y+6, r24	; 0x06
    20f4:	0f c0       	rjmp	.+30     	; 0x2114 <reset+0x6e6>
    20f6:	88 ec       	ldi	r24, 0xC8	; 200
    20f8:	90 e0       	ldi	r25, 0x00	; 0
    20fa:	9d 83       	std	Y+5, r25	; 0x05
    20fc:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    20fe:	8c 81       	ldd	r24, Y+4	; 0x04
    2100:	9d 81       	ldd	r25, Y+5	; 0x05
    2102:	01 97       	sbiw	r24, 0x01	; 1
    2104:	f1 f7       	brne	.-4      	; 0x2102 <reset+0x6d4>
    2106:	9d 83       	std	Y+5, r25	; 0x05
    2108:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    210a:	8e 81       	ldd	r24, Y+6	; 0x06
    210c:	9f 81       	ldd	r25, Y+7	; 0x07
    210e:	01 97       	sbiw	r24, 0x01	; 1
    2110:	9f 83       	std	Y+7, r25	; 0x07
    2112:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2114:	8e 81       	ldd	r24, Y+6	; 0x06
    2116:	9f 81       	ldd	r25, Y+7	; 0x07
    2118:	00 97       	sbiw	r24, 0x00	; 0
    211a:	69 f7       	brne	.-38     	; 0x20f6 <reset+0x6c8>
    211c:	24 c0       	rjmp	.+72     	; 0x2166 <reset+0x738>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    211e:	68 85       	ldd	r22, Y+8	; 0x08
    2120:	79 85       	ldd	r23, Y+9	; 0x09
    2122:	8a 85       	ldd	r24, Y+10	; 0x0a
    2124:	9b 85       	ldd	r25, Y+11	; 0x0b
    2126:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    212a:	dc 01       	movw	r26, r24
    212c:	cb 01       	movw	r24, r22
    212e:	9f 83       	std	Y+7, r25	; 0x07
    2130:	8e 83       	std	Y+6, r24	; 0x06
    2132:	8e 81       	ldd	r24, Y+6	; 0x06
    2134:	9f 81       	ldd	r25, Y+7	; 0x07
    2136:	9b 83       	std	Y+3, r25	; 0x03
    2138:	8a 83       	std	Y+2, r24	; 0x02
    213a:	8a 81       	ldd	r24, Y+2	; 0x02
    213c:	9b 81       	ldd	r25, Y+3	; 0x03
    213e:	01 97       	sbiw	r24, 0x01	; 1
    2140:	f1 f7       	brne	.-4      	; 0x213e <reset+0x710>
    2142:	9b 83       	std	Y+3, r25	; 0x03
    2144:	8a 83       	std	Y+2, r24	; 0x02
    2146:	0f c0       	rjmp	.+30     	; 0x2166 <reset+0x738>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2148:	69 89       	ldd	r22, Y+17	; 0x11
    214a:	7a 89       	ldd	r23, Y+18	; 0x12
    214c:	8b 89       	ldd	r24, Y+19	; 0x13
    214e:	9c 89       	ldd	r25, Y+20	; 0x14
    2150:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    2154:	dc 01       	movw	r26, r24
    2156:	cb 01       	movw	r24, r22
    2158:	88 8b       	std	Y+16, r24	; 0x10
    215a:	88 89       	ldd	r24, Y+16	; 0x10
    215c:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    215e:	89 81       	ldd	r24, Y+1	; 0x01
    2160:	8a 95       	dec	r24
    2162:	f1 f7       	brne	.-4      	; 0x2160 <reset+0x732>
    2164:	89 83       	std	Y+1, r24	; 0x01
    _delay_us(10);
    PORTB|=_BV(2);	//CSN IR_High
    2166:	a5 e2       	ldi	r26, 0x25	; 37
    2168:	b0 e0       	ldi	r27, 0x00	; 0
    216a:	e5 e2       	ldi	r30, 0x25	; 37
    216c:	f0 e0       	ldi	r31, 0x00	; 0
    216e:	80 81       	ld	r24, Z
    2170:	84 60       	ori	r24, 0x04	; 4
    2172:	8c 93       	st	X, r24
}
    2174:	c0 5a       	subi	r28, 0xA0	; 160
    2176:	df 4f       	sbci	r29, 0xFF	; 255
    2178:	0f b6       	in	r0, 0x3f	; 63
    217a:	f8 94       	cli
    217c:	de bf       	out	0x3e, r29	; 62
    217e:	0f be       	out	0x3f, r0	; 63
    2180:	cd bf       	out	0x3d, r28	; 61
    2182:	cf 91       	pop	r28
    2184:	df 91       	pop	r29
    2186:	1f 91       	pop	r17
    2188:	0f 91       	pop	r16
    218a:	08 95       	ret

0000218c <receive_payload>:

//Reciverfunktioner
/*********************Reciverfunktioner********************************/
//Ã¶ppnar Recivern och "Lyssnar" i 1s
void receive_payload(void)
{
    218c:	df 93       	push	r29
    218e:	cf 93       	push	r28
    2190:	cd b7       	in	r28, 0x3d	; 61
    2192:	de b7       	in	r29, 0x3e	; 62
    2194:	2e 97       	sbiw	r28, 0x0e	; 14
    2196:	0f b6       	in	r0, 0x3f	; 63
    2198:	f8 94       	cli
    219a:	de bf       	out	0x3e, r29	; 62
    219c:	0f be       	out	0x3f, r0	; 63
    219e:	cd bf       	out	0x3d, r28	; 61
    sei();		//Enable global interrupt
    21a0:	78 94       	sei

    PORTB|=_BV(1);	//CE IR_High = "Lyssnar"
    21a2:	a5 e2       	ldi	r26, 0x25	; 37
    21a4:	b0 e0       	ldi	r27, 0x00	; 0
    21a6:	e5 e2       	ldi	r30, 0x25	; 37
    21a8:	f0 e0       	ldi	r31, 0x00	; 0
    21aa:	80 81       	ld	r24, Z
    21ac:	82 60       	ori	r24, 0x02	; 2
    21ae:	8c 93       	st	X, r24
    21b0:	80 e0       	ldi	r24, 0x00	; 0
    21b2:	90 e0       	ldi	r25, 0x00	; 0
    21b4:	aa e7       	ldi	r26, 0x7A	; 122
    21b6:	b4 e4       	ldi	r27, 0x44	; 68
    21b8:	8b 87       	std	Y+11, r24	; 0x0b
    21ba:	9c 87       	std	Y+12, r25	; 0x0c
    21bc:	ad 87       	std	Y+13, r26	; 0x0d
    21be:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    21c0:	6b 85       	ldd	r22, Y+11	; 0x0b
    21c2:	7c 85       	ldd	r23, Y+12	; 0x0c
    21c4:	8d 85       	ldd	r24, Y+13	; 0x0d
    21c6:	9e 85       	ldd	r25, Y+14	; 0x0e
    21c8:	20 e0       	ldi	r18, 0x00	; 0
    21ca:	30 e0       	ldi	r19, 0x00	; 0
    21cc:	4a ef       	ldi	r20, 0xFA	; 250
    21ce:	54 e4       	ldi	r21, 0x44	; 68
    21d0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    21d4:	dc 01       	movw	r26, r24
    21d6:	cb 01       	movw	r24, r22
    21d8:	8f 83       	std	Y+7, r24	; 0x07
    21da:	98 87       	std	Y+8, r25	; 0x08
    21dc:	a9 87       	std	Y+9, r26	; 0x09
    21de:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    21e0:	6f 81       	ldd	r22, Y+7	; 0x07
    21e2:	78 85       	ldd	r23, Y+8	; 0x08
    21e4:	89 85       	ldd	r24, Y+9	; 0x09
    21e6:	9a 85       	ldd	r25, Y+10	; 0x0a
    21e8:	20 e0       	ldi	r18, 0x00	; 0
    21ea:	30 e0       	ldi	r19, 0x00	; 0
    21ec:	40 e8       	ldi	r20, 0x80	; 128
    21ee:	5f e3       	ldi	r21, 0x3F	; 63
    21f0:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    21f4:	88 23       	and	r24, r24
    21f6:	2c f4       	brge	.+10     	; 0x2202 <receive_payload+0x76>
		__ticks = 1;
    21f8:	81 e0       	ldi	r24, 0x01	; 1
    21fa:	90 e0       	ldi	r25, 0x00	; 0
    21fc:	9e 83       	std	Y+6, r25	; 0x06
    21fe:	8d 83       	std	Y+5, r24	; 0x05
    2200:	3f c0       	rjmp	.+126    	; 0x2280 <receive_payload+0xf4>
	else if (__tmp > 65535)
    2202:	6f 81       	ldd	r22, Y+7	; 0x07
    2204:	78 85       	ldd	r23, Y+8	; 0x08
    2206:	89 85       	ldd	r24, Y+9	; 0x09
    2208:	9a 85       	ldd	r25, Y+10	; 0x0a
    220a:	20 e0       	ldi	r18, 0x00	; 0
    220c:	3f ef       	ldi	r19, 0xFF	; 255
    220e:	4f e7       	ldi	r20, 0x7F	; 127
    2210:	57 e4       	ldi	r21, 0x47	; 71
    2212:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    2216:	18 16       	cp	r1, r24
    2218:	4c f5       	brge	.+82     	; 0x226c <receive_payload+0xe0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    221a:	6b 85       	ldd	r22, Y+11	; 0x0b
    221c:	7c 85       	ldd	r23, Y+12	; 0x0c
    221e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2220:	9e 85       	ldd	r25, Y+14	; 0x0e
    2222:	20 e0       	ldi	r18, 0x00	; 0
    2224:	30 e0       	ldi	r19, 0x00	; 0
    2226:	40 e2       	ldi	r20, 0x20	; 32
    2228:	51 e4       	ldi	r21, 0x41	; 65
    222a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    222e:	dc 01       	movw	r26, r24
    2230:	cb 01       	movw	r24, r22
    2232:	bc 01       	movw	r22, r24
    2234:	cd 01       	movw	r24, r26
    2236:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    223a:	dc 01       	movw	r26, r24
    223c:	cb 01       	movw	r24, r22
    223e:	9e 83       	std	Y+6, r25	; 0x06
    2240:	8d 83       	std	Y+5, r24	; 0x05
    2242:	0f c0       	rjmp	.+30     	; 0x2262 <receive_payload+0xd6>
    2244:	88 ec       	ldi	r24, 0xC8	; 200
    2246:	90 e0       	ldi	r25, 0x00	; 0
    2248:	9c 83       	std	Y+4, r25	; 0x04
    224a:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    224c:	8b 81       	ldd	r24, Y+3	; 0x03
    224e:	9c 81       	ldd	r25, Y+4	; 0x04
    2250:	01 97       	sbiw	r24, 0x01	; 1
    2252:	f1 f7       	brne	.-4      	; 0x2250 <receive_payload+0xc4>
    2254:	9c 83       	std	Y+4, r25	; 0x04
    2256:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2258:	8d 81       	ldd	r24, Y+5	; 0x05
    225a:	9e 81       	ldd	r25, Y+6	; 0x06
    225c:	01 97       	sbiw	r24, 0x01	; 1
    225e:	9e 83       	std	Y+6, r25	; 0x06
    2260:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2262:	8d 81       	ldd	r24, Y+5	; 0x05
    2264:	9e 81       	ldd	r25, Y+6	; 0x06
    2266:	00 97       	sbiw	r24, 0x00	; 0
    2268:	69 f7       	brne	.-38     	; 0x2244 <receive_payload+0xb8>
    226a:	14 c0       	rjmp	.+40     	; 0x2294 <receive_payload+0x108>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    226c:	6f 81       	ldd	r22, Y+7	; 0x07
    226e:	78 85       	ldd	r23, Y+8	; 0x08
    2270:	89 85       	ldd	r24, Y+9	; 0x09
    2272:	9a 85       	ldd	r25, Y+10	; 0x0a
    2274:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    2278:	dc 01       	movw	r26, r24
    227a:	cb 01       	movw	r24, r22
    227c:	9e 83       	std	Y+6, r25	; 0x06
    227e:	8d 83       	std	Y+5, r24	; 0x05
    2280:	8d 81       	ldd	r24, Y+5	; 0x05
    2282:	9e 81       	ldd	r25, Y+6	; 0x06
    2284:	9a 83       	std	Y+2, r25	; 0x02
    2286:	89 83       	std	Y+1, r24	; 0x01
    2288:	89 81       	ldd	r24, Y+1	; 0x01
    228a:	9a 81       	ldd	r25, Y+2	; 0x02
    228c:	01 97       	sbiw	r24, 0x01	; 1
    228e:	f1 f7       	brne	.-4      	; 0x228c <receive_payload+0x100>
    2290:	9a 83       	std	Y+2, r25	; 0x02
    2292:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);	//lyssnar i 1s och om mottaget gÃ¥r int0-interruptvektor igÃ¥ng
    PORTB&=~_BV(1); //ce lÃ¥g igen -sluta lyssna
    2294:	a5 e2       	ldi	r26, 0x25	; 37
    2296:	b0 e0       	ldi	r27, 0x00	; 0
    2298:	e5 e2       	ldi	r30, 0x25	; 37
    229a:	f0 e0       	ldi	r31, 0x00	; 0
    229c:	80 81       	ld	r24, Z
    229e:	8d 7f       	andi	r24, 0xFD	; 253
    22a0:	8c 93       	st	X, r24

    cli();	//Disable global interrupt
    22a2:	f8 94       	cli
}
    22a4:	2e 96       	adiw	r28, 0x0e	; 14
    22a6:	0f b6       	in	r0, 0x3f	; 63
    22a8:	f8 94       	cli
    22aa:	de bf       	out	0x3e, r29	; 62
    22ac:	0f be       	out	0x3f, r0	; 63
    22ae:	cd bf       	out	0x3d, r28	; 61
    22b0:	cf 91       	pop	r28
    22b2:	df 91       	pop	r29
    22b4:	08 95       	ret

000022b6 <transmit_payload>:

//SÃ¤nd data
void transmit_payload(uint8_t * W_buff)
{
    22b6:	df 93       	push	r29
    22b8:	cf 93       	push	r28
    22ba:	cd b7       	in	r28, 0x3d	; 61
    22bc:	de b7       	in	r29, 0x3e	; 62
    22be:	e6 97       	sbiw	r28, 0x36	; 54
    22c0:	0f b6       	in	r0, 0x3f	; 63
    22c2:	f8 94       	cli
    22c4:	de bf       	out	0x3e, r29	; 62
    22c6:	0f be       	out	0x3f, r0	; 63
    22c8:	cd bf       	out	0x3d, r28	; 61
    22ca:	9e ab       	std	Y+54, r25	; 0x36
    22cc:	8d ab       	std	Y+53, r24	; 0x35
    WriteToNrf('R', FLUSH_TX, W_buff, 0); //skickar 0xE1 som flushar registret fÃ¶r att gammal data inte ska ligga Ã¥ vÃ¤nta pÃ¥ att bli skickad nÃ¤r man vill skicka ny data! R stÃ¥r fÃ¶r att W_REGISTER inte ska lÃ¤ggas till. skickar inget kommando efterrÃ¥t eftersom det inte behÃ¶vs! W_buff[]stÃ¥r bara dÃ¤r fÃ¶r att en array mÃ¥ste finnas dÃ¤r...
    22ce:	2d a9       	ldd	r18, Y+53	; 0x35
    22d0:	3e a9       	ldd	r19, Y+54	; 0x36
    22d2:	82 e5       	ldi	r24, 0x52	; 82
    22d4:	61 ee       	ldi	r22, 0xE1	; 225
    22d6:	a9 01       	movw	r20, r18
    22d8:	20 e0       	ldi	r18, 0x00	; 0
    22da:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    WriteToNrf('R', W_TX_PAYLOAD, W_buff, dataLen);	//skickar datan i W_buff till nrf-en (obs gÃ¥r ej att lÃ¤sa w_tx_payload-registret!!!)
    22de:	2d a9       	ldd	r18, Y+53	; 0x35
    22e0:	3e a9       	ldd	r19, Y+54	; 0x36
    22e2:	82 e5       	ldi	r24, 0x52	; 82
    22e4:	60 ea       	ldi	r22, 0xA0	; 160
    22e6:	a9 01       	movw	r20, r18
    22e8:	23 e0       	ldi	r18, 0x03	; 3
    22ea:	0e 94 0c 05 	call	0xa18	; 0xa18 <WriteToNrf>

    sei();	//enable global interrupt- redan pÃ¥!
    22ee:	78 94       	sei
    22f0:	80 e0       	ldi	r24, 0x00	; 0
    22f2:	90 e0       	ldi	r25, 0x00	; 0
    22f4:	a0 e2       	ldi	r26, 0x20	; 32
    22f6:	b1 e4       	ldi	r27, 0x41	; 65
    22f8:	89 ab       	std	Y+49, r24	; 0x31
    22fa:	9a ab       	std	Y+50, r25	; 0x32
    22fc:	ab ab       	std	Y+51, r26	; 0x33
    22fe:	bc ab       	std	Y+52, r27	; 0x34
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2300:	69 a9       	ldd	r22, Y+49	; 0x31
    2302:	7a a9       	ldd	r23, Y+50	; 0x32
    2304:	8b a9       	ldd	r24, Y+51	; 0x33
    2306:	9c a9       	ldd	r25, Y+52	; 0x34
    2308:	20 e0       	ldi	r18, 0x00	; 0
    230a:	30 e0       	ldi	r19, 0x00	; 0
    230c:	4a ef       	ldi	r20, 0xFA	; 250
    230e:	54 e4       	ldi	r21, 0x44	; 68
    2310:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    2314:	dc 01       	movw	r26, r24
    2316:	cb 01       	movw	r24, r22
    2318:	8d a7       	std	Y+45, r24	; 0x2d
    231a:	9e a7       	std	Y+46, r25	; 0x2e
    231c:	af a7       	std	Y+47, r26	; 0x2f
    231e:	b8 ab       	std	Y+48, r27	; 0x30
	if (__tmp < 1.0)
    2320:	6d a5       	ldd	r22, Y+45	; 0x2d
    2322:	7e a5       	ldd	r23, Y+46	; 0x2e
    2324:	8f a5       	ldd	r24, Y+47	; 0x2f
    2326:	98 a9       	ldd	r25, Y+48	; 0x30
    2328:	20 e0       	ldi	r18, 0x00	; 0
    232a:	30 e0       	ldi	r19, 0x00	; 0
    232c:	40 e8       	ldi	r20, 0x80	; 128
    232e:	5f e3       	ldi	r21, 0x3F	; 63
    2330:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    2334:	88 23       	and	r24, r24
    2336:	2c f4       	brge	.+10     	; 0x2342 <transmit_payload+0x8c>
		__ticks = 1;
    2338:	81 e0       	ldi	r24, 0x01	; 1
    233a:	90 e0       	ldi	r25, 0x00	; 0
    233c:	9c a7       	std	Y+44, r25	; 0x2c
    233e:	8b a7       	std	Y+43, r24	; 0x2b
    2340:	3f c0       	rjmp	.+126    	; 0x23c0 <transmit_payload+0x10a>
	else if (__tmp > 65535)
    2342:	6d a5       	ldd	r22, Y+45	; 0x2d
    2344:	7e a5       	ldd	r23, Y+46	; 0x2e
    2346:	8f a5       	ldd	r24, Y+47	; 0x2f
    2348:	98 a9       	ldd	r25, Y+48	; 0x30
    234a:	20 e0       	ldi	r18, 0x00	; 0
    234c:	3f ef       	ldi	r19, 0xFF	; 255
    234e:	4f e7       	ldi	r20, 0x7F	; 127
    2350:	57 e4       	ldi	r21, 0x47	; 71
    2352:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    2356:	18 16       	cp	r1, r24
    2358:	4c f5       	brge	.+82     	; 0x23ac <transmit_payload+0xf6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    235a:	69 a9       	ldd	r22, Y+49	; 0x31
    235c:	7a a9       	ldd	r23, Y+50	; 0x32
    235e:	8b a9       	ldd	r24, Y+51	; 0x33
    2360:	9c a9       	ldd	r25, Y+52	; 0x34
    2362:	20 e0       	ldi	r18, 0x00	; 0
    2364:	30 e0       	ldi	r19, 0x00	; 0
    2366:	40 e2       	ldi	r20, 0x20	; 32
    2368:	51 e4       	ldi	r21, 0x41	; 65
    236a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    236e:	dc 01       	movw	r26, r24
    2370:	cb 01       	movw	r24, r22
    2372:	bc 01       	movw	r22, r24
    2374:	cd 01       	movw	r24, r26
    2376:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    237a:	dc 01       	movw	r26, r24
    237c:	cb 01       	movw	r24, r22
    237e:	9c a7       	std	Y+44, r25	; 0x2c
    2380:	8b a7       	std	Y+43, r24	; 0x2b
    2382:	0f c0       	rjmp	.+30     	; 0x23a2 <transmit_payload+0xec>
    2384:	88 ec       	ldi	r24, 0xC8	; 200
    2386:	90 e0       	ldi	r25, 0x00	; 0
    2388:	9a a7       	std	Y+42, r25	; 0x2a
    238a:	89 a7       	std	Y+41, r24	; 0x29
    238c:	89 a5       	ldd	r24, Y+41	; 0x29
    238e:	9a a5       	ldd	r25, Y+42	; 0x2a
    2390:	01 97       	sbiw	r24, 0x01	; 1
    2392:	f1 f7       	brne	.-4      	; 0x2390 <transmit_payload+0xda>
    2394:	9a a7       	std	Y+42, r25	; 0x2a
    2396:	89 a7       	std	Y+41, r24	; 0x29
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2398:	8b a5       	ldd	r24, Y+43	; 0x2b
    239a:	9c a5       	ldd	r25, Y+44	; 0x2c
    239c:	01 97       	sbiw	r24, 0x01	; 1
    239e:	9c a7       	std	Y+44, r25	; 0x2c
    23a0:	8b a7       	std	Y+43, r24	; 0x2b
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    23a2:	8b a5       	ldd	r24, Y+43	; 0x2b
    23a4:	9c a5       	ldd	r25, Y+44	; 0x2c
    23a6:	00 97       	sbiw	r24, 0x00	; 0
    23a8:	69 f7       	brne	.-38     	; 0x2384 <transmit_payload+0xce>
    23aa:	14 c0       	rjmp	.+40     	; 0x23d4 <transmit_payload+0x11e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    23ac:	6d a5       	ldd	r22, Y+45	; 0x2d
    23ae:	7e a5       	ldd	r23, Y+46	; 0x2e
    23b0:	8f a5       	ldd	r24, Y+47	; 0x2f
    23b2:	98 a9       	ldd	r25, Y+48	; 0x30
    23b4:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    23b8:	dc 01       	movw	r26, r24
    23ba:	cb 01       	movw	r24, r22
    23bc:	9c a7       	std	Y+44, r25	; 0x2c
    23be:	8b a7       	std	Y+43, r24	; 0x2b
    23c0:	8b a5       	ldd	r24, Y+43	; 0x2b
    23c2:	9c a5       	ldd	r25, Y+44	; 0x2c
    23c4:	98 a7       	std	Y+40, r25	; 0x28
    23c6:	8f a3       	std	Y+39, r24	; 0x27
    23c8:	8f a1       	ldd	r24, Y+39	; 0x27
    23ca:	98 a5       	ldd	r25, Y+40	; 0x28
    23cc:	01 97       	sbiw	r24, 0x01	; 1
    23ce:	f1 f7       	brne	.-4      	; 0x23cc <transmit_payload+0x116>
    23d0:	98 a7       	std	Y+40, r25	; 0x28
    23d2:	8f a3       	std	Y+39, r24	; 0x27
    //USART_Transmit(GetReg(STATUS));

    _delay_ms(10);		//behÃ¶ver det verkligen vara ms Ã¥ inte us??? JAAAAAA! annars funkar det inte!!!
    PORTB|=_BV(1);	//CE hÃ¶g=sÃ¤nd data	INT0 interruptet kÃ¶rs nÃ¤r sÃ¤ndningen lyckats och om EN_AA Ã¤r pÃ¥, ocksÃ¥ svaret frÃ¥n recivern Ã¤r mottagen
    23d4:	a5 e2       	ldi	r26, 0x25	; 37
    23d6:	b0 e0       	ldi	r27, 0x00	; 0
    23d8:	e5 e2       	ldi	r30, 0x25	; 37
    23da:	f0 e0       	ldi	r31, 0x00	; 0
    23dc:	80 81       	ld	r24, Z
    23de:	82 60       	ori	r24, 0x02	; 2
    23e0:	8c 93       	st	X, r24
    23e2:	80 e0       	ldi	r24, 0x00	; 0
    23e4:	90 e0       	ldi	r25, 0x00	; 0
    23e6:	a0 ea       	ldi	r26, 0xA0	; 160
    23e8:	b1 e4       	ldi	r27, 0x41	; 65
    23ea:	8b a3       	std	Y+35, r24	; 0x23
    23ec:	9c a3       	std	Y+36, r25	; 0x24
    23ee:	ad a3       	std	Y+37, r26	; 0x25
    23f0:	be a3       	std	Y+38, r27	; 0x26
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
    23f2:	6b a1       	ldd	r22, Y+35	; 0x23
    23f4:	7c a1       	ldd	r23, Y+36	; 0x24
    23f6:	8d a1       	ldd	r24, Y+37	; 0x25
    23f8:	9e a1       	ldd	r25, Y+38	; 0x26
    23fa:	2b ea       	ldi	r18, 0xAB	; 171
    23fc:	3a ea       	ldi	r19, 0xAA	; 170
    23fe:	4a e2       	ldi	r20, 0x2A	; 42
    2400:	50 e4       	ldi	r21, 0x40	; 64
    2402:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    2406:	dc 01       	movw	r26, r24
    2408:	cb 01       	movw	r24, r22
    240a:	8f 8f       	std	Y+31, r24	; 0x1f
    240c:	98 a3       	std	Y+32, r25	; 0x20
    240e:	a9 a3       	std	Y+33, r26	; 0x21
    2410:	ba a3       	std	Y+34, r27	; 0x22
	if (__tmp < 1.0)
    2412:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2414:	78 a1       	ldd	r23, Y+32	; 0x20
    2416:	89 a1       	ldd	r24, Y+33	; 0x21
    2418:	9a a1       	ldd	r25, Y+34	; 0x22
    241a:	20 e0       	ldi	r18, 0x00	; 0
    241c:	30 e0       	ldi	r19, 0x00	; 0
    241e:	40 e8       	ldi	r20, 0x80	; 128
    2420:	5f e3       	ldi	r21, 0x3F	; 63
    2422:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    2426:	88 23       	and	r24, r24
    2428:	1c f4       	brge	.+6      	; 0x2430 <transmit_payload+0x17a>
		__ticks = 1;
    242a:	81 e0       	ldi	r24, 0x01	; 1
    242c:	8e 8f       	std	Y+30, r24	; 0x1e
    242e:	91 c0       	rjmp	.+290    	; 0x2552 <transmit_payload+0x29c>
	else if (__tmp > 255)
    2430:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2432:	78 a1       	ldd	r23, Y+32	; 0x20
    2434:	89 a1       	ldd	r24, Y+33	; 0x21
    2436:	9a a1       	ldd	r25, Y+34	; 0x22
    2438:	20 e0       	ldi	r18, 0x00	; 0
    243a:	30 e0       	ldi	r19, 0x00	; 0
    243c:	4f e7       	ldi	r20, 0x7F	; 127
    243e:	53 e4       	ldi	r21, 0x43	; 67
    2440:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    2444:	18 16       	cp	r1, r24
    2446:	0c f0       	brlt	.+2      	; 0x244a <transmit_payload+0x194>
    2448:	7b c0       	rjmp	.+246    	; 0x2540 <transmit_payload+0x28a>
	{
		_delay_ms(__us / 1000.0);
    244a:	6b a1       	ldd	r22, Y+35	; 0x23
    244c:	7c a1       	ldd	r23, Y+36	; 0x24
    244e:	8d a1       	ldd	r24, Y+37	; 0x25
    2450:	9e a1       	ldd	r25, Y+38	; 0x26
    2452:	20 e0       	ldi	r18, 0x00	; 0
    2454:	30 e0       	ldi	r19, 0x00	; 0
    2456:	4a e7       	ldi	r20, 0x7A	; 122
    2458:	54 e4       	ldi	r21, 0x44	; 68
    245a:	0e 94 be 17 	call	0x2f7c	; 0x2f7c <__divsf3>
    245e:	dc 01       	movw	r26, r24
    2460:	cb 01       	movw	r24, r22
    2462:	8a 8f       	std	Y+26, r24	; 0x1a
    2464:	9b 8f       	std	Y+27, r25	; 0x1b
    2466:	ac 8f       	std	Y+28, r26	; 0x1c
    2468:	bd 8f       	std	Y+29, r27	; 0x1d
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    246a:	6a 8d       	ldd	r22, Y+26	; 0x1a
    246c:	7b 8d       	ldd	r23, Y+27	; 0x1b
    246e:	8c 8d       	ldd	r24, Y+28	; 0x1c
    2470:	9d 8d       	ldd	r25, Y+29	; 0x1d
    2472:	20 e0       	ldi	r18, 0x00	; 0
    2474:	30 e0       	ldi	r19, 0x00	; 0
    2476:	4a ef       	ldi	r20, 0xFA	; 250
    2478:	54 e4       	ldi	r21, 0x44	; 68
    247a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    247e:	dc 01       	movw	r26, r24
    2480:	cb 01       	movw	r24, r22
    2482:	8e 8b       	std	Y+22, r24	; 0x16
    2484:	9f 8b       	std	Y+23, r25	; 0x17
    2486:	a8 8f       	std	Y+24, r26	; 0x18
    2488:	b9 8f       	std	Y+25, r27	; 0x19
	if (__tmp < 1.0)
    248a:	6e 89       	ldd	r22, Y+22	; 0x16
    248c:	7f 89       	ldd	r23, Y+23	; 0x17
    248e:	88 8d       	ldd	r24, Y+24	; 0x18
    2490:	99 8d       	ldd	r25, Y+25	; 0x19
    2492:	20 e0       	ldi	r18, 0x00	; 0
    2494:	30 e0       	ldi	r19, 0x00	; 0
    2496:	40 e8       	ldi	r20, 0x80	; 128
    2498:	5f e3       	ldi	r21, 0x3F	; 63
    249a:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    249e:	88 23       	and	r24, r24
    24a0:	2c f4       	brge	.+10     	; 0x24ac <transmit_payload+0x1f6>
		__ticks = 1;
    24a2:	81 e0       	ldi	r24, 0x01	; 1
    24a4:	90 e0       	ldi	r25, 0x00	; 0
    24a6:	9d 8b       	std	Y+21, r25	; 0x15
    24a8:	8c 8b       	std	Y+20, r24	; 0x14
    24aa:	3f c0       	rjmp	.+126    	; 0x252a <transmit_payload+0x274>
	else if (__tmp > 65535)
    24ac:	6e 89       	ldd	r22, Y+22	; 0x16
    24ae:	7f 89       	ldd	r23, Y+23	; 0x17
    24b0:	88 8d       	ldd	r24, Y+24	; 0x18
    24b2:	99 8d       	ldd	r25, Y+25	; 0x19
    24b4:	20 e0       	ldi	r18, 0x00	; 0
    24b6:	3f ef       	ldi	r19, 0xFF	; 255
    24b8:	4f e7       	ldi	r20, 0x7F	; 127
    24ba:	57 e4       	ldi	r21, 0x47	; 71
    24bc:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    24c0:	18 16       	cp	r1, r24
    24c2:	4c f5       	brge	.+82     	; 0x2516 <transmit_payload+0x260>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    24c4:	6a 8d       	ldd	r22, Y+26	; 0x1a
    24c6:	7b 8d       	ldd	r23, Y+27	; 0x1b
    24c8:	8c 8d       	ldd	r24, Y+28	; 0x1c
    24ca:	9d 8d       	ldd	r25, Y+29	; 0x1d
    24cc:	20 e0       	ldi	r18, 0x00	; 0
    24ce:	30 e0       	ldi	r19, 0x00	; 0
    24d0:	40 e2       	ldi	r20, 0x20	; 32
    24d2:	51 e4       	ldi	r21, 0x41	; 65
    24d4:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    24d8:	dc 01       	movw	r26, r24
    24da:	cb 01       	movw	r24, r22
    24dc:	bc 01       	movw	r22, r24
    24de:	cd 01       	movw	r24, r26
    24e0:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    24e4:	dc 01       	movw	r26, r24
    24e6:	cb 01       	movw	r24, r22
    24e8:	9d 8b       	std	Y+21, r25	; 0x15
    24ea:	8c 8b       	std	Y+20, r24	; 0x14
    24ec:	0f c0       	rjmp	.+30     	; 0x250c <transmit_payload+0x256>
    24ee:	88 ec       	ldi	r24, 0xC8	; 200
    24f0:	90 e0       	ldi	r25, 0x00	; 0
    24f2:	9b 8b       	std	Y+19, r25	; 0x13
    24f4:	8a 8b       	std	Y+18, r24	; 0x12
    24f6:	8a 89       	ldd	r24, Y+18	; 0x12
    24f8:	9b 89       	ldd	r25, Y+19	; 0x13
    24fa:	01 97       	sbiw	r24, 0x01	; 1
    24fc:	f1 f7       	brne	.-4      	; 0x24fa <transmit_payload+0x244>
    24fe:	9b 8b       	std	Y+19, r25	; 0x13
    2500:	8a 8b       	std	Y+18, r24	; 0x12
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2502:	8c 89       	ldd	r24, Y+20	; 0x14
    2504:	9d 89       	ldd	r25, Y+21	; 0x15
    2506:	01 97       	sbiw	r24, 0x01	; 1
    2508:	9d 8b       	std	Y+21, r25	; 0x15
    250a:	8c 8b       	std	Y+20, r24	; 0x14
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    250c:	8c 89       	ldd	r24, Y+20	; 0x14
    250e:	9d 89       	ldd	r25, Y+21	; 0x15
    2510:	00 97       	sbiw	r24, 0x00	; 0
    2512:	69 f7       	brne	.-38     	; 0x24ee <transmit_payload+0x238>
    2514:	24 c0       	rjmp	.+72     	; 0x255e <transmit_payload+0x2a8>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2516:	6e 89       	ldd	r22, Y+22	; 0x16
    2518:	7f 89       	ldd	r23, Y+23	; 0x17
    251a:	88 8d       	ldd	r24, Y+24	; 0x18
    251c:	99 8d       	ldd	r25, Y+25	; 0x19
    251e:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    2522:	dc 01       	movw	r26, r24
    2524:	cb 01       	movw	r24, r22
    2526:	9d 8b       	std	Y+21, r25	; 0x15
    2528:	8c 8b       	std	Y+20, r24	; 0x14
    252a:	8c 89       	ldd	r24, Y+20	; 0x14
    252c:	9d 89       	ldd	r25, Y+21	; 0x15
    252e:	99 8b       	std	Y+17, r25	; 0x11
    2530:	88 8b       	std	Y+16, r24	; 0x10
    2532:	88 89       	ldd	r24, Y+16	; 0x10
    2534:	99 89       	ldd	r25, Y+17	; 0x11
    2536:	01 97       	sbiw	r24, 0x01	; 1
    2538:	f1 f7       	brne	.-4      	; 0x2536 <transmit_payload+0x280>
    253a:	99 8b       	std	Y+17, r25	; 0x11
    253c:	88 8b       	std	Y+16, r24	; 0x10
    253e:	0f c0       	rjmp	.+30     	; 0x255e <transmit_payload+0x2a8>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
    2540:	6f 8d       	ldd	r22, Y+31	; 0x1f
    2542:	78 a1       	ldd	r23, Y+32	; 0x20
    2544:	89 a1       	ldd	r24, Y+33	; 0x21
    2546:	9a a1       	ldd	r25, Y+34	; 0x22
    2548:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    254c:	dc 01       	movw	r26, r24
    254e:	cb 01       	movw	r24, r22
    2550:	8e 8f       	std	Y+30, r24	; 0x1e
    2552:	8e 8d       	ldd	r24, Y+30	; 0x1e
    2554:	8f 87       	std	Y+15, r24	; 0x0f
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
    2556:	8f 85       	ldd	r24, Y+15	; 0x0f
    2558:	8a 95       	dec	r24
    255a:	f1 f7       	brne	.-4      	; 0x2558 <transmit_payload+0x2a2>
    255c:	8f 87       	std	Y+15, r24	; 0x0f
    _delay_us(20);		//minst 10us!
    PORTB&=~_BV(1);	//CE lÃ¥g
    255e:	a5 e2       	ldi	r26, 0x25	; 37
    2560:	b0 e0       	ldi	r27, 0x00	; 0
    2562:	e5 e2       	ldi	r30, 0x25	; 37
    2564:	f0 e0       	ldi	r31, 0x00	; 0
    2566:	80 81       	ld	r24, Z
    2568:	8d 7f       	andi	r24, 0xFD	; 253
    256a:	8c 93       	st	X, r24
    256c:	80 e0       	ldi	r24, 0x00	; 0
    256e:	90 e0       	ldi	r25, 0x00	; 0
    2570:	a0 e2       	ldi	r26, 0x20	; 32
    2572:	b1 e4       	ldi	r27, 0x41	; 65
    2574:	8b 87       	std	Y+11, r24	; 0x0b
    2576:	9c 87       	std	Y+12, r25	; 0x0c
    2578:	ad 87       	std	Y+13, r26	; 0x0d
    257a:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    257c:	6b 85       	ldd	r22, Y+11	; 0x0b
    257e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2580:	8d 85       	ldd	r24, Y+13	; 0x0d
    2582:	9e 85       	ldd	r25, Y+14	; 0x0e
    2584:	20 e0       	ldi	r18, 0x00	; 0
    2586:	30 e0       	ldi	r19, 0x00	; 0
    2588:	4a ef       	ldi	r20, 0xFA	; 250
    258a:	54 e4       	ldi	r21, 0x44	; 68
    258c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    2590:	dc 01       	movw	r26, r24
    2592:	cb 01       	movw	r24, r22
    2594:	8f 83       	std	Y+7, r24	; 0x07
    2596:	98 87       	std	Y+8, r25	; 0x08
    2598:	a9 87       	std	Y+9, r26	; 0x09
    259a:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    259c:	6f 81       	ldd	r22, Y+7	; 0x07
    259e:	78 85       	ldd	r23, Y+8	; 0x08
    25a0:	89 85       	ldd	r24, Y+9	; 0x09
    25a2:	9a 85       	ldd	r25, Y+10	; 0x0a
    25a4:	20 e0       	ldi	r18, 0x00	; 0
    25a6:	30 e0       	ldi	r19, 0x00	; 0
    25a8:	40 e8       	ldi	r20, 0x80	; 128
    25aa:	5f e3       	ldi	r21, 0x3F	; 63
    25ac:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    25b0:	88 23       	and	r24, r24
    25b2:	2c f4       	brge	.+10     	; 0x25be <transmit_payload+0x308>
		__ticks = 1;
    25b4:	81 e0       	ldi	r24, 0x01	; 1
    25b6:	90 e0       	ldi	r25, 0x00	; 0
    25b8:	9e 83       	std	Y+6, r25	; 0x06
    25ba:	8d 83       	std	Y+5, r24	; 0x05
    25bc:	3f c0       	rjmp	.+126    	; 0x263c <transmit_payload+0x386>
	else if (__tmp > 65535)
    25be:	6f 81       	ldd	r22, Y+7	; 0x07
    25c0:	78 85       	ldd	r23, Y+8	; 0x08
    25c2:	89 85       	ldd	r24, Y+9	; 0x09
    25c4:	9a 85       	ldd	r25, Y+10	; 0x0a
    25c6:	20 e0       	ldi	r18, 0x00	; 0
    25c8:	3f ef       	ldi	r19, 0xFF	; 255
    25ca:	4f e7       	ldi	r20, 0x7F	; 127
    25cc:	57 e4       	ldi	r21, 0x47	; 71
    25ce:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    25d2:	18 16       	cp	r1, r24
    25d4:	4c f5       	brge	.+82     	; 0x2628 <transmit_payload+0x372>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    25d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    25d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    25da:	8d 85       	ldd	r24, Y+13	; 0x0d
    25dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    25de:	20 e0       	ldi	r18, 0x00	; 0
    25e0:	30 e0       	ldi	r19, 0x00	; 0
    25e2:	40 e2       	ldi	r20, 0x20	; 32
    25e4:	51 e4       	ldi	r21, 0x41	; 65
    25e6:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    25ea:	dc 01       	movw	r26, r24
    25ec:	cb 01       	movw	r24, r22
    25ee:	bc 01       	movw	r22, r24
    25f0:	cd 01       	movw	r24, r26
    25f2:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    25f6:	dc 01       	movw	r26, r24
    25f8:	cb 01       	movw	r24, r22
    25fa:	9e 83       	std	Y+6, r25	; 0x06
    25fc:	8d 83       	std	Y+5, r24	; 0x05
    25fe:	0f c0       	rjmp	.+30     	; 0x261e <transmit_payload+0x368>
    2600:	88 ec       	ldi	r24, 0xC8	; 200
    2602:	90 e0       	ldi	r25, 0x00	; 0
    2604:	9c 83       	std	Y+4, r25	; 0x04
    2606:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    2608:	8b 81       	ldd	r24, Y+3	; 0x03
    260a:	9c 81       	ldd	r25, Y+4	; 0x04
    260c:	01 97       	sbiw	r24, 0x01	; 1
    260e:	f1 f7       	brne	.-4      	; 0x260c <transmit_payload+0x356>
    2610:	9c 83       	std	Y+4, r25	; 0x04
    2612:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2614:	8d 81       	ldd	r24, Y+5	; 0x05
    2616:	9e 81       	ldd	r25, Y+6	; 0x06
    2618:	01 97       	sbiw	r24, 0x01	; 1
    261a:	9e 83       	std	Y+6, r25	; 0x06
    261c:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    261e:	8d 81       	ldd	r24, Y+5	; 0x05
    2620:	9e 81       	ldd	r25, Y+6	; 0x06
    2622:	00 97       	sbiw	r24, 0x00	; 0
    2624:	69 f7       	brne	.-38     	; 0x2600 <transmit_payload+0x34a>
    2626:	14 c0       	rjmp	.+40     	; 0x2650 <transmit_payload+0x39a>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2628:	6f 81       	ldd	r22, Y+7	; 0x07
    262a:	78 85       	ldd	r23, Y+8	; 0x08
    262c:	89 85       	ldd	r24, Y+9	; 0x09
    262e:	9a 85       	ldd	r25, Y+10	; 0x0a
    2630:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    2634:	dc 01       	movw	r26, r24
    2636:	cb 01       	movw	r24, r22
    2638:	9e 83       	std	Y+6, r25	; 0x06
    263a:	8d 83       	std	Y+5, r24	; 0x05
    263c:	8d 81       	ldd	r24, Y+5	; 0x05
    263e:	9e 81       	ldd	r25, Y+6	; 0x06
    2640:	9a 83       	std	Y+2, r25	; 0x02
    2642:	89 83       	std	Y+1, r24	; 0x01
    2644:	89 81       	ldd	r24, Y+1	; 0x01
    2646:	9a 81       	ldd	r25, Y+2	; 0x02
    2648:	01 97       	sbiw	r24, 0x01	; 1
    264a:	f1 f7       	brne	.-4      	; 0x2648 <transmit_payload+0x392>
    264c:	9a 83       	std	Y+2, r25	; 0x02
    264e:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(10);		//behÃ¶ver det verkligen vara ms Ã¥ inte us??? JAAAAAA! annars funkar det inte!!!

    //cli();	//Disable global interrupt... ajabaja, dÃ¥ stÃ¤ngs USART_RX-lyssningen av!

}
    2650:	e6 96       	adiw	r28, 0x36	; 54
    2652:	0f b6       	in	r0, 0x3f	; 63
    2654:	f8 94       	cli
    2656:	de bf       	out	0x3e, r29	; 62
    2658:	0f be       	out	0x3f, r0	; 63
    265a:	cd bf       	out	0x3d, r28	; 61
    265c:	cf 91       	pop	r28
    265e:	df 91       	pop	r29
    2660:	08 95       	ret

00002662 <main>:


/////////////////////////////////////////////////////

int main(void)
{
    2662:	df 93       	push	r29
    2664:	cf 93       	push	r28
    2666:	cd b7       	in	r28, 0x3d	; 61
    2668:	de b7       	in	r29, 0x3e	; 62
    266a:	2e 97       	sbiw	r28, 0x0e	; 14
    266c:	0f b6       	in	r0, 0x3f	; 63
    266e:	f8 94       	cli
    2670:	de bf       	out	0x3e, r29	; 62
    2672:	0f be       	out	0x3f, r0	; 63
    2674:	cd bf       	out	0x3d, r28	; 61
    clockprescale();
    2676:	0e 94 53 00 	call	0xa6	; 0xa6 <clockprescale>
    usart_init();
    267a:	0e 94 61 00 	call	0xc2	; 0xc2 <usart_init>
    InitSPI();
    267e:	0e 94 d6 00 	call	0x1ac	; 0x1ac <InitSPI>
    ioinit();
    2682:	0e 94 0f 01 	call	0x21e	; 0x21e <ioinit>
    INT0_interrupt_init();
    2686:	0e 94 1d 01 	call	0x23a	; 0x23a <INT0_interrupt_init>
    USART_interrupt_init();
    268a:	0e 94 40 01 	call	0x280	; 0x280 <USART_interrupt_init>

    nrf24L01_init();
    268e:	0e 94 54 0a 	call	0x14a8	; 0x14a8 <nrf24L01_init>

    PORTB|=_BV(0);		//FÃ¶r att se att dioden fungerar!
    2692:	a5 e2       	ldi	r26, 0x25	; 37
    2694:	b0 e0       	ldi	r27, 0x00	; 0
    2696:	e5 e2       	ldi	r30, 0x25	; 37
    2698:	f0 e0       	ldi	r31, 0x00	; 0
    269a:	80 81       	ld	r24, Z
    269c:	81 60       	ori	r24, 0x01	; 1
    269e:	8c 93       	st	X, r24
    26a0:	80 e0       	ldi	r24, 0x00	; 0
    26a2:	90 e0       	ldi	r25, 0x00	; 0
    26a4:	aa e7       	ldi	r26, 0x7A	; 122
    26a6:	b4 e4       	ldi	r27, 0x44	; 68
    26a8:	8b 87       	std	Y+11, r24	; 0x0b
    26aa:	9c 87       	std	Y+12, r25	; 0x0c
    26ac:	ad 87       	std	Y+13, r26	; 0x0d
    26ae:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    26b0:	6b 85       	ldd	r22, Y+11	; 0x0b
    26b2:	7c 85       	ldd	r23, Y+12	; 0x0c
    26b4:	8d 85       	ldd	r24, Y+13	; 0x0d
    26b6:	9e 85       	ldd	r25, Y+14	; 0x0e
    26b8:	20 e0       	ldi	r18, 0x00	; 0
    26ba:	30 e0       	ldi	r19, 0x00	; 0
    26bc:	4a ef       	ldi	r20, 0xFA	; 250
    26be:	54 e4       	ldi	r21, 0x44	; 68
    26c0:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    26c4:	dc 01       	movw	r26, r24
    26c6:	cb 01       	movw	r24, r22
    26c8:	8f 83       	std	Y+7, r24	; 0x07
    26ca:	98 87       	std	Y+8, r25	; 0x08
    26cc:	a9 87       	std	Y+9, r26	; 0x09
    26ce:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    26d0:	6f 81       	ldd	r22, Y+7	; 0x07
    26d2:	78 85       	ldd	r23, Y+8	; 0x08
    26d4:	89 85       	ldd	r24, Y+9	; 0x09
    26d6:	9a 85       	ldd	r25, Y+10	; 0x0a
    26d8:	20 e0       	ldi	r18, 0x00	; 0
    26da:	30 e0       	ldi	r19, 0x00	; 0
    26dc:	40 e8       	ldi	r20, 0x80	; 128
    26de:	5f e3       	ldi	r21, 0x3F	; 63
    26e0:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    26e4:	88 23       	and	r24, r24
    26e6:	2c f4       	brge	.+10     	; 0x26f2 <main+0x90>
		__ticks = 1;
    26e8:	81 e0       	ldi	r24, 0x01	; 1
    26ea:	90 e0       	ldi	r25, 0x00	; 0
    26ec:	9e 83       	std	Y+6, r25	; 0x06
    26ee:	8d 83       	std	Y+5, r24	; 0x05
    26f0:	3f c0       	rjmp	.+126    	; 0x2770 <main+0x10e>
	else if (__tmp > 65535)
    26f2:	6f 81       	ldd	r22, Y+7	; 0x07
    26f4:	78 85       	ldd	r23, Y+8	; 0x08
    26f6:	89 85       	ldd	r24, Y+9	; 0x09
    26f8:	9a 85       	ldd	r25, Y+10	; 0x0a
    26fa:	20 e0       	ldi	r18, 0x00	; 0
    26fc:	3f ef       	ldi	r19, 0xFF	; 255
    26fe:	4f e7       	ldi	r20, 0x7F	; 127
    2700:	57 e4       	ldi	r21, 0x47	; 71
    2702:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    2706:	18 16       	cp	r1, r24
    2708:	4c f5       	brge	.+82     	; 0x275c <main+0xfa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    270a:	6b 85       	ldd	r22, Y+11	; 0x0b
    270c:	7c 85       	ldd	r23, Y+12	; 0x0c
    270e:	8d 85       	ldd	r24, Y+13	; 0x0d
    2710:	9e 85       	ldd	r25, Y+14	; 0x0e
    2712:	20 e0       	ldi	r18, 0x00	; 0
    2714:	30 e0       	ldi	r19, 0x00	; 0
    2716:	40 e2       	ldi	r20, 0x20	; 32
    2718:	51 e4       	ldi	r21, 0x41	; 65
    271a:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    271e:	dc 01       	movw	r26, r24
    2720:	cb 01       	movw	r24, r22
    2722:	bc 01       	movw	r22, r24
    2724:	cd 01       	movw	r24, r26
    2726:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    272a:	dc 01       	movw	r26, r24
    272c:	cb 01       	movw	r24, r22
    272e:	9e 83       	std	Y+6, r25	; 0x06
    2730:	8d 83       	std	Y+5, r24	; 0x05
    2732:	0f c0       	rjmp	.+30     	; 0x2752 <main+0xf0>
    2734:	88 ec       	ldi	r24, 0xC8	; 200
    2736:	90 e0       	ldi	r25, 0x00	; 0
    2738:	9c 83       	std	Y+4, r25	; 0x04
    273a:	8b 83       	std	Y+3, r24	; 0x03
    273c:	8b 81       	ldd	r24, Y+3	; 0x03
    273e:	9c 81       	ldd	r25, Y+4	; 0x04
    2740:	01 97       	sbiw	r24, 0x01	; 1
    2742:	f1 f7       	brne	.-4      	; 0x2740 <main+0xde>
    2744:	9c 83       	std	Y+4, r25	; 0x04
    2746:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2748:	8d 81       	ldd	r24, Y+5	; 0x05
    274a:	9e 81       	ldd	r25, Y+6	; 0x06
    274c:	01 97       	sbiw	r24, 0x01	; 1
    274e:	9e 83       	std	Y+6, r25	; 0x06
    2750:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2752:	8d 81       	ldd	r24, Y+5	; 0x05
    2754:	9e 81       	ldd	r25, Y+6	; 0x06
    2756:	00 97       	sbiw	r24, 0x00	; 0
    2758:	69 f7       	brne	.-38     	; 0x2734 <main+0xd2>
    275a:	14 c0       	rjmp	.+40     	; 0x2784 <main+0x122>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    275c:	6f 81       	ldd	r22, Y+7	; 0x07
    275e:	78 85       	ldd	r23, Y+8	; 0x08
    2760:	89 85       	ldd	r24, Y+9	; 0x09
    2762:	9a 85       	ldd	r25, Y+10	; 0x0a
    2764:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    2768:	dc 01       	movw	r26, r24
    276a:	cb 01       	movw	r24, r22
    276c:	9e 83       	std	Y+6, r25	; 0x06
    276e:	8d 83       	std	Y+5, r24	; 0x05
    2770:	8d 81       	ldd	r24, Y+5	; 0x05
    2772:	9e 81       	ldd	r25, Y+6	; 0x06
    2774:	9a 83       	std	Y+2, r25	; 0x02
    2776:	89 83       	std	Y+1, r24	; 0x01
    2778:	89 81       	ldd	r24, Y+1	; 0x01
    277a:	9a 81       	ldd	r25, Y+2	; 0x02
    277c:	01 97       	sbiw	r24, 0x01	; 1
    277e:	f1 f7       	brne	.-4      	; 0x277c <main+0x11a>
    2780:	9a 83       	std	Y+2, r25	; 0x02
    2782:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(1000);
    PORTB&=~_BV(0);
    2784:	a5 e2       	ldi	r26, 0x25	; 37
    2786:	b0 e0       	ldi	r27, 0x00	; 0
    2788:	e5 e2       	ldi	r30, 0x25	; 37
    278a:	f0 e0       	ldi	r31, 0x00	; 0
    278c:	80 81       	ld	r24, Z
    278e:	8e 7f       	andi	r24, 0xFE	; 254
    2790:	8c 93       	st	X, r24
    2792:	ff cf       	rjmp	.-2      	; 0x2792 <main+0x130>

00002794 <__vector_1>:




ISR(INT0_vect)	//vektorn som gÃ¥r igÃ¥ng nÃ¤r transmit_payload lyckats sÃ¤nda eller nÃ¤r receive_payload fÃ¥tt data OBS: dÃ¥ Mask_Max_rt Ã¤r satt i config registret sÃ¥ gÃ¥r den inte igÃ¥ng nÃ¤r MAX_RT Ã¤r uppnÃ¥d Ã¥ sÃ¤ndninge nmisslyckats!
{
    2794:	1f 92       	push	r1
    2796:	0f 92       	push	r0
    2798:	0f b6       	in	r0, 0x3f	; 63
    279a:	0f 92       	push	r0
    279c:	11 24       	eor	r1, r1
    279e:	2f 93       	push	r18
    27a0:	3f 93       	push	r19
    27a2:	4f 93       	push	r20
    27a4:	5f 93       	push	r21
    27a6:	6f 93       	push	r22
    27a8:	7f 93       	push	r23
    27aa:	8f 93       	push	r24
    27ac:	9f 93       	push	r25
    27ae:	af 93       	push	r26
    27b0:	bf 93       	push	r27
    27b2:	ef 93       	push	r30
    27b4:	ff 93       	push	r31
    27b6:	df 93       	push	r29
    27b8:	cf 93       	push	r28
    27ba:	cd b7       	in	r28, 0x3d	; 61
    27bc:	de b7       	in	r29, 0x3e	; 62
    27be:	2e 97       	sbiw	r28, 0x0e	; 14
    27c0:	de bf       	out	0x3e, r29	; 62
    27c2:	cd bf       	out	0x3d, r28	; 61
    cli();	//Disable global interrupt
    27c4:	f8 94       	cli
    PORTB&=~_BV(1);		//ce lÃ¥g igen -sluta lyssna/sÃ¤nda
    27c6:	a5 e2       	ldi	r26, 0x25	; 37
    27c8:	b0 e0       	ldi	r27, 0x00	; 0
    27ca:	e5 e2       	ldi	r30, 0x25	; 37
    27cc:	f0 e0       	ldi	r31, 0x00	; 0
    27ce:	80 81       	ld	r24, Z
    27d0:	8d 7f       	andi	r24, 0xFD	; 253
    27d2:	8c 93       	st	X, r24

    PORTB|=_BV(0); //led on
    27d4:	a5 e2       	ldi	r26, 0x25	; 37
    27d6:	b0 e0       	ldi	r27, 0x00	; 0
    27d8:	e5 e2       	ldi	r30, 0x25	; 37
    27da:	f0 e0       	ldi	r31, 0x00	; 0
    27dc:	80 81       	ld	r24, Z
    27de:	81 60       	ori	r24, 0x01	; 1
    27e0:	8c 93       	st	X, r24
    27e2:	80 e0       	ldi	r24, 0x00	; 0
    27e4:	90 e0       	ldi	r25, 0x00	; 0
    27e6:	aa ef       	ldi	r26, 0xFA	; 250
    27e8:	b3 e4       	ldi	r27, 0x43	; 67
    27ea:	8b 87       	std	Y+11, r24	; 0x0b
    27ec:	9c 87       	std	Y+12, r25	; 0x0c
    27ee:	ad 87       	std	Y+13, r26	; 0x0d
    27f0:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    27f2:	6b 85       	ldd	r22, Y+11	; 0x0b
    27f4:	7c 85       	ldd	r23, Y+12	; 0x0c
    27f6:	8d 85       	ldd	r24, Y+13	; 0x0d
    27f8:	9e 85       	ldd	r25, Y+14	; 0x0e
    27fa:	20 e0       	ldi	r18, 0x00	; 0
    27fc:	30 e0       	ldi	r19, 0x00	; 0
    27fe:	4a ef       	ldi	r20, 0xFA	; 250
    2800:	54 e4       	ldi	r21, 0x44	; 68
    2802:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    2806:	dc 01       	movw	r26, r24
    2808:	cb 01       	movw	r24, r22
    280a:	8f 83       	std	Y+7, r24	; 0x07
    280c:	98 87       	std	Y+8, r25	; 0x08
    280e:	a9 87       	std	Y+9, r26	; 0x09
    2810:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2812:	6f 81       	ldd	r22, Y+7	; 0x07
    2814:	78 85       	ldd	r23, Y+8	; 0x08
    2816:	89 85       	ldd	r24, Y+9	; 0x09
    2818:	9a 85       	ldd	r25, Y+10	; 0x0a
    281a:	20 e0       	ldi	r18, 0x00	; 0
    281c:	30 e0       	ldi	r19, 0x00	; 0
    281e:	40 e8       	ldi	r20, 0x80	; 128
    2820:	5f e3       	ldi	r21, 0x3F	; 63
    2822:	0e 94 ca 18 	call	0x3194	; 0x3194 <__ltsf2>
    2826:	88 23       	and	r24, r24
    2828:	2c f4       	brge	.+10     	; 0x2834 <__vector_1+0xa0>
		__ticks = 1;
    282a:	81 e0       	ldi	r24, 0x01	; 1
    282c:	90 e0       	ldi	r25, 0x00	; 0
    282e:	9e 83       	std	Y+6, r25	; 0x06
    2830:	8d 83       	std	Y+5, r24	; 0x05
    2832:	3f c0       	rjmp	.+126    	; 0x28b2 <__vector_1+0x11e>
	else if (__tmp > 65535)
    2834:	6f 81       	ldd	r22, Y+7	; 0x07
    2836:	78 85       	ldd	r23, Y+8	; 0x08
    2838:	89 85       	ldd	r24, Y+9	; 0x09
    283a:	9a 85       	ldd	r25, Y+10	; 0x0a
    283c:	20 e0       	ldi	r18, 0x00	; 0
    283e:	3f ef       	ldi	r19, 0xFF	; 255
    2840:	4f e7       	ldi	r20, 0x7F	; 127
    2842:	57 e4       	ldi	r21, 0x47	; 71
    2844:	0e 94 6a 18 	call	0x30d4	; 0x30d4 <__gtsf2>
    2848:	18 16       	cp	r1, r24
    284a:	4c f5       	brge	.+82     	; 0x289e <__vector_1+0x10a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    284c:	6b 85       	ldd	r22, Y+11	; 0x0b
    284e:	7c 85       	ldd	r23, Y+12	; 0x0c
    2850:	8d 85       	ldd	r24, Y+13	; 0x0d
    2852:	9e 85       	ldd	r25, Y+14	; 0x0e
    2854:	20 e0       	ldi	r18, 0x00	; 0
    2856:	30 e0       	ldi	r19, 0x00	; 0
    2858:	40 e2       	ldi	r20, 0x20	; 32
    285a:	51 e4       	ldi	r21, 0x41	; 65
    285c:	0e 94 c4 16 	call	0x2d88	; 0x2d88 <__mulsf3>
    2860:	dc 01       	movw	r26, r24
    2862:	cb 01       	movw	r24, r22
    2864:	bc 01       	movw	r22, r24
    2866:	cd 01       	movw	r24, r26
    2868:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    286c:	dc 01       	movw	r26, r24
    286e:	cb 01       	movw	r24, r22
    2870:	9e 83       	std	Y+6, r25	; 0x06
    2872:	8d 83       	std	Y+5, r24	; 0x05
    2874:	0f c0       	rjmp	.+30     	; 0x2894 <__vector_1+0x100>
    2876:	88 ec       	ldi	r24, 0xC8	; 200
    2878:	90 e0       	ldi	r25, 0x00	; 0
    287a:	9c 83       	std	Y+4, r25	; 0x04
    287c:	8b 83       	std	Y+3, r24	; 0x03
    287e:	8b 81       	ldd	r24, Y+3	; 0x03
    2880:	9c 81       	ldd	r25, Y+4	; 0x04
    2882:	01 97       	sbiw	r24, 0x01	; 1
    2884:	f1 f7       	brne	.-4      	; 0x2882 <__vector_1+0xee>
    2886:	9c 83       	std	Y+4, r25	; 0x04
    2888:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    288a:	8d 81       	ldd	r24, Y+5	; 0x05
    288c:	9e 81       	ldd	r25, Y+6	; 0x06
    288e:	01 97       	sbiw	r24, 0x01	; 1
    2890:	9e 83       	std	Y+6, r25	; 0x06
    2892:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2894:	8d 81       	ldd	r24, Y+5	; 0x05
    2896:	9e 81       	ldd	r25, Y+6	; 0x06
    2898:	00 97       	sbiw	r24, 0x00	; 0
    289a:	69 f7       	brne	.-38     	; 0x2876 <__vector_1+0xe2>
    289c:	14 c0       	rjmp	.+40     	; 0x28c6 <__vector_1+0x132>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    289e:	6f 81       	ldd	r22, Y+7	; 0x07
    28a0:	78 85       	ldd	r23, Y+8	; 0x08
    28a2:	89 85       	ldd	r24, Y+9	; 0x09
    28a4:	9a 85       	ldd	r25, Y+10	; 0x0a
    28a6:	0e 94 ee 14 	call	0x29dc	; 0x29dc <__fixunssfsi>
    28aa:	dc 01       	movw	r26, r24
    28ac:	cb 01       	movw	r24, r22
    28ae:	9e 83       	std	Y+6, r25	; 0x06
    28b0:	8d 83       	std	Y+5, r24	; 0x05
    28b2:	8d 81       	ldd	r24, Y+5	; 0x05
    28b4:	9e 81       	ldd	r25, Y+6	; 0x06
    28b6:	9a 83       	std	Y+2, r25	; 0x02
    28b8:	89 83       	std	Y+1, r24	; 0x01
    28ba:	89 81       	ldd	r24, Y+1	; 0x01
    28bc:	9a 81       	ldd	r25, Y+2	; 0x02
    28be:	01 97       	sbiw	r24, 0x01	; 1
    28c0:	f1 f7       	brne	.-4      	; 0x28be <__vector_1+0x12a>
    28c2:	9a 83       	std	Y+2, r25	; 0x02
    28c4:	89 83       	std	Y+1, r24	; 0x01
    _delay_ms(500);
    PORTB&=~_BV(0); //led off
    28c6:	a5 e2       	ldi	r26, 0x25	; 37
    28c8:	b0 e0       	ldi	r27, 0x00	; 0
    28ca:	e5 e2       	ldi	r30, 0x25	; 37
    28cc:	f0 e0       	ldi	r31, 0x00	; 0
    28ce:	80 81       	ld	r24, Z
    28d0:	8e 7f       	andi	r24, 0xFE	; 254
    28d2:	8c 93       	st	X, r24
    //for (int i=0;i<dataLen;i++)
    //{
    //USART_Transmit(data[i]);
    //}
    //
    sei();
    28d4:	78 94       	sei

}
    28d6:	2e 96       	adiw	r28, 0x0e	; 14
    28d8:	de bf       	out	0x3e, r29	; 62
    28da:	cd bf       	out	0x3d, r28	; 61
    28dc:	cf 91       	pop	r28
    28de:	df 91       	pop	r29
    28e0:	ff 91       	pop	r31
    28e2:	ef 91       	pop	r30
    28e4:	bf 91       	pop	r27
    28e6:	af 91       	pop	r26
    28e8:	9f 91       	pop	r25
    28ea:	8f 91       	pop	r24
    28ec:	7f 91       	pop	r23
    28ee:	6f 91       	pop	r22
    28f0:	5f 91       	pop	r21
    28f2:	4f 91       	pop	r20
    28f4:	3f 91       	pop	r19
    28f6:	2f 91       	pop	r18
    28f8:	0f 90       	pop	r0
    28fa:	0f be       	out	0x3f, r0	; 63
    28fc:	0f 90       	pop	r0
    28fe:	1f 90       	pop	r1
    2900:	18 95       	reti

00002902 <__vector_18>:

ISR(USART_RX_vect)	///Vector that triggers when computer sends something to the Atmega88
{
    2902:	1f 92       	push	r1
    2904:	0f 92       	push	r0
    2906:	0f b6       	in	r0, 0x3f	; 63
    2908:	0f 92       	push	r0
    290a:	11 24       	eor	r1, r1
    290c:	0f 93       	push	r16
    290e:	1f 93       	push	r17
    2910:	2f 93       	push	r18
    2912:	3f 93       	push	r19
    2914:	4f 93       	push	r20
    2916:	5f 93       	push	r21
    2918:	6f 93       	push	r22
    291a:	7f 93       	push	r23
    291c:	8f 93       	push	r24
    291e:	9f 93       	push	r25
    2920:	af 93       	push	r26
    2922:	bf 93       	push	r27
    2924:	ef 93       	push	r30
    2926:	ff 93       	push	r31
    2928:	df 93       	push	r29
    292a:	cf 93       	push	r28
    292c:	00 d0       	rcall	.+0      	; 0x292e <__vector_18+0x2c>
    292e:	00 d0       	rcall	.+0      	; 0x2930 <__vector_18+0x2e>
    2930:	0f 92       	push	r0
    2932:	cd b7       	in	r28, 0x3d	; 61
    2934:	de b7       	in	r29, 0x3e	; 62
    uint8_t W_buffer[dataLen];	//Creates a buffer to receive data with specified length (ex. dataLen = 5 bytes)

    int i;
    for (i=0;i<dataLen;i++)
    2936:	1a 82       	std	Y+2, r1	; 0x02
    2938:	19 82       	std	Y+1, r1	; 0x01
    293a:	1a c0       	rjmp	.+52     	; 0x2970 <__vector_18+0x6e>
    {
        W_buffer[i]=USART_Receive();	//receive the USART
    293c:	09 81       	ldd	r16, Y+1	; 0x01
    293e:	1a 81       	ldd	r17, Y+2	; 0x02
    2940:	0e 94 c7 00 	call	0x18e	; 0x18e <USART_Receive>
    2944:	28 2f       	mov	r18, r24
    2946:	ce 01       	movw	r24, r28
    2948:	03 96       	adiw	r24, 0x03	; 3
    294a:	fc 01       	movw	r30, r24
    294c:	e0 0f       	add	r30, r16
    294e:	f1 1f       	adc	r31, r17
    2950:	20 83       	st	Z, r18
        USART_Transmit(W_buffer[i]);	//Transmit the Data back to the computer to make sure it was correctly received
    2952:	29 81       	ldd	r18, Y+1	; 0x01
    2954:	3a 81       	ldd	r19, Y+2	; 0x02
    2956:	ce 01       	movw	r24, r28
    2958:	03 96       	adiw	r24, 0x03	; 3
    295a:	fc 01       	movw	r30, r24
    295c:	e2 0f       	add	r30, r18
    295e:	f3 1f       	adc	r31, r19
    2960:	80 81       	ld	r24, Z
    2962:	0e 94 b0 00 	call	0x160	; 0x160 <USART_Transmit>
ISR(USART_RX_vect)	///Vector that triggers when computer sends something to the Atmega88
{
    uint8_t W_buffer[dataLen];	//Creates a buffer to receive data with specified length (ex. dataLen = 5 bytes)

    int i;
    for (i=0;i<dataLen;i++)
    2966:	89 81       	ldd	r24, Y+1	; 0x01
    2968:	9a 81       	ldd	r25, Y+2	; 0x02
    296a:	01 96       	adiw	r24, 0x01	; 1
    296c:	9a 83       	std	Y+2, r25	; 0x02
    296e:	89 83       	std	Y+1, r24	; 0x01
    2970:	89 81       	ldd	r24, Y+1	; 0x01
    2972:	9a 81       	ldd	r25, Y+2	; 0x02
    2974:	83 30       	cpi	r24, 0x03	; 3
    2976:	91 05       	cpc	r25, r1
    2978:	0c f3       	brlt	.-62     	; 0x293c <__vector_18+0x3a>
        W_buffer[i]=USART_Receive();	//receive the USART
        USART_Transmit(W_buffer[i]);	//Transmit the Data back to the computer to make sure it was correctly received
        //This probably should wait until all the bytes is received, but works fine in to send and receive at the same time... =)
    }

    reset();	//reset irq - kan skicka data pÃ¥ nytt
    297a:	0e 94 17 0d 	call	0x1a2e	; 0x1a2e <reset>

    if (W_buffer[0]=='9')	//om projektorduk
    297e:	8b 81       	ldd	r24, Y+3	; 0x03
    2980:	89 33       	cpi	r24, 0x39	; 57
    2982:	59 f4       	brne	.+22     	; 0x299a <__vector_18+0x98>
    {
        ChangeAddress(0x13);	//change address to send to different receiver
    2984:	83 e1       	ldi	r24, 0x13	; 19
    2986:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ChangeAddress>
        transmit_payload(W_buffer);	//SÃ¤nder datan
    298a:	ce 01       	movw	r24, r28
    298c:	03 96       	adiw	r24, 0x03	; 3
    298e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <transmit_payload>
        ChangeAddress(0x12);	//tillbaka till ultimata fjÃ¤rrisen
    2992:	82 e1       	ldi	r24, 0x12	; 18
    2994:	0e 94 e1 0b 	call	0x17c2	; 0x17c2 <ChangeAddress>
    2998:	04 c0       	rjmp	.+8      	; 0x29a2 <__vector_18+0xa0>
    }
    else
    {
        transmit_payload(W_buffer);	//SÃ¤nder datan
    299a:	ce 01       	movw	r24, r28
    299c:	03 96       	adiw	r24, 0x03	; 3
    299e:	0e 94 5b 11 	call	0x22b6	; 0x22b6 <transmit_payload>
    }

    USART_Transmit('#');	//visar att chipet mottagit datan...
    29a2:	83 e2       	ldi	r24, 0x23	; 35
    29a4:	0e 94 b0 00 	call	0x160	; 0x160 <USART_Transmit>


}
    29a8:	0f 90       	pop	r0
    29aa:	0f 90       	pop	r0
    29ac:	0f 90       	pop	r0
    29ae:	0f 90       	pop	r0
    29b0:	0f 90       	pop	r0
    29b2:	cf 91       	pop	r28
    29b4:	df 91       	pop	r29
    29b6:	ff 91       	pop	r31
    29b8:	ef 91       	pop	r30
    29ba:	bf 91       	pop	r27
    29bc:	af 91       	pop	r26
    29be:	9f 91       	pop	r25
    29c0:	8f 91       	pop	r24
    29c2:	7f 91       	pop	r23
    29c4:	6f 91       	pop	r22
    29c6:	5f 91       	pop	r21
    29c8:	4f 91       	pop	r20
    29ca:	3f 91       	pop	r19
    29cc:	2f 91       	pop	r18
    29ce:	1f 91       	pop	r17
    29d0:	0f 91       	pop	r16
    29d2:	0f 90       	pop	r0
    29d4:	0f be       	out	0x3f, r0	; 63
    29d6:	0f 90       	pop	r0
    29d8:	1f 90       	pop	r1
    29da:	18 95       	reti

000029dc <__fixunssfsi>:
    29dc:	ef 92       	push	r14
    29de:	ff 92       	push	r15
    29e0:	0f 93       	push	r16
    29e2:	1f 93       	push	r17
    29e4:	7b 01       	movw	r14, r22
    29e6:	8c 01       	movw	r16, r24
    29e8:	20 e0       	ldi	r18, 0x00	; 0
    29ea:	30 e0       	ldi	r19, 0x00	; 0
    29ec:	40 e0       	ldi	r20, 0x00	; 0
    29ee:	5f e4       	ldi	r21, 0x4F	; 79
    29f0:	0e 94 9a 18 	call	0x3134	; 0x3134 <__gesf2>
    29f4:	88 23       	and	r24, r24
    29f6:	8c f0       	brlt	.+34     	; 0x2a1a <__fixunssfsi+0x3e>
    29f8:	c8 01       	movw	r24, r16
    29fa:	b7 01       	movw	r22, r14
    29fc:	20 e0       	ldi	r18, 0x00	; 0
    29fe:	30 e0       	ldi	r19, 0x00	; 0
    2a00:	40 e0       	ldi	r20, 0x00	; 0
    2a02:	5f e4       	ldi	r21, 0x4F	; 79
    2a04:	0e 94 66 16 	call	0x2ccc	; 0x2ccc <__subsf3>
    2a08:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__fixsfsi>
    2a0c:	9b 01       	movw	r18, r22
    2a0e:	ac 01       	movw	r20, r24
    2a10:	20 50       	subi	r18, 0x00	; 0
    2a12:	30 40       	sbci	r19, 0x00	; 0
    2a14:	40 40       	sbci	r20, 0x00	; 0
    2a16:	50 48       	sbci	r21, 0x80	; 128
    2a18:	06 c0       	rjmp	.+12     	; 0x2a26 <__fixunssfsi+0x4a>
    2a1a:	c8 01       	movw	r24, r16
    2a1c:	b7 01       	movw	r22, r14
    2a1e:	0e 94 fa 18 	call	0x31f4	; 0x31f4 <__fixsfsi>
    2a22:	9b 01       	movw	r18, r22
    2a24:	ac 01       	movw	r20, r24
    2a26:	b9 01       	movw	r22, r18
    2a28:	ca 01       	movw	r24, r20
    2a2a:	1f 91       	pop	r17
    2a2c:	0f 91       	pop	r16
    2a2e:	ff 90       	pop	r15
    2a30:	ef 90       	pop	r14
    2a32:	08 95       	ret

00002a34 <_fpadd_parts>:
    2a34:	a0 e0       	ldi	r26, 0x00	; 0
    2a36:	b0 e0       	ldi	r27, 0x00	; 0
    2a38:	e0 e2       	ldi	r30, 0x20	; 32
    2a3a:	f5 e1       	ldi	r31, 0x15	; 21
    2a3c:	0c 94 16 1b 	jmp	0x362c	; 0x362c <__prologue_saves__>
    2a40:	dc 01       	movw	r26, r24
    2a42:	2b 01       	movw	r4, r22
    2a44:	fa 01       	movw	r30, r20
    2a46:	9c 91       	ld	r25, X
    2a48:	92 30       	cpi	r25, 0x02	; 2
    2a4a:	08 f4       	brcc	.+2      	; 0x2a4e <_fpadd_parts+0x1a>
    2a4c:	39 c1       	rjmp	.+626    	; 0x2cc0 <_fpadd_parts+0x28c>
    2a4e:	eb 01       	movw	r28, r22
    2a50:	88 81       	ld	r24, Y
    2a52:	82 30       	cpi	r24, 0x02	; 2
    2a54:	08 f4       	brcc	.+2      	; 0x2a58 <_fpadd_parts+0x24>
    2a56:	33 c1       	rjmp	.+614    	; 0x2cbe <_fpadd_parts+0x28a>
    2a58:	94 30       	cpi	r25, 0x04	; 4
    2a5a:	69 f4       	brne	.+26     	; 0x2a76 <_fpadd_parts+0x42>
    2a5c:	84 30       	cpi	r24, 0x04	; 4
    2a5e:	09 f0       	breq	.+2      	; 0x2a62 <_fpadd_parts+0x2e>
    2a60:	2f c1       	rjmp	.+606    	; 0x2cc0 <_fpadd_parts+0x28c>
    2a62:	11 96       	adiw	r26, 0x01	; 1
    2a64:	9c 91       	ld	r25, X
    2a66:	11 97       	sbiw	r26, 0x01	; 1
    2a68:	89 81       	ldd	r24, Y+1	; 0x01
    2a6a:	98 17       	cp	r25, r24
    2a6c:	09 f4       	brne	.+2      	; 0x2a70 <_fpadd_parts+0x3c>
    2a6e:	28 c1       	rjmp	.+592    	; 0x2cc0 <_fpadd_parts+0x28c>
    2a70:	a0 e0       	ldi	r26, 0x00	; 0
    2a72:	b1 e0       	ldi	r27, 0x01	; 1
    2a74:	25 c1       	rjmp	.+586    	; 0x2cc0 <_fpadd_parts+0x28c>
    2a76:	84 30       	cpi	r24, 0x04	; 4
    2a78:	09 f4       	brne	.+2      	; 0x2a7c <_fpadd_parts+0x48>
    2a7a:	21 c1       	rjmp	.+578    	; 0x2cbe <_fpadd_parts+0x28a>
    2a7c:	82 30       	cpi	r24, 0x02	; 2
    2a7e:	a9 f4       	brne	.+42     	; 0x2aaa <_fpadd_parts+0x76>
    2a80:	92 30       	cpi	r25, 0x02	; 2
    2a82:	09 f0       	breq	.+2      	; 0x2a86 <_fpadd_parts+0x52>
    2a84:	1d c1       	rjmp	.+570    	; 0x2cc0 <_fpadd_parts+0x28c>
    2a86:	9a 01       	movw	r18, r20
    2a88:	ad 01       	movw	r20, r26
    2a8a:	88 e0       	ldi	r24, 0x08	; 8
    2a8c:	ea 01       	movw	r28, r20
    2a8e:	09 90       	ld	r0, Y+
    2a90:	ae 01       	movw	r20, r28
    2a92:	e9 01       	movw	r28, r18
    2a94:	09 92       	st	Y+, r0
    2a96:	9e 01       	movw	r18, r28
    2a98:	81 50       	subi	r24, 0x01	; 1
    2a9a:	c1 f7       	brne	.-16     	; 0x2a8c <_fpadd_parts+0x58>
    2a9c:	e2 01       	movw	r28, r4
    2a9e:	89 81       	ldd	r24, Y+1	; 0x01
    2aa0:	11 96       	adiw	r26, 0x01	; 1
    2aa2:	9c 91       	ld	r25, X
    2aa4:	89 23       	and	r24, r25
    2aa6:	81 83       	std	Z+1, r24	; 0x01
    2aa8:	08 c1       	rjmp	.+528    	; 0x2cba <_fpadd_parts+0x286>
    2aaa:	92 30       	cpi	r25, 0x02	; 2
    2aac:	09 f4       	brne	.+2      	; 0x2ab0 <_fpadd_parts+0x7c>
    2aae:	07 c1       	rjmp	.+526    	; 0x2cbe <_fpadd_parts+0x28a>
    2ab0:	12 96       	adiw	r26, 0x02	; 2
    2ab2:	2d 90       	ld	r2, X+
    2ab4:	3c 90       	ld	r3, X
    2ab6:	13 97       	sbiw	r26, 0x03	; 3
    2ab8:	eb 01       	movw	r28, r22
    2aba:	8a 81       	ldd	r24, Y+2	; 0x02
    2abc:	9b 81       	ldd	r25, Y+3	; 0x03
    2abe:	14 96       	adiw	r26, 0x04	; 4
    2ac0:	ad 90       	ld	r10, X+
    2ac2:	bd 90       	ld	r11, X+
    2ac4:	cd 90       	ld	r12, X+
    2ac6:	dc 90       	ld	r13, X
    2ac8:	17 97       	sbiw	r26, 0x07	; 7
    2aca:	ec 80       	ldd	r14, Y+4	; 0x04
    2acc:	fd 80       	ldd	r15, Y+5	; 0x05
    2ace:	0e 81       	ldd	r16, Y+6	; 0x06
    2ad0:	1f 81       	ldd	r17, Y+7	; 0x07
    2ad2:	91 01       	movw	r18, r2
    2ad4:	28 1b       	sub	r18, r24
    2ad6:	39 0b       	sbc	r19, r25
    2ad8:	b9 01       	movw	r22, r18
    2ada:	37 ff       	sbrs	r19, 7
    2adc:	04 c0       	rjmp	.+8      	; 0x2ae6 <_fpadd_parts+0xb2>
    2ade:	66 27       	eor	r22, r22
    2ae0:	77 27       	eor	r23, r23
    2ae2:	62 1b       	sub	r22, r18
    2ae4:	73 0b       	sbc	r23, r19
    2ae6:	60 32       	cpi	r22, 0x20	; 32
    2ae8:	71 05       	cpc	r23, r1
    2aea:	0c f0       	brlt	.+2      	; 0x2aee <_fpadd_parts+0xba>
    2aec:	61 c0       	rjmp	.+194    	; 0x2bb0 <_fpadd_parts+0x17c>
    2aee:	12 16       	cp	r1, r18
    2af0:	13 06       	cpc	r1, r19
    2af2:	6c f5       	brge	.+90     	; 0x2b4e <_fpadd_parts+0x11a>
    2af4:	37 01       	movw	r6, r14
    2af6:	48 01       	movw	r8, r16
    2af8:	06 2e       	mov	r0, r22
    2afa:	04 c0       	rjmp	.+8      	; 0x2b04 <_fpadd_parts+0xd0>
    2afc:	96 94       	lsr	r9
    2afe:	87 94       	ror	r8
    2b00:	77 94       	ror	r7
    2b02:	67 94       	ror	r6
    2b04:	0a 94       	dec	r0
    2b06:	d2 f7       	brpl	.-12     	; 0x2afc <_fpadd_parts+0xc8>
    2b08:	21 e0       	ldi	r18, 0x01	; 1
    2b0a:	30 e0       	ldi	r19, 0x00	; 0
    2b0c:	40 e0       	ldi	r20, 0x00	; 0
    2b0e:	50 e0       	ldi	r21, 0x00	; 0
    2b10:	04 c0       	rjmp	.+8      	; 0x2b1a <_fpadd_parts+0xe6>
    2b12:	22 0f       	add	r18, r18
    2b14:	33 1f       	adc	r19, r19
    2b16:	44 1f       	adc	r20, r20
    2b18:	55 1f       	adc	r21, r21
    2b1a:	6a 95       	dec	r22
    2b1c:	d2 f7       	brpl	.-12     	; 0x2b12 <_fpadd_parts+0xde>
    2b1e:	21 50       	subi	r18, 0x01	; 1
    2b20:	30 40       	sbci	r19, 0x00	; 0
    2b22:	40 40       	sbci	r20, 0x00	; 0
    2b24:	50 40       	sbci	r21, 0x00	; 0
    2b26:	2e 21       	and	r18, r14
    2b28:	3f 21       	and	r19, r15
    2b2a:	40 23       	and	r20, r16
    2b2c:	51 23       	and	r21, r17
    2b2e:	21 15       	cp	r18, r1
    2b30:	31 05       	cpc	r19, r1
    2b32:	41 05       	cpc	r20, r1
    2b34:	51 05       	cpc	r21, r1
    2b36:	21 f0       	breq	.+8      	; 0x2b40 <_fpadd_parts+0x10c>
    2b38:	21 e0       	ldi	r18, 0x01	; 1
    2b3a:	30 e0       	ldi	r19, 0x00	; 0
    2b3c:	40 e0       	ldi	r20, 0x00	; 0
    2b3e:	50 e0       	ldi	r21, 0x00	; 0
    2b40:	79 01       	movw	r14, r18
    2b42:	8a 01       	movw	r16, r20
    2b44:	e6 28       	or	r14, r6
    2b46:	f7 28       	or	r15, r7
    2b48:	08 29       	or	r16, r8
    2b4a:	19 29       	or	r17, r9
    2b4c:	3c c0       	rjmp	.+120    	; 0x2bc6 <_fpadd_parts+0x192>
    2b4e:	23 2b       	or	r18, r19
    2b50:	d1 f1       	breq	.+116    	; 0x2bc6 <_fpadd_parts+0x192>
    2b52:	26 0e       	add	r2, r22
    2b54:	37 1e       	adc	r3, r23
    2b56:	35 01       	movw	r6, r10
    2b58:	46 01       	movw	r8, r12
    2b5a:	06 2e       	mov	r0, r22
    2b5c:	04 c0       	rjmp	.+8      	; 0x2b66 <_fpadd_parts+0x132>
    2b5e:	96 94       	lsr	r9
    2b60:	87 94       	ror	r8
    2b62:	77 94       	ror	r7
    2b64:	67 94       	ror	r6
    2b66:	0a 94       	dec	r0
    2b68:	d2 f7       	brpl	.-12     	; 0x2b5e <_fpadd_parts+0x12a>
    2b6a:	21 e0       	ldi	r18, 0x01	; 1
    2b6c:	30 e0       	ldi	r19, 0x00	; 0
    2b6e:	40 e0       	ldi	r20, 0x00	; 0
    2b70:	50 e0       	ldi	r21, 0x00	; 0
    2b72:	04 c0       	rjmp	.+8      	; 0x2b7c <_fpadd_parts+0x148>
    2b74:	22 0f       	add	r18, r18
    2b76:	33 1f       	adc	r19, r19
    2b78:	44 1f       	adc	r20, r20
    2b7a:	55 1f       	adc	r21, r21
    2b7c:	6a 95       	dec	r22
    2b7e:	d2 f7       	brpl	.-12     	; 0x2b74 <_fpadd_parts+0x140>
    2b80:	21 50       	subi	r18, 0x01	; 1
    2b82:	30 40       	sbci	r19, 0x00	; 0
    2b84:	40 40       	sbci	r20, 0x00	; 0
    2b86:	50 40       	sbci	r21, 0x00	; 0
    2b88:	2a 21       	and	r18, r10
    2b8a:	3b 21       	and	r19, r11
    2b8c:	4c 21       	and	r20, r12
    2b8e:	5d 21       	and	r21, r13
    2b90:	21 15       	cp	r18, r1
    2b92:	31 05       	cpc	r19, r1
    2b94:	41 05       	cpc	r20, r1
    2b96:	51 05       	cpc	r21, r1
    2b98:	21 f0       	breq	.+8      	; 0x2ba2 <_fpadd_parts+0x16e>
    2b9a:	21 e0       	ldi	r18, 0x01	; 1
    2b9c:	30 e0       	ldi	r19, 0x00	; 0
    2b9e:	40 e0       	ldi	r20, 0x00	; 0
    2ba0:	50 e0       	ldi	r21, 0x00	; 0
    2ba2:	59 01       	movw	r10, r18
    2ba4:	6a 01       	movw	r12, r20
    2ba6:	a6 28       	or	r10, r6
    2ba8:	b7 28       	or	r11, r7
    2baa:	c8 28       	or	r12, r8
    2bac:	d9 28       	or	r13, r9
    2bae:	0b c0       	rjmp	.+22     	; 0x2bc6 <_fpadd_parts+0x192>
    2bb0:	82 15       	cp	r24, r2
    2bb2:	93 05       	cpc	r25, r3
    2bb4:	2c f0       	brlt	.+10     	; 0x2bc0 <_fpadd_parts+0x18c>
    2bb6:	1c 01       	movw	r2, r24
    2bb8:	aa 24       	eor	r10, r10
    2bba:	bb 24       	eor	r11, r11
    2bbc:	65 01       	movw	r12, r10
    2bbe:	03 c0       	rjmp	.+6      	; 0x2bc6 <_fpadd_parts+0x192>
    2bc0:	ee 24       	eor	r14, r14
    2bc2:	ff 24       	eor	r15, r15
    2bc4:	87 01       	movw	r16, r14
    2bc6:	11 96       	adiw	r26, 0x01	; 1
    2bc8:	9c 91       	ld	r25, X
    2bca:	d2 01       	movw	r26, r4
    2bcc:	11 96       	adiw	r26, 0x01	; 1
    2bce:	8c 91       	ld	r24, X
    2bd0:	98 17       	cp	r25, r24
    2bd2:	09 f4       	brne	.+2      	; 0x2bd6 <_fpadd_parts+0x1a2>
    2bd4:	45 c0       	rjmp	.+138    	; 0x2c60 <_fpadd_parts+0x22c>
    2bd6:	99 23       	and	r25, r25
    2bd8:	39 f0       	breq	.+14     	; 0x2be8 <_fpadd_parts+0x1b4>
    2bda:	a8 01       	movw	r20, r16
    2bdc:	97 01       	movw	r18, r14
    2bde:	2a 19       	sub	r18, r10
    2be0:	3b 09       	sbc	r19, r11
    2be2:	4c 09       	sbc	r20, r12
    2be4:	5d 09       	sbc	r21, r13
    2be6:	06 c0       	rjmp	.+12     	; 0x2bf4 <_fpadd_parts+0x1c0>
    2be8:	a6 01       	movw	r20, r12
    2bea:	95 01       	movw	r18, r10
    2bec:	2e 19       	sub	r18, r14
    2bee:	3f 09       	sbc	r19, r15
    2bf0:	40 0b       	sbc	r20, r16
    2bf2:	51 0b       	sbc	r21, r17
    2bf4:	57 fd       	sbrc	r21, 7
    2bf6:	08 c0       	rjmp	.+16     	; 0x2c08 <_fpadd_parts+0x1d4>
    2bf8:	11 82       	std	Z+1, r1	; 0x01
    2bfa:	33 82       	std	Z+3, r3	; 0x03
    2bfc:	22 82       	std	Z+2, r2	; 0x02
    2bfe:	24 83       	std	Z+4, r18	; 0x04
    2c00:	35 83       	std	Z+5, r19	; 0x05
    2c02:	46 83       	std	Z+6, r20	; 0x06
    2c04:	57 83       	std	Z+7, r21	; 0x07
    2c06:	1d c0       	rjmp	.+58     	; 0x2c42 <_fpadd_parts+0x20e>
    2c08:	81 e0       	ldi	r24, 0x01	; 1
    2c0a:	81 83       	std	Z+1, r24	; 0x01
    2c0c:	33 82       	std	Z+3, r3	; 0x03
    2c0e:	22 82       	std	Z+2, r2	; 0x02
    2c10:	88 27       	eor	r24, r24
    2c12:	99 27       	eor	r25, r25
    2c14:	dc 01       	movw	r26, r24
    2c16:	82 1b       	sub	r24, r18
    2c18:	93 0b       	sbc	r25, r19
    2c1a:	a4 0b       	sbc	r26, r20
    2c1c:	b5 0b       	sbc	r27, r21
    2c1e:	84 83       	std	Z+4, r24	; 0x04
    2c20:	95 83       	std	Z+5, r25	; 0x05
    2c22:	a6 83       	std	Z+6, r26	; 0x06
    2c24:	b7 83       	std	Z+7, r27	; 0x07
    2c26:	0d c0       	rjmp	.+26     	; 0x2c42 <_fpadd_parts+0x20e>
    2c28:	22 0f       	add	r18, r18
    2c2a:	33 1f       	adc	r19, r19
    2c2c:	44 1f       	adc	r20, r20
    2c2e:	55 1f       	adc	r21, r21
    2c30:	24 83       	std	Z+4, r18	; 0x04
    2c32:	35 83       	std	Z+5, r19	; 0x05
    2c34:	46 83       	std	Z+6, r20	; 0x06
    2c36:	57 83       	std	Z+7, r21	; 0x07
    2c38:	82 81       	ldd	r24, Z+2	; 0x02
    2c3a:	93 81       	ldd	r25, Z+3	; 0x03
    2c3c:	01 97       	sbiw	r24, 0x01	; 1
    2c3e:	93 83       	std	Z+3, r25	; 0x03
    2c40:	82 83       	std	Z+2, r24	; 0x02
    2c42:	24 81       	ldd	r18, Z+4	; 0x04
    2c44:	35 81       	ldd	r19, Z+5	; 0x05
    2c46:	46 81       	ldd	r20, Z+6	; 0x06
    2c48:	57 81       	ldd	r21, Z+7	; 0x07
    2c4a:	da 01       	movw	r26, r20
    2c4c:	c9 01       	movw	r24, r18
    2c4e:	01 97       	sbiw	r24, 0x01	; 1
    2c50:	a1 09       	sbc	r26, r1
    2c52:	b1 09       	sbc	r27, r1
    2c54:	8f 5f       	subi	r24, 0xFF	; 255
    2c56:	9f 4f       	sbci	r25, 0xFF	; 255
    2c58:	af 4f       	sbci	r26, 0xFF	; 255
    2c5a:	bf 43       	sbci	r27, 0x3F	; 63
    2c5c:	28 f3       	brcs	.-54     	; 0x2c28 <_fpadd_parts+0x1f4>
    2c5e:	0b c0       	rjmp	.+22     	; 0x2c76 <_fpadd_parts+0x242>
    2c60:	91 83       	std	Z+1, r25	; 0x01
    2c62:	33 82       	std	Z+3, r3	; 0x03
    2c64:	22 82       	std	Z+2, r2	; 0x02
    2c66:	ea 0c       	add	r14, r10
    2c68:	fb 1c       	adc	r15, r11
    2c6a:	0c 1d       	adc	r16, r12
    2c6c:	1d 1d       	adc	r17, r13
    2c6e:	e4 82       	std	Z+4, r14	; 0x04
    2c70:	f5 82       	std	Z+5, r15	; 0x05
    2c72:	06 83       	std	Z+6, r16	; 0x06
    2c74:	17 83       	std	Z+7, r17	; 0x07
    2c76:	83 e0       	ldi	r24, 0x03	; 3
    2c78:	80 83       	st	Z, r24
    2c7a:	24 81       	ldd	r18, Z+4	; 0x04
    2c7c:	35 81       	ldd	r19, Z+5	; 0x05
    2c7e:	46 81       	ldd	r20, Z+6	; 0x06
    2c80:	57 81       	ldd	r21, Z+7	; 0x07
    2c82:	57 ff       	sbrs	r21, 7
    2c84:	1a c0       	rjmp	.+52     	; 0x2cba <_fpadd_parts+0x286>
    2c86:	c9 01       	movw	r24, r18
    2c88:	aa 27       	eor	r26, r26
    2c8a:	97 fd       	sbrc	r25, 7
    2c8c:	a0 95       	com	r26
    2c8e:	ba 2f       	mov	r27, r26
    2c90:	81 70       	andi	r24, 0x01	; 1
    2c92:	90 70       	andi	r25, 0x00	; 0
    2c94:	a0 70       	andi	r26, 0x00	; 0
    2c96:	b0 70       	andi	r27, 0x00	; 0
    2c98:	56 95       	lsr	r21
    2c9a:	47 95       	ror	r20
    2c9c:	37 95       	ror	r19
    2c9e:	27 95       	ror	r18
    2ca0:	82 2b       	or	r24, r18
    2ca2:	93 2b       	or	r25, r19
    2ca4:	a4 2b       	or	r26, r20
    2ca6:	b5 2b       	or	r27, r21
    2ca8:	84 83       	std	Z+4, r24	; 0x04
    2caa:	95 83       	std	Z+5, r25	; 0x05
    2cac:	a6 83       	std	Z+6, r26	; 0x06
    2cae:	b7 83       	std	Z+7, r27	; 0x07
    2cb0:	82 81       	ldd	r24, Z+2	; 0x02
    2cb2:	93 81       	ldd	r25, Z+3	; 0x03
    2cb4:	01 96       	adiw	r24, 0x01	; 1
    2cb6:	93 83       	std	Z+3, r25	; 0x03
    2cb8:	82 83       	std	Z+2, r24	; 0x02
    2cba:	df 01       	movw	r26, r30
    2cbc:	01 c0       	rjmp	.+2      	; 0x2cc0 <_fpadd_parts+0x28c>
    2cbe:	d2 01       	movw	r26, r4
    2cc0:	cd 01       	movw	r24, r26
    2cc2:	cd b7       	in	r28, 0x3d	; 61
    2cc4:	de b7       	in	r29, 0x3e	; 62
    2cc6:	e2 e1       	ldi	r30, 0x12	; 18
    2cc8:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__epilogue_restores__>

00002ccc <__subsf3>:
    2ccc:	a0 e2       	ldi	r26, 0x20	; 32
    2cce:	b0 e0       	ldi	r27, 0x00	; 0
    2cd0:	ec e6       	ldi	r30, 0x6C	; 108
    2cd2:	f6 e1       	ldi	r31, 0x16	; 22
    2cd4:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__prologue_saves__+0x18>
    2cd8:	69 83       	std	Y+1, r22	; 0x01
    2cda:	7a 83       	std	Y+2, r23	; 0x02
    2cdc:	8b 83       	std	Y+3, r24	; 0x03
    2cde:	9c 83       	std	Y+4, r25	; 0x04
    2ce0:	2d 83       	std	Y+5, r18	; 0x05
    2ce2:	3e 83       	std	Y+6, r19	; 0x06
    2ce4:	4f 83       	std	Y+7, r20	; 0x07
    2ce6:	58 87       	std	Y+8, r21	; 0x08
    2ce8:	e9 e0       	ldi	r30, 0x09	; 9
    2cea:	ee 2e       	mov	r14, r30
    2cec:	f1 2c       	mov	r15, r1
    2cee:	ec 0e       	add	r14, r28
    2cf0:	fd 1e       	adc	r15, r29
    2cf2:	ce 01       	movw	r24, r28
    2cf4:	01 96       	adiw	r24, 0x01	; 1
    2cf6:	b7 01       	movw	r22, r14
    2cf8:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    2cfc:	8e 01       	movw	r16, r28
    2cfe:	0f 5e       	subi	r16, 0xEF	; 239
    2d00:	1f 4f       	sbci	r17, 0xFF	; 255
    2d02:	ce 01       	movw	r24, r28
    2d04:	05 96       	adiw	r24, 0x05	; 5
    2d06:	b8 01       	movw	r22, r16
    2d08:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    2d0c:	8a 89       	ldd	r24, Y+18	; 0x12
    2d0e:	91 e0       	ldi	r25, 0x01	; 1
    2d10:	89 27       	eor	r24, r25
    2d12:	8a 8b       	std	Y+18, r24	; 0x12
    2d14:	c7 01       	movw	r24, r14
    2d16:	b8 01       	movw	r22, r16
    2d18:	ae 01       	movw	r20, r28
    2d1a:	47 5e       	subi	r20, 0xE7	; 231
    2d1c:	5f 4f       	sbci	r21, 0xFF	; 255
    2d1e:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_fpadd_parts>
    2d22:	0e 94 4e 19 	call	0x329c	; 0x329c <__pack_f>
    2d26:	a0 96       	adiw	r28, 0x20	; 32
    2d28:	e6 e0       	ldi	r30, 0x06	; 6
    2d2a:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__epilogue_restores__+0x18>

00002d2e <__addsf3>:
    2d2e:	a0 e2       	ldi	r26, 0x20	; 32
    2d30:	b0 e0       	ldi	r27, 0x00	; 0
    2d32:	ed e9       	ldi	r30, 0x9D	; 157
    2d34:	f6 e1       	ldi	r31, 0x16	; 22
    2d36:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__prologue_saves__+0x18>
    2d3a:	69 83       	std	Y+1, r22	; 0x01
    2d3c:	7a 83       	std	Y+2, r23	; 0x02
    2d3e:	8b 83       	std	Y+3, r24	; 0x03
    2d40:	9c 83       	std	Y+4, r25	; 0x04
    2d42:	2d 83       	std	Y+5, r18	; 0x05
    2d44:	3e 83       	std	Y+6, r19	; 0x06
    2d46:	4f 83       	std	Y+7, r20	; 0x07
    2d48:	58 87       	std	Y+8, r21	; 0x08
    2d4a:	f9 e0       	ldi	r31, 0x09	; 9
    2d4c:	ef 2e       	mov	r14, r31
    2d4e:	f1 2c       	mov	r15, r1
    2d50:	ec 0e       	add	r14, r28
    2d52:	fd 1e       	adc	r15, r29
    2d54:	ce 01       	movw	r24, r28
    2d56:	01 96       	adiw	r24, 0x01	; 1
    2d58:	b7 01       	movw	r22, r14
    2d5a:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    2d5e:	8e 01       	movw	r16, r28
    2d60:	0f 5e       	subi	r16, 0xEF	; 239
    2d62:	1f 4f       	sbci	r17, 0xFF	; 255
    2d64:	ce 01       	movw	r24, r28
    2d66:	05 96       	adiw	r24, 0x05	; 5
    2d68:	b8 01       	movw	r22, r16
    2d6a:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    2d6e:	c7 01       	movw	r24, r14
    2d70:	b8 01       	movw	r22, r16
    2d72:	ae 01       	movw	r20, r28
    2d74:	47 5e       	subi	r20, 0xE7	; 231
    2d76:	5f 4f       	sbci	r21, 0xFF	; 255
    2d78:	0e 94 1a 15 	call	0x2a34	; 0x2a34 <_fpadd_parts>
    2d7c:	0e 94 4e 19 	call	0x329c	; 0x329c <__pack_f>
    2d80:	a0 96       	adiw	r28, 0x20	; 32
    2d82:	e6 e0       	ldi	r30, 0x06	; 6
    2d84:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__epilogue_restores__+0x18>

00002d88 <__mulsf3>:
    2d88:	a0 e2       	ldi	r26, 0x20	; 32
    2d8a:	b0 e0       	ldi	r27, 0x00	; 0
    2d8c:	ea ec       	ldi	r30, 0xCA	; 202
    2d8e:	f6 e1       	ldi	r31, 0x16	; 22
    2d90:	0c 94 16 1b 	jmp	0x362c	; 0x362c <__prologue_saves__>
    2d94:	69 83       	std	Y+1, r22	; 0x01
    2d96:	7a 83       	std	Y+2, r23	; 0x02
    2d98:	8b 83       	std	Y+3, r24	; 0x03
    2d9a:	9c 83       	std	Y+4, r25	; 0x04
    2d9c:	2d 83       	std	Y+5, r18	; 0x05
    2d9e:	3e 83       	std	Y+6, r19	; 0x06
    2da0:	4f 83       	std	Y+7, r20	; 0x07
    2da2:	58 87       	std	Y+8, r21	; 0x08
    2da4:	ce 01       	movw	r24, r28
    2da6:	01 96       	adiw	r24, 0x01	; 1
    2da8:	be 01       	movw	r22, r28
    2daa:	67 5f       	subi	r22, 0xF7	; 247
    2dac:	7f 4f       	sbci	r23, 0xFF	; 255
    2dae:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    2db2:	ce 01       	movw	r24, r28
    2db4:	05 96       	adiw	r24, 0x05	; 5
    2db6:	be 01       	movw	r22, r28
    2db8:	6f 5e       	subi	r22, 0xEF	; 239
    2dba:	7f 4f       	sbci	r23, 0xFF	; 255
    2dbc:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    2dc0:	99 85       	ldd	r25, Y+9	; 0x09
    2dc2:	92 30       	cpi	r25, 0x02	; 2
    2dc4:	88 f0       	brcs	.+34     	; 0x2de8 <__mulsf3+0x60>
    2dc6:	89 89       	ldd	r24, Y+17	; 0x11
    2dc8:	82 30       	cpi	r24, 0x02	; 2
    2dca:	c8 f0       	brcs	.+50     	; 0x2dfe <__mulsf3+0x76>
    2dcc:	94 30       	cpi	r25, 0x04	; 4
    2dce:	19 f4       	brne	.+6      	; 0x2dd6 <__mulsf3+0x4e>
    2dd0:	82 30       	cpi	r24, 0x02	; 2
    2dd2:	51 f4       	brne	.+20     	; 0x2de8 <__mulsf3+0x60>
    2dd4:	04 c0       	rjmp	.+8      	; 0x2dde <__mulsf3+0x56>
    2dd6:	84 30       	cpi	r24, 0x04	; 4
    2dd8:	29 f4       	brne	.+10     	; 0x2de4 <__mulsf3+0x5c>
    2dda:	92 30       	cpi	r25, 0x02	; 2
    2ddc:	81 f4       	brne	.+32     	; 0x2dfe <__mulsf3+0x76>
    2dde:	80 e0       	ldi	r24, 0x00	; 0
    2de0:	91 e0       	ldi	r25, 0x01	; 1
    2de2:	c6 c0       	rjmp	.+396    	; 0x2f70 <__mulsf3+0x1e8>
    2de4:	92 30       	cpi	r25, 0x02	; 2
    2de6:	49 f4       	brne	.+18     	; 0x2dfa <__mulsf3+0x72>
    2de8:	20 e0       	ldi	r18, 0x00	; 0
    2dea:	9a 85       	ldd	r25, Y+10	; 0x0a
    2dec:	8a 89       	ldd	r24, Y+18	; 0x12
    2dee:	98 13       	cpse	r25, r24
    2df0:	21 e0       	ldi	r18, 0x01	; 1
    2df2:	2a 87       	std	Y+10, r18	; 0x0a
    2df4:	ce 01       	movw	r24, r28
    2df6:	09 96       	adiw	r24, 0x09	; 9
    2df8:	bb c0       	rjmp	.+374    	; 0x2f70 <__mulsf3+0x1e8>
    2dfa:	82 30       	cpi	r24, 0x02	; 2
    2dfc:	49 f4       	brne	.+18     	; 0x2e10 <__mulsf3+0x88>
    2dfe:	20 e0       	ldi	r18, 0x00	; 0
    2e00:	9a 85       	ldd	r25, Y+10	; 0x0a
    2e02:	8a 89       	ldd	r24, Y+18	; 0x12
    2e04:	98 13       	cpse	r25, r24
    2e06:	21 e0       	ldi	r18, 0x01	; 1
    2e08:	2a 8b       	std	Y+18, r18	; 0x12
    2e0a:	ce 01       	movw	r24, r28
    2e0c:	41 96       	adiw	r24, 0x11	; 17
    2e0e:	b0 c0       	rjmp	.+352    	; 0x2f70 <__mulsf3+0x1e8>
    2e10:	2d 84       	ldd	r2, Y+13	; 0x0d
    2e12:	3e 84       	ldd	r3, Y+14	; 0x0e
    2e14:	4f 84       	ldd	r4, Y+15	; 0x0f
    2e16:	58 88       	ldd	r5, Y+16	; 0x10
    2e18:	6d 88       	ldd	r6, Y+21	; 0x15
    2e1a:	7e 88       	ldd	r7, Y+22	; 0x16
    2e1c:	8f 88       	ldd	r8, Y+23	; 0x17
    2e1e:	98 8c       	ldd	r9, Y+24	; 0x18
    2e20:	ee 24       	eor	r14, r14
    2e22:	ff 24       	eor	r15, r15
    2e24:	87 01       	movw	r16, r14
    2e26:	aa 24       	eor	r10, r10
    2e28:	bb 24       	eor	r11, r11
    2e2a:	65 01       	movw	r12, r10
    2e2c:	40 e0       	ldi	r20, 0x00	; 0
    2e2e:	50 e0       	ldi	r21, 0x00	; 0
    2e30:	60 e0       	ldi	r22, 0x00	; 0
    2e32:	70 e0       	ldi	r23, 0x00	; 0
    2e34:	e0 e0       	ldi	r30, 0x00	; 0
    2e36:	f0 e0       	ldi	r31, 0x00	; 0
    2e38:	c1 01       	movw	r24, r2
    2e3a:	81 70       	andi	r24, 0x01	; 1
    2e3c:	90 70       	andi	r25, 0x00	; 0
    2e3e:	89 2b       	or	r24, r25
    2e40:	e9 f0       	breq	.+58     	; 0x2e7c <__mulsf3+0xf4>
    2e42:	e6 0c       	add	r14, r6
    2e44:	f7 1c       	adc	r15, r7
    2e46:	08 1d       	adc	r16, r8
    2e48:	19 1d       	adc	r17, r9
    2e4a:	9a 01       	movw	r18, r20
    2e4c:	ab 01       	movw	r20, r22
    2e4e:	2a 0d       	add	r18, r10
    2e50:	3b 1d       	adc	r19, r11
    2e52:	4c 1d       	adc	r20, r12
    2e54:	5d 1d       	adc	r21, r13
    2e56:	80 e0       	ldi	r24, 0x00	; 0
    2e58:	90 e0       	ldi	r25, 0x00	; 0
    2e5a:	a0 e0       	ldi	r26, 0x00	; 0
    2e5c:	b0 e0       	ldi	r27, 0x00	; 0
    2e5e:	e6 14       	cp	r14, r6
    2e60:	f7 04       	cpc	r15, r7
    2e62:	08 05       	cpc	r16, r8
    2e64:	19 05       	cpc	r17, r9
    2e66:	20 f4       	brcc	.+8      	; 0x2e70 <__mulsf3+0xe8>
    2e68:	81 e0       	ldi	r24, 0x01	; 1
    2e6a:	90 e0       	ldi	r25, 0x00	; 0
    2e6c:	a0 e0       	ldi	r26, 0x00	; 0
    2e6e:	b0 e0       	ldi	r27, 0x00	; 0
    2e70:	ba 01       	movw	r22, r20
    2e72:	a9 01       	movw	r20, r18
    2e74:	48 0f       	add	r20, r24
    2e76:	59 1f       	adc	r21, r25
    2e78:	6a 1f       	adc	r22, r26
    2e7a:	7b 1f       	adc	r23, r27
    2e7c:	aa 0c       	add	r10, r10
    2e7e:	bb 1c       	adc	r11, r11
    2e80:	cc 1c       	adc	r12, r12
    2e82:	dd 1c       	adc	r13, r13
    2e84:	97 fe       	sbrs	r9, 7
    2e86:	08 c0       	rjmp	.+16     	; 0x2e98 <__mulsf3+0x110>
    2e88:	81 e0       	ldi	r24, 0x01	; 1
    2e8a:	90 e0       	ldi	r25, 0x00	; 0
    2e8c:	a0 e0       	ldi	r26, 0x00	; 0
    2e8e:	b0 e0       	ldi	r27, 0x00	; 0
    2e90:	a8 2a       	or	r10, r24
    2e92:	b9 2a       	or	r11, r25
    2e94:	ca 2a       	or	r12, r26
    2e96:	db 2a       	or	r13, r27
    2e98:	31 96       	adiw	r30, 0x01	; 1
    2e9a:	e0 32       	cpi	r30, 0x20	; 32
    2e9c:	f1 05       	cpc	r31, r1
    2e9e:	49 f0       	breq	.+18     	; 0x2eb2 <__mulsf3+0x12a>
    2ea0:	66 0c       	add	r6, r6
    2ea2:	77 1c       	adc	r7, r7
    2ea4:	88 1c       	adc	r8, r8
    2ea6:	99 1c       	adc	r9, r9
    2ea8:	56 94       	lsr	r5
    2eaa:	47 94       	ror	r4
    2eac:	37 94       	ror	r3
    2eae:	27 94       	ror	r2
    2eb0:	c3 cf       	rjmp	.-122    	; 0x2e38 <__mulsf3+0xb0>
    2eb2:	fa 85       	ldd	r31, Y+10	; 0x0a
    2eb4:	ea 89       	ldd	r30, Y+18	; 0x12
    2eb6:	2b 89       	ldd	r18, Y+19	; 0x13
    2eb8:	3c 89       	ldd	r19, Y+20	; 0x14
    2eba:	8b 85       	ldd	r24, Y+11	; 0x0b
    2ebc:	9c 85       	ldd	r25, Y+12	; 0x0c
    2ebe:	28 0f       	add	r18, r24
    2ec0:	39 1f       	adc	r19, r25
    2ec2:	2e 5f       	subi	r18, 0xFE	; 254
    2ec4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ec6:	17 c0       	rjmp	.+46     	; 0x2ef6 <__mulsf3+0x16e>
    2ec8:	ca 01       	movw	r24, r20
    2eca:	81 70       	andi	r24, 0x01	; 1
    2ecc:	90 70       	andi	r25, 0x00	; 0
    2ece:	89 2b       	or	r24, r25
    2ed0:	61 f0       	breq	.+24     	; 0x2eea <__mulsf3+0x162>
    2ed2:	16 95       	lsr	r17
    2ed4:	07 95       	ror	r16
    2ed6:	f7 94       	ror	r15
    2ed8:	e7 94       	ror	r14
    2eda:	80 e0       	ldi	r24, 0x00	; 0
    2edc:	90 e0       	ldi	r25, 0x00	; 0
    2ede:	a0 e0       	ldi	r26, 0x00	; 0
    2ee0:	b0 e8       	ldi	r27, 0x80	; 128
    2ee2:	e8 2a       	or	r14, r24
    2ee4:	f9 2a       	or	r15, r25
    2ee6:	0a 2b       	or	r16, r26
    2ee8:	1b 2b       	or	r17, r27
    2eea:	76 95       	lsr	r23
    2eec:	67 95       	ror	r22
    2eee:	57 95       	ror	r21
    2ef0:	47 95       	ror	r20
    2ef2:	2f 5f       	subi	r18, 0xFF	; 255
    2ef4:	3f 4f       	sbci	r19, 0xFF	; 255
    2ef6:	77 fd       	sbrc	r23, 7
    2ef8:	e7 cf       	rjmp	.-50     	; 0x2ec8 <__mulsf3+0x140>
    2efa:	0c c0       	rjmp	.+24     	; 0x2f14 <__mulsf3+0x18c>
    2efc:	44 0f       	add	r20, r20
    2efe:	55 1f       	adc	r21, r21
    2f00:	66 1f       	adc	r22, r22
    2f02:	77 1f       	adc	r23, r23
    2f04:	17 fd       	sbrc	r17, 7
    2f06:	41 60       	ori	r20, 0x01	; 1
    2f08:	ee 0c       	add	r14, r14
    2f0a:	ff 1c       	adc	r15, r15
    2f0c:	00 1f       	adc	r16, r16
    2f0e:	11 1f       	adc	r17, r17
    2f10:	21 50       	subi	r18, 0x01	; 1
    2f12:	30 40       	sbci	r19, 0x00	; 0
    2f14:	40 30       	cpi	r20, 0x00	; 0
    2f16:	90 e0       	ldi	r25, 0x00	; 0
    2f18:	59 07       	cpc	r21, r25
    2f1a:	90 e0       	ldi	r25, 0x00	; 0
    2f1c:	69 07       	cpc	r22, r25
    2f1e:	90 e4       	ldi	r25, 0x40	; 64
    2f20:	79 07       	cpc	r23, r25
    2f22:	60 f3       	brcs	.-40     	; 0x2efc <__mulsf3+0x174>
    2f24:	2b 8f       	std	Y+27, r18	; 0x1b
    2f26:	3c 8f       	std	Y+28, r19	; 0x1c
    2f28:	db 01       	movw	r26, r22
    2f2a:	ca 01       	movw	r24, r20
    2f2c:	8f 77       	andi	r24, 0x7F	; 127
    2f2e:	90 70       	andi	r25, 0x00	; 0
    2f30:	a0 70       	andi	r26, 0x00	; 0
    2f32:	b0 70       	andi	r27, 0x00	; 0
    2f34:	80 34       	cpi	r24, 0x40	; 64
    2f36:	91 05       	cpc	r25, r1
    2f38:	a1 05       	cpc	r26, r1
    2f3a:	b1 05       	cpc	r27, r1
    2f3c:	61 f4       	brne	.+24     	; 0x2f56 <__mulsf3+0x1ce>
    2f3e:	47 fd       	sbrc	r20, 7
    2f40:	0a c0       	rjmp	.+20     	; 0x2f56 <__mulsf3+0x1ce>
    2f42:	e1 14       	cp	r14, r1
    2f44:	f1 04       	cpc	r15, r1
    2f46:	01 05       	cpc	r16, r1
    2f48:	11 05       	cpc	r17, r1
    2f4a:	29 f0       	breq	.+10     	; 0x2f56 <__mulsf3+0x1ce>
    2f4c:	40 5c       	subi	r20, 0xC0	; 192
    2f4e:	5f 4f       	sbci	r21, 0xFF	; 255
    2f50:	6f 4f       	sbci	r22, 0xFF	; 255
    2f52:	7f 4f       	sbci	r23, 0xFF	; 255
    2f54:	40 78       	andi	r20, 0x80	; 128
    2f56:	1a 8e       	std	Y+26, r1	; 0x1a
    2f58:	fe 17       	cp	r31, r30
    2f5a:	11 f0       	breq	.+4      	; 0x2f60 <__mulsf3+0x1d8>
    2f5c:	81 e0       	ldi	r24, 0x01	; 1
    2f5e:	8a 8f       	std	Y+26, r24	; 0x1a
    2f60:	4d 8f       	std	Y+29, r20	; 0x1d
    2f62:	5e 8f       	std	Y+30, r21	; 0x1e
    2f64:	6f 8f       	std	Y+31, r22	; 0x1f
    2f66:	78 a3       	std	Y+32, r23	; 0x20
    2f68:	83 e0       	ldi	r24, 0x03	; 3
    2f6a:	89 8f       	std	Y+25, r24	; 0x19
    2f6c:	ce 01       	movw	r24, r28
    2f6e:	49 96       	adiw	r24, 0x19	; 25
    2f70:	0e 94 4e 19 	call	0x329c	; 0x329c <__pack_f>
    2f74:	a0 96       	adiw	r28, 0x20	; 32
    2f76:	e2 e1       	ldi	r30, 0x12	; 18
    2f78:	0c 94 32 1b 	jmp	0x3664	; 0x3664 <__epilogue_restores__>

00002f7c <__divsf3>:
    2f7c:	a8 e1       	ldi	r26, 0x18	; 24
    2f7e:	b0 e0       	ldi	r27, 0x00	; 0
    2f80:	e4 ec       	ldi	r30, 0xC4	; 196
    2f82:	f7 e1       	ldi	r31, 0x17	; 23
    2f84:	0c 94 1e 1b 	jmp	0x363c	; 0x363c <__prologue_saves__+0x10>
    2f88:	69 83       	std	Y+1, r22	; 0x01
    2f8a:	7a 83       	std	Y+2, r23	; 0x02
    2f8c:	8b 83       	std	Y+3, r24	; 0x03
    2f8e:	9c 83       	std	Y+4, r25	; 0x04
    2f90:	2d 83       	std	Y+5, r18	; 0x05
    2f92:	3e 83       	std	Y+6, r19	; 0x06
    2f94:	4f 83       	std	Y+7, r20	; 0x07
    2f96:	58 87       	std	Y+8, r21	; 0x08
    2f98:	b9 e0       	ldi	r27, 0x09	; 9
    2f9a:	eb 2e       	mov	r14, r27
    2f9c:	f1 2c       	mov	r15, r1
    2f9e:	ec 0e       	add	r14, r28
    2fa0:	fd 1e       	adc	r15, r29
    2fa2:	ce 01       	movw	r24, r28
    2fa4:	01 96       	adiw	r24, 0x01	; 1
    2fa6:	b7 01       	movw	r22, r14
    2fa8:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    2fac:	8e 01       	movw	r16, r28
    2fae:	0f 5e       	subi	r16, 0xEF	; 239
    2fb0:	1f 4f       	sbci	r17, 0xFF	; 255
    2fb2:	ce 01       	movw	r24, r28
    2fb4:	05 96       	adiw	r24, 0x05	; 5
    2fb6:	b8 01       	movw	r22, r16
    2fb8:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    2fbc:	29 85       	ldd	r18, Y+9	; 0x09
    2fbe:	22 30       	cpi	r18, 0x02	; 2
    2fc0:	08 f4       	brcc	.+2      	; 0x2fc4 <__divsf3+0x48>
    2fc2:	7e c0       	rjmp	.+252    	; 0x30c0 <__divsf3+0x144>
    2fc4:	39 89       	ldd	r19, Y+17	; 0x11
    2fc6:	32 30       	cpi	r19, 0x02	; 2
    2fc8:	10 f4       	brcc	.+4      	; 0x2fce <__divsf3+0x52>
    2fca:	b8 01       	movw	r22, r16
    2fcc:	7c c0       	rjmp	.+248    	; 0x30c6 <__divsf3+0x14a>
    2fce:	8a 85       	ldd	r24, Y+10	; 0x0a
    2fd0:	9a 89       	ldd	r25, Y+18	; 0x12
    2fd2:	89 27       	eor	r24, r25
    2fd4:	8a 87       	std	Y+10, r24	; 0x0a
    2fd6:	24 30       	cpi	r18, 0x04	; 4
    2fd8:	11 f0       	breq	.+4      	; 0x2fde <__divsf3+0x62>
    2fda:	22 30       	cpi	r18, 0x02	; 2
    2fdc:	31 f4       	brne	.+12     	; 0x2fea <__divsf3+0x6e>
    2fde:	23 17       	cp	r18, r19
    2fe0:	09 f0       	breq	.+2      	; 0x2fe4 <__divsf3+0x68>
    2fe2:	6e c0       	rjmp	.+220    	; 0x30c0 <__divsf3+0x144>
    2fe4:	60 e0       	ldi	r22, 0x00	; 0
    2fe6:	71 e0       	ldi	r23, 0x01	; 1
    2fe8:	6e c0       	rjmp	.+220    	; 0x30c6 <__divsf3+0x14a>
    2fea:	34 30       	cpi	r19, 0x04	; 4
    2fec:	39 f4       	brne	.+14     	; 0x2ffc <__divsf3+0x80>
    2fee:	1d 86       	std	Y+13, r1	; 0x0d
    2ff0:	1e 86       	std	Y+14, r1	; 0x0e
    2ff2:	1f 86       	std	Y+15, r1	; 0x0f
    2ff4:	18 8a       	std	Y+16, r1	; 0x10
    2ff6:	1c 86       	std	Y+12, r1	; 0x0c
    2ff8:	1b 86       	std	Y+11, r1	; 0x0b
    2ffa:	04 c0       	rjmp	.+8      	; 0x3004 <__divsf3+0x88>
    2ffc:	32 30       	cpi	r19, 0x02	; 2
    2ffe:	21 f4       	brne	.+8      	; 0x3008 <__divsf3+0x8c>
    3000:	84 e0       	ldi	r24, 0x04	; 4
    3002:	89 87       	std	Y+9, r24	; 0x09
    3004:	b7 01       	movw	r22, r14
    3006:	5f c0       	rjmp	.+190    	; 0x30c6 <__divsf3+0x14a>
    3008:	2b 85       	ldd	r18, Y+11	; 0x0b
    300a:	3c 85       	ldd	r19, Y+12	; 0x0c
    300c:	8b 89       	ldd	r24, Y+19	; 0x13
    300e:	9c 89       	ldd	r25, Y+20	; 0x14
    3010:	28 1b       	sub	r18, r24
    3012:	39 0b       	sbc	r19, r25
    3014:	3c 87       	std	Y+12, r19	; 0x0c
    3016:	2b 87       	std	Y+11, r18	; 0x0b
    3018:	ed 84       	ldd	r14, Y+13	; 0x0d
    301a:	fe 84       	ldd	r15, Y+14	; 0x0e
    301c:	0f 85       	ldd	r16, Y+15	; 0x0f
    301e:	18 89       	ldd	r17, Y+16	; 0x10
    3020:	ad 88       	ldd	r10, Y+21	; 0x15
    3022:	be 88       	ldd	r11, Y+22	; 0x16
    3024:	cf 88       	ldd	r12, Y+23	; 0x17
    3026:	d8 8c       	ldd	r13, Y+24	; 0x18
    3028:	ea 14       	cp	r14, r10
    302a:	fb 04       	cpc	r15, r11
    302c:	0c 05       	cpc	r16, r12
    302e:	1d 05       	cpc	r17, r13
    3030:	40 f4       	brcc	.+16     	; 0x3042 <__divsf3+0xc6>
    3032:	ee 0c       	add	r14, r14
    3034:	ff 1c       	adc	r15, r15
    3036:	00 1f       	adc	r16, r16
    3038:	11 1f       	adc	r17, r17
    303a:	21 50       	subi	r18, 0x01	; 1
    303c:	30 40       	sbci	r19, 0x00	; 0
    303e:	3c 87       	std	Y+12, r19	; 0x0c
    3040:	2b 87       	std	Y+11, r18	; 0x0b
    3042:	20 e0       	ldi	r18, 0x00	; 0
    3044:	30 e0       	ldi	r19, 0x00	; 0
    3046:	40 e0       	ldi	r20, 0x00	; 0
    3048:	50 e0       	ldi	r21, 0x00	; 0
    304a:	80 e0       	ldi	r24, 0x00	; 0
    304c:	90 e0       	ldi	r25, 0x00	; 0
    304e:	a0 e0       	ldi	r26, 0x00	; 0
    3050:	b0 e4       	ldi	r27, 0x40	; 64
    3052:	60 e0       	ldi	r22, 0x00	; 0
    3054:	70 e0       	ldi	r23, 0x00	; 0
    3056:	ea 14       	cp	r14, r10
    3058:	fb 04       	cpc	r15, r11
    305a:	0c 05       	cpc	r16, r12
    305c:	1d 05       	cpc	r17, r13
    305e:	40 f0       	brcs	.+16     	; 0x3070 <__divsf3+0xf4>
    3060:	28 2b       	or	r18, r24
    3062:	39 2b       	or	r19, r25
    3064:	4a 2b       	or	r20, r26
    3066:	5b 2b       	or	r21, r27
    3068:	ea 18       	sub	r14, r10
    306a:	fb 08       	sbc	r15, r11
    306c:	0c 09       	sbc	r16, r12
    306e:	1d 09       	sbc	r17, r13
    3070:	b6 95       	lsr	r27
    3072:	a7 95       	ror	r26
    3074:	97 95       	ror	r25
    3076:	87 95       	ror	r24
    3078:	ee 0c       	add	r14, r14
    307a:	ff 1c       	adc	r15, r15
    307c:	00 1f       	adc	r16, r16
    307e:	11 1f       	adc	r17, r17
    3080:	6f 5f       	subi	r22, 0xFF	; 255
    3082:	7f 4f       	sbci	r23, 0xFF	; 255
    3084:	6f 31       	cpi	r22, 0x1F	; 31
    3086:	71 05       	cpc	r23, r1
    3088:	31 f7       	brne	.-52     	; 0x3056 <__divsf3+0xda>
    308a:	da 01       	movw	r26, r20
    308c:	c9 01       	movw	r24, r18
    308e:	8f 77       	andi	r24, 0x7F	; 127
    3090:	90 70       	andi	r25, 0x00	; 0
    3092:	a0 70       	andi	r26, 0x00	; 0
    3094:	b0 70       	andi	r27, 0x00	; 0
    3096:	80 34       	cpi	r24, 0x40	; 64
    3098:	91 05       	cpc	r25, r1
    309a:	a1 05       	cpc	r26, r1
    309c:	b1 05       	cpc	r27, r1
    309e:	61 f4       	brne	.+24     	; 0x30b8 <__divsf3+0x13c>
    30a0:	27 fd       	sbrc	r18, 7
    30a2:	0a c0       	rjmp	.+20     	; 0x30b8 <__divsf3+0x13c>
    30a4:	e1 14       	cp	r14, r1
    30a6:	f1 04       	cpc	r15, r1
    30a8:	01 05       	cpc	r16, r1
    30aa:	11 05       	cpc	r17, r1
    30ac:	29 f0       	breq	.+10     	; 0x30b8 <__divsf3+0x13c>
    30ae:	20 5c       	subi	r18, 0xC0	; 192
    30b0:	3f 4f       	sbci	r19, 0xFF	; 255
    30b2:	4f 4f       	sbci	r20, 0xFF	; 255
    30b4:	5f 4f       	sbci	r21, 0xFF	; 255
    30b6:	20 78       	andi	r18, 0x80	; 128
    30b8:	2d 87       	std	Y+13, r18	; 0x0d
    30ba:	3e 87       	std	Y+14, r19	; 0x0e
    30bc:	4f 87       	std	Y+15, r20	; 0x0f
    30be:	58 8b       	std	Y+16, r21	; 0x10
    30c0:	be 01       	movw	r22, r28
    30c2:	67 5f       	subi	r22, 0xF7	; 247
    30c4:	7f 4f       	sbci	r23, 0xFF	; 255
    30c6:	cb 01       	movw	r24, r22
    30c8:	0e 94 4e 19 	call	0x329c	; 0x329c <__pack_f>
    30cc:	68 96       	adiw	r28, 0x18	; 24
    30ce:	ea e0       	ldi	r30, 0x0A	; 10
    30d0:	0c 94 3a 1b 	jmp	0x3674	; 0x3674 <__epilogue_restores__+0x10>

000030d4 <__gtsf2>:
    30d4:	a8 e1       	ldi	r26, 0x18	; 24
    30d6:	b0 e0       	ldi	r27, 0x00	; 0
    30d8:	e0 e7       	ldi	r30, 0x70	; 112
    30da:	f8 e1       	ldi	r31, 0x18	; 24
    30dc:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__prologue_saves__+0x18>
    30e0:	69 83       	std	Y+1, r22	; 0x01
    30e2:	7a 83       	std	Y+2, r23	; 0x02
    30e4:	8b 83       	std	Y+3, r24	; 0x03
    30e6:	9c 83       	std	Y+4, r25	; 0x04
    30e8:	2d 83       	std	Y+5, r18	; 0x05
    30ea:	3e 83       	std	Y+6, r19	; 0x06
    30ec:	4f 83       	std	Y+7, r20	; 0x07
    30ee:	58 87       	std	Y+8, r21	; 0x08
    30f0:	89 e0       	ldi	r24, 0x09	; 9
    30f2:	e8 2e       	mov	r14, r24
    30f4:	f1 2c       	mov	r15, r1
    30f6:	ec 0e       	add	r14, r28
    30f8:	fd 1e       	adc	r15, r29
    30fa:	ce 01       	movw	r24, r28
    30fc:	01 96       	adiw	r24, 0x01	; 1
    30fe:	b7 01       	movw	r22, r14
    3100:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    3104:	8e 01       	movw	r16, r28
    3106:	0f 5e       	subi	r16, 0xEF	; 239
    3108:	1f 4f       	sbci	r17, 0xFF	; 255
    310a:	ce 01       	movw	r24, r28
    310c:	05 96       	adiw	r24, 0x05	; 5
    310e:	b8 01       	movw	r22, r16
    3110:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    3114:	89 85       	ldd	r24, Y+9	; 0x09
    3116:	82 30       	cpi	r24, 0x02	; 2
    3118:	40 f0       	brcs	.+16     	; 0x312a <__gtsf2+0x56>
    311a:	89 89       	ldd	r24, Y+17	; 0x11
    311c:	82 30       	cpi	r24, 0x02	; 2
    311e:	28 f0       	brcs	.+10     	; 0x312a <__gtsf2+0x56>
    3120:	c7 01       	movw	r24, r14
    3122:	b8 01       	movw	r22, r16
    3124:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fpcmp_parts_f>
    3128:	01 c0       	rjmp	.+2      	; 0x312c <__gtsf2+0x58>
    312a:	8f ef       	ldi	r24, 0xFF	; 255
    312c:	68 96       	adiw	r28, 0x18	; 24
    312e:	e6 e0       	ldi	r30, 0x06	; 6
    3130:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__epilogue_restores__+0x18>

00003134 <__gesf2>:
    3134:	a8 e1       	ldi	r26, 0x18	; 24
    3136:	b0 e0       	ldi	r27, 0x00	; 0
    3138:	e0 ea       	ldi	r30, 0xA0	; 160
    313a:	f8 e1       	ldi	r31, 0x18	; 24
    313c:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__prologue_saves__+0x18>
    3140:	69 83       	std	Y+1, r22	; 0x01
    3142:	7a 83       	std	Y+2, r23	; 0x02
    3144:	8b 83       	std	Y+3, r24	; 0x03
    3146:	9c 83       	std	Y+4, r25	; 0x04
    3148:	2d 83       	std	Y+5, r18	; 0x05
    314a:	3e 83       	std	Y+6, r19	; 0x06
    314c:	4f 83       	std	Y+7, r20	; 0x07
    314e:	58 87       	std	Y+8, r21	; 0x08
    3150:	89 e0       	ldi	r24, 0x09	; 9
    3152:	e8 2e       	mov	r14, r24
    3154:	f1 2c       	mov	r15, r1
    3156:	ec 0e       	add	r14, r28
    3158:	fd 1e       	adc	r15, r29
    315a:	ce 01       	movw	r24, r28
    315c:	01 96       	adiw	r24, 0x01	; 1
    315e:	b7 01       	movw	r22, r14
    3160:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    3164:	8e 01       	movw	r16, r28
    3166:	0f 5e       	subi	r16, 0xEF	; 239
    3168:	1f 4f       	sbci	r17, 0xFF	; 255
    316a:	ce 01       	movw	r24, r28
    316c:	05 96       	adiw	r24, 0x05	; 5
    316e:	b8 01       	movw	r22, r16
    3170:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    3174:	89 85       	ldd	r24, Y+9	; 0x09
    3176:	82 30       	cpi	r24, 0x02	; 2
    3178:	40 f0       	brcs	.+16     	; 0x318a <__gesf2+0x56>
    317a:	89 89       	ldd	r24, Y+17	; 0x11
    317c:	82 30       	cpi	r24, 0x02	; 2
    317e:	28 f0       	brcs	.+10     	; 0x318a <__gesf2+0x56>
    3180:	c7 01       	movw	r24, r14
    3182:	b8 01       	movw	r22, r16
    3184:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fpcmp_parts_f>
    3188:	01 c0       	rjmp	.+2      	; 0x318c <__gesf2+0x58>
    318a:	8f ef       	ldi	r24, 0xFF	; 255
    318c:	68 96       	adiw	r28, 0x18	; 24
    318e:	e6 e0       	ldi	r30, 0x06	; 6
    3190:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__epilogue_restores__+0x18>

00003194 <__ltsf2>:
    3194:	a8 e1       	ldi	r26, 0x18	; 24
    3196:	b0 e0       	ldi	r27, 0x00	; 0
    3198:	e0 ed       	ldi	r30, 0xD0	; 208
    319a:	f8 e1       	ldi	r31, 0x18	; 24
    319c:	0c 94 22 1b 	jmp	0x3644	; 0x3644 <__prologue_saves__+0x18>
    31a0:	69 83       	std	Y+1, r22	; 0x01
    31a2:	7a 83       	std	Y+2, r23	; 0x02
    31a4:	8b 83       	std	Y+3, r24	; 0x03
    31a6:	9c 83       	std	Y+4, r25	; 0x04
    31a8:	2d 83       	std	Y+5, r18	; 0x05
    31aa:	3e 83       	std	Y+6, r19	; 0x06
    31ac:	4f 83       	std	Y+7, r20	; 0x07
    31ae:	58 87       	std	Y+8, r21	; 0x08
    31b0:	89 e0       	ldi	r24, 0x09	; 9
    31b2:	e8 2e       	mov	r14, r24
    31b4:	f1 2c       	mov	r15, r1
    31b6:	ec 0e       	add	r14, r28
    31b8:	fd 1e       	adc	r15, r29
    31ba:	ce 01       	movw	r24, r28
    31bc:	01 96       	adiw	r24, 0x01	; 1
    31be:	b7 01       	movw	r22, r14
    31c0:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    31c4:	8e 01       	movw	r16, r28
    31c6:	0f 5e       	subi	r16, 0xEF	; 239
    31c8:	1f 4f       	sbci	r17, 0xFF	; 255
    31ca:	ce 01       	movw	r24, r28
    31cc:	05 96       	adiw	r24, 0x05	; 5
    31ce:	b8 01       	movw	r22, r16
    31d0:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    31d4:	89 85       	ldd	r24, Y+9	; 0x09
    31d6:	82 30       	cpi	r24, 0x02	; 2
    31d8:	40 f0       	brcs	.+16     	; 0x31ea <__ltsf2+0x56>
    31da:	89 89       	ldd	r24, Y+17	; 0x11
    31dc:	82 30       	cpi	r24, 0x02	; 2
    31de:	28 f0       	brcs	.+10     	; 0x31ea <__ltsf2+0x56>
    31e0:	c7 01       	movw	r24, r14
    31e2:	b8 01       	movw	r22, r16
    31e4:	0e 94 9b 1a 	call	0x3536	; 0x3536 <__fpcmp_parts_f>
    31e8:	01 c0       	rjmp	.+2      	; 0x31ec <__ltsf2+0x58>
    31ea:	81 e0       	ldi	r24, 0x01	; 1
    31ec:	68 96       	adiw	r28, 0x18	; 24
    31ee:	e6 e0       	ldi	r30, 0x06	; 6
    31f0:	0c 94 3e 1b 	jmp	0x367c	; 0x367c <__epilogue_restores__+0x18>

000031f4 <__fixsfsi>:
    31f4:	ac e0       	ldi	r26, 0x0C	; 12
    31f6:	b0 e0       	ldi	r27, 0x00	; 0
    31f8:	e0 e0       	ldi	r30, 0x00	; 0
    31fa:	f9 e1       	ldi	r31, 0x19	; 25
    31fc:	0c 94 26 1b 	jmp	0x364c	; 0x364c <__prologue_saves__+0x20>
    3200:	69 83       	std	Y+1, r22	; 0x01
    3202:	7a 83       	std	Y+2, r23	; 0x02
    3204:	8b 83       	std	Y+3, r24	; 0x03
    3206:	9c 83       	std	Y+4, r25	; 0x04
    3208:	ce 01       	movw	r24, r28
    320a:	01 96       	adiw	r24, 0x01	; 1
    320c:	be 01       	movw	r22, r28
    320e:	6b 5f       	subi	r22, 0xFB	; 251
    3210:	7f 4f       	sbci	r23, 0xFF	; 255
    3212:	0e 94 23 1a 	call	0x3446	; 0x3446 <__unpack_f>
    3216:	8d 81       	ldd	r24, Y+5	; 0x05
    3218:	82 30       	cpi	r24, 0x02	; 2
    321a:	61 f1       	breq	.+88     	; 0x3274 <__fixsfsi+0x80>
    321c:	82 30       	cpi	r24, 0x02	; 2
    321e:	50 f1       	brcs	.+84     	; 0x3274 <__fixsfsi+0x80>
    3220:	84 30       	cpi	r24, 0x04	; 4
    3222:	21 f4       	brne	.+8      	; 0x322c <__fixsfsi+0x38>
    3224:	8e 81       	ldd	r24, Y+6	; 0x06
    3226:	88 23       	and	r24, r24
    3228:	51 f1       	breq	.+84     	; 0x327e <__fixsfsi+0x8a>
    322a:	2e c0       	rjmp	.+92     	; 0x3288 <__fixsfsi+0x94>
    322c:	2f 81       	ldd	r18, Y+7	; 0x07
    322e:	38 85       	ldd	r19, Y+8	; 0x08
    3230:	37 fd       	sbrc	r19, 7
    3232:	20 c0       	rjmp	.+64     	; 0x3274 <__fixsfsi+0x80>
    3234:	6e 81       	ldd	r22, Y+6	; 0x06
    3236:	2f 31       	cpi	r18, 0x1F	; 31
    3238:	31 05       	cpc	r19, r1
    323a:	1c f0       	brlt	.+6      	; 0x3242 <__fixsfsi+0x4e>
    323c:	66 23       	and	r22, r22
    323e:	f9 f0       	breq	.+62     	; 0x327e <__fixsfsi+0x8a>
    3240:	23 c0       	rjmp	.+70     	; 0x3288 <__fixsfsi+0x94>
    3242:	8e e1       	ldi	r24, 0x1E	; 30
    3244:	90 e0       	ldi	r25, 0x00	; 0
    3246:	82 1b       	sub	r24, r18
    3248:	93 0b       	sbc	r25, r19
    324a:	29 85       	ldd	r18, Y+9	; 0x09
    324c:	3a 85       	ldd	r19, Y+10	; 0x0a
    324e:	4b 85       	ldd	r20, Y+11	; 0x0b
    3250:	5c 85       	ldd	r21, Y+12	; 0x0c
    3252:	04 c0       	rjmp	.+8      	; 0x325c <__fixsfsi+0x68>
    3254:	56 95       	lsr	r21
    3256:	47 95       	ror	r20
    3258:	37 95       	ror	r19
    325a:	27 95       	ror	r18
    325c:	8a 95       	dec	r24
    325e:	d2 f7       	brpl	.-12     	; 0x3254 <__fixsfsi+0x60>
    3260:	66 23       	and	r22, r22
    3262:	b1 f0       	breq	.+44     	; 0x3290 <__fixsfsi+0x9c>
    3264:	50 95       	com	r21
    3266:	40 95       	com	r20
    3268:	30 95       	com	r19
    326a:	21 95       	neg	r18
    326c:	3f 4f       	sbci	r19, 0xFF	; 255
    326e:	4f 4f       	sbci	r20, 0xFF	; 255
    3270:	5f 4f       	sbci	r21, 0xFF	; 255
    3272:	0e c0       	rjmp	.+28     	; 0x3290 <__fixsfsi+0x9c>
    3274:	20 e0       	ldi	r18, 0x00	; 0
    3276:	30 e0       	ldi	r19, 0x00	; 0
    3278:	40 e0       	ldi	r20, 0x00	; 0
    327a:	50 e0       	ldi	r21, 0x00	; 0
    327c:	09 c0       	rjmp	.+18     	; 0x3290 <__fixsfsi+0x9c>
    327e:	2f ef       	ldi	r18, 0xFF	; 255
    3280:	3f ef       	ldi	r19, 0xFF	; 255
    3282:	4f ef       	ldi	r20, 0xFF	; 255
    3284:	5f e7       	ldi	r21, 0x7F	; 127
    3286:	04 c0       	rjmp	.+8      	; 0x3290 <__fixsfsi+0x9c>
    3288:	20 e0       	ldi	r18, 0x00	; 0
    328a:	30 e0       	ldi	r19, 0x00	; 0
    328c:	40 e0       	ldi	r20, 0x00	; 0
    328e:	50 e8       	ldi	r21, 0x80	; 128
    3290:	b9 01       	movw	r22, r18
    3292:	ca 01       	movw	r24, r20
    3294:	2c 96       	adiw	r28, 0x0c	; 12
    3296:	e2 e0       	ldi	r30, 0x02	; 2
    3298:	0c 94 42 1b 	jmp	0x3684	; 0x3684 <__epilogue_restores__+0x20>

0000329c <__pack_f>:
    329c:	df 92       	push	r13
    329e:	ef 92       	push	r14
    32a0:	ff 92       	push	r15
    32a2:	0f 93       	push	r16
    32a4:	1f 93       	push	r17
    32a6:	fc 01       	movw	r30, r24
    32a8:	e4 80       	ldd	r14, Z+4	; 0x04
    32aa:	f5 80       	ldd	r15, Z+5	; 0x05
    32ac:	06 81       	ldd	r16, Z+6	; 0x06
    32ae:	17 81       	ldd	r17, Z+7	; 0x07
    32b0:	d1 80       	ldd	r13, Z+1	; 0x01
    32b2:	80 81       	ld	r24, Z
    32b4:	82 30       	cpi	r24, 0x02	; 2
    32b6:	48 f4       	brcc	.+18     	; 0x32ca <__pack_f+0x2e>
    32b8:	80 e0       	ldi	r24, 0x00	; 0
    32ba:	90 e0       	ldi	r25, 0x00	; 0
    32bc:	a0 e1       	ldi	r26, 0x10	; 16
    32be:	b0 e0       	ldi	r27, 0x00	; 0
    32c0:	e8 2a       	or	r14, r24
    32c2:	f9 2a       	or	r15, r25
    32c4:	0a 2b       	or	r16, r26
    32c6:	1b 2b       	or	r17, r27
    32c8:	a5 c0       	rjmp	.+330    	; 0x3414 <__pack_f+0x178>
    32ca:	84 30       	cpi	r24, 0x04	; 4
    32cc:	09 f4       	brne	.+2      	; 0x32d0 <__pack_f+0x34>
    32ce:	9f c0       	rjmp	.+318    	; 0x340e <__pack_f+0x172>
    32d0:	82 30       	cpi	r24, 0x02	; 2
    32d2:	21 f4       	brne	.+8      	; 0x32dc <__pack_f+0x40>
    32d4:	ee 24       	eor	r14, r14
    32d6:	ff 24       	eor	r15, r15
    32d8:	87 01       	movw	r16, r14
    32da:	05 c0       	rjmp	.+10     	; 0x32e6 <__pack_f+0x4a>
    32dc:	e1 14       	cp	r14, r1
    32de:	f1 04       	cpc	r15, r1
    32e0:	01 05       	cpc	r16, r1
    32e2:	11 05       	cpc	r17, r1
    32e4:	19 f4       	brne	.+6      	; 0x32ec <__pack_f+0x50>
    32e6:	e0 e0       	ldi	r30, 0x00	; 0
    32e8:	f0 e0       	ldi	r31, 0x00	; 0
    32ea:	96 c0       	rjmp	.+300    	; 0x3418 <__pack_f+0x17c>
    32ec:	62 81       	ldd	r22, Z+2	; 0x02
    32ee:	73 81       	ldd	r23, Z+3	; 0x03
    32f0:	9f ef       	ldi	r25, 0xFF	; 255
    32f2:	62 38       	cpi	r22, 0x82	; 130
    32f4:	79 07       	cpc	r23, r25
    32f6:	0c f0       	brlt	.+2      	; 0x32fa <__pack_f+0x5e>
    32f8:	5b c0       	rjmp	.+182    	; 0x33b0 <__pack_f+0x114>
    32fa:	22 e8       	ldi	r18, 0x82	; 130
    32fc:	3f ef       	ldi	r19, 0xFF	; 255
    32fe:	26 1b       	sub	r18, r22
    3300:	37 0b       	sbc	r19, r23
    3302:	2a 31       	cpi	r18, 0x1A	; 26
    3304:	31 05       	cpc	r19, r1
    3306:	2c f0       	brlt	.+10     	; 0x3312 <__pack_f+0x76>
    3308:	20 e0       	ldi	r18, 0x00	; 0
    330a:	30 e0       	ldi	r19, 0x00	; 0
    330c:	40 e0       	ldi	r20, 0x00	; 0
    330e:	50 e0       	ldi	r21, 0x00	; 0
    3310:	2a c0       	rjmp	.+84     	; 0x3366 <__pack_f+0xca>
    3312:	b8 01       	movw	r22, r16
    3314:	a7 01       	movw	r20, r14
    3316:	02 2e       	mov	r0, r18
    3318:	04 c0       	rjmp	.+8      	; 0x3322 <__pack_f+0x86>
    331a:	76 95       	lsr	r23
    331c:	67 95       	ror	r22
    331e:	57 95       	ror	r21
    3320:	47 95       	ror	r20
    3322:	0a 94       	dec	r0
    3324:	d2 f7       	brpl	.-12     	; 0x331a <__pack_f+0x7e>
    3326:	81 e0       	ldi	r24, 0x01	; 1
    3328:	90 e0       	ldi	r25, 0x00	; 0
    332a:	a0 e0       	ldi	r26, 0x00	; 0
    332c:	b0 e0       	ldi	r27, 0x00	; 0
    332e:	04 c0       	rjmp	.+8      	; 0x3338 <__pack_f+0x9c>
    3330:	88 0f       	add	r24, r24
    3332:	99 1f       	adc	r25, r25
    3334:	aa 1f       	adc	r26, r26
    3336:	bb 1f       	adc	r27, r27
    3338:	2a 95       	dec	r18
    333a:	d2 f7       	brpl	.-12     	; 0x3330 <__pack_f+0x94>
    333c:	01 97       	sbiw	r24, 0x01	; 1
    333e:	a1 09       	sbc	r26, r1
    3340:	b1 09       	sbc	r27, r1
    3342:	8e 21       	and	r24, r14
    3344:	9f 21       	and	r25, r15
    3346:	a0 23       	and	r26, r16
    3348:	b1 23       	and	r27, r17
    334a:	00 97       	sbiw	r24, 0x00	; 0
    334c:	a1 05       	cpc	r26, r1
    334e:	b1 05       	cpc	r27, r1
    3350:	21 f0       	breq	.+8      	; 0x335a <__pack_f+0xbe>
    3352:	81 e0       	ldi	r24, 0x01	; 1
    3354:	90 e0       	ldi	r25, 0x00	; 0
    3356:	a0 e0       	ldi	r26, 0x00	; 0
    3358:	b0 e0       	ldi	r27, 0x00	; 0
    335a:	9a 01       	movw	r18, r20
    335c:	ab 01       	movw	r20, r22
    335e:	28 2b       	or	r18, r24
    3360:	39 2b       	or	r19, r25
    3362:	4a 2b       	or	r20, r26
    3364:	5b 2b       	or	r21, r27
    3366:	da 01       	movw	r26, r20
    3368:	c9 01       	movw	r24, r18
    336a:	8f 77       	andi	r24, 0x7F	; 127
    336c:	90 70       	andi	r25, 0x00	; 0
    336e:	a0 70       	andi	r26, 0x00	; 0
    3370:	b0 70       	andi	r27, 0x00	; 0
    3372:	80 34       	cpi	r24, 0x40	; 64
    3374:	91 05       	cpc	r25, r1
    3376:	a1 05       	cpc	r26, r1
    3378:	b1 05       	cpc	r27, r1
    337a:	39 f4       	brne	.+14     	; 0x338a <__pack_f+0xee>
    337c:	27 ff       	sbrs	r18, 7
    337e:	09 c0       	rjmp	.+18     	; 0x3392 <__pack_f+0xf6>
    3380:	20 5c       	subi	r18, 0xC0	; 192
    3382:	3f 4f       	sbci	r19, 0xFF	; 255
    3384:	4f 4f       	sbci	r20, 0xFF	; 255
    3386:	5f 4f       	sbci	r21, 0xFF	; 255
    3388:	04 c0       	rjmp	.+8      	; 0x3392 <__pack_f+0xf6>
    338a:	21 5c       	subi	r18, 0xC1	; 193
    338c:	3f 4f       	sbci	r19, 0xFF	; 255
    338e:	4f 4f       	sbci	r20, 0xFF	; 255
    3390:	5f 4f       	sbci	r21, 0xFF	; 255
    3392:	e0 e0       	ldi	r30, 0x00	; 0
    3394:	f0 e0       	ldi	r31, 0x00	; 0
    3396:	20 30       	cpi	r18, 0x00	; 0
    3398:	a0 e0       	ldi	r26, 0x00	; 0
    339a:	3a 07       	cpc	r19, r26
    339c:	a0 e0       	ldi	r26, 0x00	; 0
    339e:	4a 07       	cpc	r20, r26
    33a0:	a0 e4       	ldi	r26, 0x40	; 64
    33a2:	5a 07       	cpc	r21, r26
    33a4:	10 f0       	brcs	.+4      	; 0x33aa <__pack_f+0x10e>
    33a6:	e1 e0       	ldi	r30, 0x01	; 1
    33a8:	f0 e0       	ldi	r31, 0x00	; 0
    33aa:	79 01       	movw	r14, r18
    33ac:	8a 01       	movw	r16, r20
    33ae:	27 c0       	rjmp	.+78     	; 0x33fe <__pack_f+0x162>
    33b0:	60 38       	cpi	r22, 0x80	; 128
    33b2:	71 05       	cpc	r23, r1
    33b4:	64 f5       	brge	.+88     	; 0x340e <__pack_f+0x172>
    33b6:	fb 01       	movw	r30, r22
    33b8:	e1 58       	subi	r30, 0x81	; 129
    33ba:	ff 4f       	sbci	r31, 0xFF	; 255
    33bc:	d8 01       	movw	r26, r16
    33be:	c7 01       	movw	r24, r14
    33c0:	8f 77       	andi	r24, 0x7F	; 127
    33c2:	90 70       	andi	r25, 0x00	; 0
    33c4:	a0 70       	andi	r26, 0x00	; 0
    33c6:	b0 70       	andi	r27, 0x00	; 0
    33c8:	80 34       	cpi	r24, 0x40	; 64
    33ca:	91 05       	cpc	r25, r1
    33cc:	a1 05       	cpc	r26, r1
    33ce:	b1 05       	cpc	r27, r1
    33d0:	39 f4       	brne	.+14     	; 0x33e0 <__pack_f+0x144>
    33d2:	e7 fe       	sbrs	r14, 7
    33d4:	0d c0       	rjmp	.+26     	; 0x33f0 <__pack_f+0x154>
    33d6:	80 e4       	ldi	r24, 0x40	; 64
    33d8:	90 e0       	ldi	r25, 0x00	; 0
    33da:	a0 e0       	ldi	r26, 0x00	; 0
    33dc:	b0 e0       	ldi	r27, 0x00	; 0
    33de:	04 c0       	rjmp	.+8      	; 0x33e8 <__pack_f+0x14c>
    33e0:	8f e3       	ldi	r24, 0x3F	; 63
    33e2:	90 e0       	ldi	r25, 0x00	; 0
    33e4:	a0 e0       	ldi	r26, 0x00	; 0
    33e6:	b0 e0       	ldi	r27, 0x00	; 0
    33e8:	e8 0e       	add	r14, r24
    33ea:	f9 1e       	adc	r15, r25
    33ec:	0a 1f       	adc	r16, r26
    33ee:	1b 1f       	adc	r17, r27
    33f0:	17 ff       	sbrs	r17, 7
    33f2:	05 c0       	rjmp	.+10     	; 0x33fe <__pack_f+0x162>
    33f4:	16 95       	lsr	r17
    33f6:	07 95       	ror	r16
    33f8:	f7 94       	ror	r15
    33fa:	e7 94       	ror	r14
    33fc:	31 96       	adiw	r30, 0x01	; 1
    33fe:	87 e0       	ldi	r24, 0x07	; 7
    3400:	16 95       	lsr	r17
    3402:	07 95       	ror	r16
    3404:	f7 94       	ror	r15
    3406:	e7 94       	ror	r14
    3408:	8a 95       	dec	r24
    340a:	d1 f7       	brne	.-12     	; 0x3400 <__pack_f+0x164>
    340c:	05 c0       	rjmp	.+10     	; 0x3418 <__pack_f+0x17c>
    340e:	ee 24       	eor	r14, r14
    3410:	ff 24       	eor	r15, r15
    3412:	87 01       	movw	r16, r14
    3414:	ef ef       	ldi	r30, 0xFF	; 255
    3416:	f0 e0       	ldi	r31, 0x00	; 0
    3418:	6e 2f       	mov	r22, r30
    341a:	67 95       	ror	r22
    341c:	66 27       	eor	r22, r22
    341e:	67 95       	ror	r22
    3420:	90 2f       	mov	r25, r16
    3422:	9f 77       	andi	r25, 0x7F	; 127
    3424:	d7 94       	ror	r13
    3426:	dd 24       	eor	r13, r13
    3428:	d7 94       	ror	r13
    342a:	8e 2f       	mov	r24, r30
    342c:	86 95       	lsr	r24
    342e:	49 2f       	mov	r20, r25
    3430:	46 2b       	or	r20, r22
    3432:	58 2f       	mov	r21, r24
    3434:	5d 29       	or	r21, r13
    3436:	b7 01       	movw	r22, r14
    3438:	ca 01       	movw	r24, r20
    343a:	1f 91       	pop	r17
    343c:	0f 91       	pop	r16
    343e:	ff 90       	pop	r15
    3440:	ef 90       	pop	r14
    3442:	df 90       	pop	r13
    3444:	08 95       	ret

00003446 <__unpack_f>:
    3446:	fc 01       	movw	r30, r24
    3448:	db 01       	movw	r26, r22
    344a:	40 81       	ld	r20, Z
    344c:	51 81       	ldd	r21, Z+1	; 0x01
    344e:	22 81       	ldd	r18, Z+2	; 0x02
    3450:	62 2f       	mov	r22, r18
    3452:	6f 77       	andi	r22, 0x7F	; 127
    3454:	70 e0       	ldi	r23, 0x00	; 0
    3456:	22 1f       	adc	r18, r18
    3458:	22 27       	eor	r18, r18
    345a:	22 1f       	adc	r18, r18
    345c:	93 81       	ldd	r25, Z+3	; 0x03
    345e:	89 2f       	mov	r24, r25
    3460:	88 0f       	add	r24, r24
    3462:	82 2b       	or	r24, r18
    3464:	28 2f       	mov	r18, r24
    3466:	30 e0       	ldi	r19, 0x00	; 0
    3468:	99 1f       	adc	r25, r25
    346a:	99 27       	eor	r25, r25
    346c:	99 1f       	adc	r25, r25
    346e:	11 96       	adiw	r26, 0x01	; 1
    3470:	9c 93       	st	X, r25
    3472:	11 97       	sbiw	r26, 0x01	; 1
    3474:	21 15       	cp	r18, r1
    3476:	31 05       	cpc	r19, r1
    3478:	a9 f5       	brne	.+106    	; 0x34e4 <__unpack_f+0x9e>
    347a:	41 15       	cp	r20, r1
    347c:	51 05       	cpc	r21, r1
    347e:	61 05       	cpc	r22, r1
    3480:	71 05       	cpc	r23, r1
    3482:	11 f4       	brne	.+4      	; 0x3488 <__unpack_f+0x42>
    3484:	82 e0       	ldi	r24, 0x02	; 2
    3486:	37 c0       	rjmp	.+110    	; 0x34f6 <__unpack_f+0xb0>
    3488:	82 e8       	ldi	r24, 0x82	; 130
    348a:	9f ef       	ldi	r25, 0xFF	; 255
    348c:	13 96       	adiw	r26, 0x03	; 3
    348e:	9c 93       	st	X, r25
    3490:	8e 93       	st	-X, r24
    3492:	12 97       	sbiw	r26, 0x02	; 2
    3494:	9a 01       	movw	r18, r20
    3496:	ab 01       	movw	r20, r22
    3498:	67 e0       	ldi	r22, 0x07	; 7
    349a:	22 0f       	add	r18, r18
    349c:	33 1f       	adc	r19, r19
    349e:	44 1f       	adc	r20, r20
    34a0:	55 1f       	adc	r21, r21
    34a2:	6a 95       	dec	r22
    34a4:	d1 f7       	brne	.-12     	; 0x349a <__unpack_f+0x54>
    34a6:	83 e0       	ldi	r24, 0x03	; 3
    34a8:	8c 93       	st	X, r24
    34aa:	0d c0       	rjmp	.+26     	; 0x34c6 <__unpack_f+0x80>
    34ac:	22 0f       	add	r18, r18
    34ae:	33 1f       	adc	r19, r19
    34b0:	44 1f       	adc	r20, r20
    34b2:	55 1f       	adc	r21, r21
    34b4:	12 96       	adiw	r26, 0x02	; 2
    34b6:	8d 91       	ld	r24, X+
    34b8:	9c 91       	ld	r25, X
    34ba:	13 97       	sbiw	r26, 0x03	; 3
    34bc:	01 97       	sbiw	r24, 0x01	; 1
    34be:	13 96       	adiw	r26, 0x03	; 3
    34c0:	9c 93       	st	X, r25
    34c2:	8e 93       	st	-X, r24
    34c4:	12 97       	sbiw	r26, 0x02	; 2
    34c6:	20 30       	cpi	r18, 0x00	; 0
    34c8:	80 e0       	ldi	r24, 0x00	; 0
    34ca:	38 07       	cpc	r19, r24
    34cc:	80 e0       	ldi	r24, 0x00	; 0
    34ce:	48 07       	cpc	r20, r24
    34d0:	80 e4       	ldi	r24, 0x40	; 64
    34d2:	58 07       	cpc	r21, r24
    34d4:	58 f3       	brcs	.-42     	; 0x34ac <__unpack_f+0x66>
    34d6:	14 96       	adiw	r26, 0x04	; 4
    34d8:	2d 93       	st	X+, r18
    34da:	3d 93       	st	X+, r19
    34dc:	4d 93       	st	X+, r20
    34de:	5c 93       	st	X, r21
    34e0:	17 97       	sbiw	r26, 0x07	; 7
    34e2:	08 95       	ret
    34e4:	2f 3f       	cpi	r18, 0xFF	; 255
    34e6:	31 05       	cpc	r19, r1
    34e8:	79 f4       	brne	.+30     	; 0x3508 <__unpack_f+0xc2>
    34ea:	41 15       	cp	r20, r1
    34ec:	51 05       	cpc	r21, r1
    34ee:	61 05       	cpc	r22, r1
    34f0:	71 05       	cpc	r23, r1
    34f2:	19 f4       	brne	.+6      	; 0x34fa <__unpack_f+0xb4>
    34f4:	84 e0       	ldi	r24, 0x04	; 4
    34f6:	8c 93       	st	X, r24
    34f8:	08 95       	ret
    34fa:	64 ff       	sbrs	r22, 4
    34fc:	03 c0       	rjmp	.+6      	; 0x3504 <__unpack_f+0xbe>
    34fe:	81 e0       	ldi	r24, 0x01	; 1
    3500:	8c 93       	st	X, r24
    3502:	12 c0       	rjmp	.+36     	; 0x3528 <__unpack_f+0xe2>
    3504:	1c 92       	st	X, r1
    3506:	10 c0       	rjmp	.+32     	; 0x3528 <__unpack_f+0xe2>
    3508:	2f 57       	subi	r18, 0x7F	; 127
    350a:	30 40       	sbci	r19, 0x00	; 0
    350c:	13 96       	adiw	r26, 0x03	; 3
    350e:	3c 93       	st	X, r19
    3510:	2e 93       	st	-X, r18
    3512:	12 97       	sbiw	r26, 0x02	; 2
    3514:	83 e0       	ldi	r24, 0x03	; 3
    3516:	8c 93       	st	X, r24
    3518:	87 e0       	ldi	r24, 0x07	; 7
    351a:	44 0f       	add	r20, r20
    351c:	55 1f       	adc	r21, r21
    351e:	66 1f       	adc	r22, r22
    3520:	77 1f       	adc	r23, r23
    3522:	8a 95       	dec	r24
    3524:	d1 f7       	brne	.-12     	; 0x351a <__unpack_f+0xd4>
    3526:	70 64       	ori	r23, 0x40	; 64
    3528:	14 96       	adiw	r26, 0x04	; 4
    352a:	4d 93       	st	X+, r20
    352c:	5d 93       	st	X+, r21
    352e:	6d 93       	st	X+, r22
    3530:	7c 93       	st	X, r23
    3532:	17 97       	sbiw	r26, 0x07	; 7
    3534:	08 95       	ret

00003536 <__fpcmp_parts_f>:
    3536:	1f 93       	push	r17
    3538:	dc 01       	movw	r26, r24
    353a:	fb 01       	movw	r30, r22
    353c:	9c 91       	ld	r25, X
    353e:	92 30       	cpi	r25, 0x02	; 2
    3540:	08 f4       	brcc	.+2      	; 0x3544 <__fpcmp_parts_f+0xe>
    3542:	47 c0       	rjmp	.+142    	; 0x35d2 <__fpcmp_parts_f+0x9c>
    3544:	80 81       	ld	r24, Z
    3546:	82 30       	cpi	r24, 0x02	; 2
    3548:	08 f4       	brcc	.+2      	; 0x354c <__fpcmp_parts_f+0x16>
    354a:	43 c0       	rjmp	.+134    	; 0x35d2 <__fpcmp_parts_f+0x9c>
    354c:	94 30       	cpi	r25, 0x04	; 4
    354e:	51 f4       	brne	.+20     	; 0x3564 <__fpcmp_parts_f+0x2e>
    3550:	11 96       	adiw	r26, 0x01	; 1
    3552:	1c 91       	ld	r17, X
    3554:	84 30       	cpi	r24, 0x04	; 4
    3556:	99 f5       	brne	.+102    	; 0x35be <__fpcmp_parts_f+0x88>
    3558:	81 81       	ldd	r24, Z+1	; 0x01
    355a:	68 2f       	mov	r22, r24
    355c:	70 e0       	ldi	r23, 0x00	; 0
    355e:	61 1b       	sub	r22, r17
    3560:	71 09       	sbc	r23, r1
    3562:	3f c0       	rjmp	.+126    	; 0x35e2 <__fpcmp_parts_f+0xac>
    3564:	84 30       	cpi	r24, 0x04	; 4
    3566:	21 f0       	breq	.+8      	; 0x3570 <__fpcmp_parts_f+0x3a>
    3568:	92 30       	cpi	r25, 0x02	; 2
    356a:	31 f4       	brne	.+12     	; 0x3578 <__fpcmp_parts_f+0x42>
    356c:	82 30       	cpi	r24, 0x02	; 2
    356e:	b9 f1       	breq	.+110    	; 0x35de <__fpcmp_parts_f+0xa8>
    3570:	81 81       	ldd	r24, Z+1	; 0x01
    3572:	88 23       	and	r24, r24
    3574:	89 f1       	breq	.+98     	; 0x35d8 <__fpcmp_parts_f+0xa2>
    3576:	2d c0       	rjmp	.+90     	; 0x35d2 <__fpcmp_parts_f+0x9c>
    3578:	11 96       	adiw	r26, 0x01	; 1
    357a:	1c 91       	ld	r17, X
    357c:	11 97       	sbiw	r26, 0x01	; 1
    357e:	82 30       	cpi	r24, 0x02	; 2
    3580:	f1 f0       	breq	.+60     	; 0x35be <__fpcmp_parts_f+0x88>
    3582:	81 81       	ldd	r24, Z+1	; 0x01
    3584:	18 17       	cp	r17, r24
    3586:	d9 f4       	brne	.+54     	; 0x35be <__fpcmp_parts_f+0x88>
    3588:	12 96       	adiw	r26, 0x02	; 2
    358a:	2d 91       	ld	r18, X+
    358c:	3c 91       	ld	r19, X
    358e:	13 97       	sbiw	r26, 0x03	; 3
    3590:	82 81       	ldd	r24, Z+2	; 0x02
    3592:	93 81       	ldd	r25, Z+3	; 0x03
    3594:	82 17       	cp	r24, r18
    3596:	93 07       	cpc	r25, r19
    3598:	94 f0       	brlt	.+36     	; 0x35be <__fpcmp_parts_f+0x88>
    359a:	28 17       	cp	r18, r24
    359c:	39 07       	cpc	r19, r25
    359e:	bc f0       	brlt	.+46     	; 0x35ce <__fpcmp_parts_f+0x98>
    35a0:	14 96       	adiw	r26, 0x04	; 4
    35a2:	8d 91       	ld	r24, X+
    35a4:	9d 91       	ld	r25, X+
    35a6:	0d 90       	ld	r0, X+
    35a8:	bc 91       	ld	r27, X
    35aa:	a0 2d       	mov	r26, r0
    35ac:	24 81       	ldd	r18, Z+4	; 0x04
    35ae:	35 81       	ldd	r19, Z+5	; 0x05
    35b0:	46 81       	ldd	r20, Z+6	; 0x06
    35b2:	57 81       	ldd	r21, Z+7	; 0x07
    35b4:	28 17       	cp	r18, r24
    35b6:	39 07       	cpc	r19, r25
    35b8:	4a 07       	cpc	r20, r26
    35ba:	5b 07       	cpc	r21, r27
    35bc:	18 f4       	brcc	.+6      	; 0x35c4 <__fpcmp_parts_f+0x8e>
    35be:	11 23       	and	r17, r17
    35c0:	41 f0       	breq	.+16     	; 0x35d2 <__fpcmp_parts_f+0x9c>
    35c2:	0a c0       	rjmp	.+20     	; 0x35d8 <__fpcmp_parts_f+0xa2>
    35c4:	82 17       	cp	r24, r18
    35c6:	93 07       	cpc	r25, r19
    35c8:	a4 07       	cpc	r26, r20
    35ca:	b5 07       	cpc	r27, r21
    35cc:	40 f4       	brcc	.+16     	; 0x35de <__fpcmp_parts_f+0xa8>
    35ce:	11 23       	and	r17, r17
    35d0:	19 f0       	breq	.+6      	; 0x35d8 <__fpcmp_parts_f+0xa2>
    35d2:	61 e0       	ldi	r22, 0x01	; 1
    35d4:	70 e0       	ldi	r23, 0x00	; 0
    35d6:	05 c0       	rjmp	.+10     	; 0x35e2 <__fpcmp_parts_f+0xac>
    35d8:	6f ef       	ldi	r22, 0xFF	; 255
    35da:	7f ef       	ldi	r23, 0xFF	; 255
    35dc:	02 c0       	rjmp	.+4      	; 0x35e2 <__fpcmp_parts_f+0xac>
    35de:	60 e0       	ldi	r22, 0x00	; 0
    35e0:	70 e0       	ldi	r23, 0x00	; 0
    35e2:	cb 01       	movw	r24, r22
    35e4:	1f 91       	pop	r17
    35e6:	08 95       	ret

000035e8 <__udivmodsi4>:
    35e8:	a1 e2       	ldi	r26, 0x21	; 33
    35ea:	1a 2e       	mov	r1, r26
    35ec:	aa 1b       	sub	r26, r26
    35ee:	bb 1b       	sub	r27, r27
    35f0:	fd 01       	movw	r30, r26
    35f2:	0d c0       	rjmp	.+26     	; 0x360e <__udivmodsi4_ep>

000035f4 <__udivmodsi4_loop>:
    35f4:	aa 1f       	adc	r26, r26
    35f6:	bb 1f       	adc	r27, r27
    35f8:	ee 1f       	adc	r30, r30
    35fa:	ff 1f       	adc	r31, r31
    35fc:	a2 17       	cp	r26, r18
    35fe:	b3 07       	cpc	r27, r19
    3600:	e4 07       	cpc	r30, r20
    3602:	f5 07       	cpc	r31, r21
    3604:	20 f0       	brcs	.+8      	; 0x360e <__udivmodsi4_ep>
    3606:	a2 1b       	sub	r26, r18
    3608:	b3 0b       	sbc	r27, r19
    360a:	e4 0b       	sbc	r30, r20
    360c:	f5 0b       	sbc	r31, r21

0000360e <__udivmodsi4_ep>:
    360e:	66 1f       	adc	r22, r22
    3610:	77 1f       	adc	r23, r23
    3612:	88 1f       	adc	r24, r24
    3614:	99 1f       	adc	r25, r25
    3616:	1a 94       	dec	r1
    3618:	69 f7       	brne	.-38     	; 0x35f4 <__udivmodsi4_loop>
    361a:	60 95       	com	r22
    361c:	70 95       	com	r23
    361e:	80 95       	com	r24
    3620:	90 95       	com	r25
    3622:	9b 01       	movw	r18, r22
    3624:	ac 01       	movw	r20, r24
    3626:	bd 01       	movw	r22, r26
    3628:	cf 01       	movw	r24, r30
    362a:	08 95       	ret

0000362c <__prologue_saves__>:
    362c:	2f 92       	push	r2
    362e:	3f 92       	push	r3
    3630:	4f 92       	push	r4
    3632:	5f 92       	push	r5
    3634:	6f 92       	push	r6
    3636:	7f 92       	push	r7
    3638:	8f 92       	push	r8
    363a:	9f 92       	push	r9
    363c:	af 92       	push	r10
    363e:	bf 92       	push	r11
    3640:	cf 92       	push	r12
    3642:	df 92       	push	r13
    3644:	ef 92       	push	r14
    3646:	ff 92       	push	r15
    3648:	0f 93       	push	r16
    364a:	1f 93       	push	r17
    364c:	cf 93       	push	r28
    364e:	df 93       	push	r29
    3650:	cd b7       	in	r28, 0x3d	; 61
    3652:	de b7       	in	r29, 0x3e	; 62
    3654:	ca 1b       	sub	r28, r26
    3656:	db 0b       	sbc	r29, r27
    3658:	0f b6       	in	r0, 0x3f	; 63
    365a:	f8 94       	cli
    365c:	de bf       	out	0x3e, r29	; 62
    365e:	0f be       	out	0x3f, r0	; 63
    3660:	cd bf       	out	0x3d, r28	; 61
    3662:	09 94       	ijmp

00003664 <__epilogue_restores__>:
    3664:	2a 88       	ldd	r2, Y+18	; 0x12
    3666:	39 88       	ldd	r3, Y+17	; 0x11
    3668:	48 88       	ldd	r4, Y+16	; 0x10
    366a:	5f 84       	ldd	r5, Y+15	; 0x0f
    366c:	6e 84       	ldd	r6, Y+14	; 0x0e
    366e:	7d 84       	ldd	r7, Y+13	; 0x0d
    3670:	8c 84       	ldd	r8, Y+12	; 0x0c
    3672:	9b 84       	ldd	r9, Y+11	; 0x0b
    3674:	aa 84       	ldd	r10, Y+10	; 0x0a
    3676:	b9 84       	ldd	r11, Y+9	; 0x09
    3678:	c8 84       	ldd	r12, Y+8	; 0x08
    367a:	df 80       	ldd	r13, Y+7	; 0x07
    367c:	ee 80       	ldd	r14, Y+6	; 0x06
    367e:	fd 80       	ldd	r15, Y+5	; 0x05
    3680:	0c 81       	ldd	r16, Y+4	; 0x04
    3682:	1b 81       	ldd	r17, Y+3	; 0x03
    3684:	aa 81       	ldd	r26, Y+2	; 0x02
    3686:	b9 81       	ldd	r27, Y+1	; 0x01
    3688:	ce 0f       	add	r28, r30
    368a:	d1 1d       	adc	r29, r1
    368c:	0f b6       	in	r0, 0x3f	; 63
    368e:	f8 94       	cli
    3690:	de bf       	out	0x3e, r29	; 62
    3692:	0f be       	out	0x3f, r0	; 63
    3694:	cd bf       	out	0x3d, r28	; 61
    3696:	ed 01       	movw	r28, r26
    3698:	08 95       	ret

0000369a <_exit>:
    369a:	f8 94       	cli

0000369c <__stop_program>:
    369c:	ff cf       	rjmp	.-2      	; 0x369c <__stop_program>
