
bin\Debug\nRF24_2.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000156  00800100  00003fca  0000405e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00003fca  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000045  00800256  00800256  000041b4  2**0
                  ALLOC
  3 .debug_aranges 000001e0  00000000  00000000  000041b4  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_pubnames 00000442  00000000  00000000  00004394  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000031a8  00000000  00000000  000047d6  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00001552  00000000  00000000  0000797e  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000024f4  00000000  00000000  00008ed0  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003a0  00000000  00000000  0000b3c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000723  00000000  00000000  0000b764  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    0000088e  00000000  00000000  0000be87  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000050  00000000  00000000  0000c715  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 34 00 	jmp	0x68	; 0x68 <__ctors_end>
       4:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       8:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
       c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      10:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      14:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      18:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      1c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      20:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      24:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      28:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      2c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      30:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      34:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      38:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      3c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      40:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      44:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      48:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      4c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      50:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      54:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      58:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      5c:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      60:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>
      64:	0c 94 51 00 	jmp	0xa2	; 0xa2 <__bad_interrupt>

00000068 <__ctors_end>:
      68:	11 24       	eor	r1, r1
      6a:	1f be       	out	0x3f, r1	; 63
      6c:	cf ef       	ldi	r28, 0xFF	; 255
      6e:	d8 e0       	ldi	r29, 0x08	; 8
      70:	de bf       	out	0x3e, r29	; 62
      72:	cd bf       	out	0x3d, r28	; 61

00000074 <__do_copy_data>:
      74:	12 e0       	ldi	r17, 0x02	; 2
      76:	a0 e0       	ldi	r26, 0x00	; 0
      78:	b1 e0       	ldi	r27, 0x01	; 1
      7a:	ea ec       	ldi	r30, 0xCA	; 202
      7c:	ff e3       	ldi	r31, 0x3F	; 63
      7e:	02 c0       	rjmp	.+4      	; 0x84 <.do_copy_data_start>

00000080 <.do_copy_data_loop>:
      80:	05 90       	lpm	r0, Z+
      82:	0d 92       	st	X+, r0

00000084 <.do_copy_data_start>:
      84:	a6 35       	cpi	r26, 0x56	; 86
      86:	b1 07       	cpc	r27, r17
      88:	d9 f7       	brne	.-10     	; 0x80 <.do_copy_data_loop>

0000008a <__do_clear_bss>:
      8a:	12 e0       	ldi	r17, 0x02	; 2
      8c:	a6 e5       	ldi	r26, 0x56	; 86
      8e:	b2 e0       	ldi	r27, 0x02	; 2
      90:	01 c0       	rjmp	.+2      	; 0x94 <.do_clear_bss_start>

00000092 <.do_clear_bss_loop>:
      92:	1d 92       	st	X+, r1

00000094 <.do_clear_bss_start>:
      94:	ab 39       	cpi	r26, 0x9B	; 155
      96:	b1 07       	cpc	r27, r17
      98:	e1 f7       	brne	.-8      	; 0x92 <.do_clear_bss_loop>
      9a:	0e 94 2f 0b 	call	0x165e	; 0x165e <main>
      9e:	0c 94 e3 1f 	jmp	0x3fc6	; 0x3fc6 <_exit>

000000a2 <__bad_interrupt>:
      a2:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000a6 <nrf24l01_readregister>:
static uint8_t nrf24l01_addrtx[NRF24L01_ADDRSIZE] = NRF24L01_ADDRTX;

/*
 * read one register
 */
uint8_t nrf24l01_readregister(uint8_t reg) {
      a6:	df 93       	push	r29
      a8:	cf 93       	push	r28
      aa:	00 d0       	rcall	.+0      	; 0xac <nrf24l01_readregister+0x6>
      ac:	cd b7       	in	r28, 0x3d	; 61
      ae:	de b7       	in	r29, 0x3e	; 62
      b0:	8a 83       	std	Y+2, r24	; 0x02
	nrf24l01_CSNlo; //low CSN
      b2:	a5 e2       	ldi	r26, 0x25	; 37
      b4:	b0 e0       	ldi	r27, 0x00	; 0
      b6:	e5 e2       	ldi	r30, 0x25	; 37
      b8:	f0 e0       	ldi	r31, 0x00	; 0
      ba:	80 81       	ld	r24, Z
      bc:	8d 7f       	andi	r24, 0xFD	; 253
      be:	8c 93       	st	X, r24
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
      c0:	8a 81       	ldd	r24, Y+2	; 0x02
      c2:	8f 71       	andi	r24, 0x1F	; 31
      c4:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
    uint8_t result = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
      c8:	8f ef       	ldi	r24, 0xFF	; 255
      ca:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
      ce:	89 83       	std	Y+1, r24	; 0x01
    nrf24l01_CSNhi; //high CSN
      d0:	a5 e2       	ldi	r26, 0x25	; 37
      d2:	b0 e0       	ldi	r27, 0x00	; 0
      d4:	e5 e2       	ldi	r30, 0x25	; 37
      d6:	f0 e0       	ldi	r31, 0x00	; 0
      d8:	80 81       	ld	r24, Z
      da:	82 60       	ori	r24, 0x02	; 2
      dc:	8c 93       	st	X, r24
    return result;
      de:	89 81       	ldd	r24, Y+1	; 0x01
}
      e0:	0f 90       	pop	r0
      e2:	0f 90       	pop	r0
      e4:	cf 91       	pop	r28
      e6:	df 91       	pop	r29
      e8:	08 95       	ret

000000ea <nrf24l01_readregisters>:

/*
 * read many registers
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
      ea:	0f 93       	push	r16
      ec:	1f 93       	push	r17
      ee:	df 93       	push	r29
      f0:	cf 93       	push	r28
      f2:	00 d0       	rcall	.+0      	; 0xf4 <nrf24l01_readregisters+0xa>
      f4:	00 d0       	rcall	.+0      	; 0xf6 <nrf24l01_readregisters+0xc>
      f6:	0f 92       	push	r0
      f8:	cd b7       	in	r28, 0x3d	; 61
      fa:	de b7       	in	r29, 0x3e	; 62
      fc:	8a 83       	std	Y+2, r24	; 0x02
      fe:	7c 83       	std	Y+4, r23	; 0x04
     100:	6b 83       	std	Y+3, r22	; 0x03
     102:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t i = 0;
     104:	19 82       	std	Y+1, r1	; 0x01
	nrf24l01_CSNlo; //low CSN
     106:	a5 e2       	ldi	r26, 0x25	; 37
     108:	b0 e0       	ldi	r27, 0x00	; 0
     10a:	e5 e2       	ldi	r30, 0x25	; 37
     10c:	f0 e0       	ldi	r31, 0x00	; 0
     10e:	80 81       	ld	r24, Z
     110:	8d 7f       	andi	r24, 0xFD	; 253
     112:	8c 93       	st	X, r24
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     114:	8a 81       	ldd	r24, Y+2	; 0x02
     116:	8f 71       	andi	r24, 0x1F	; 31
     118:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
	for(i=0; i<len; i++)
     11c:	19 82       	std	Y+1, r1	; 0x01
     11e:	10 c0       	rjmp	.+32     	; 0x140 <nrf24l01_readregisters+0x56>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
     120:	89 81       	ldd	r24, Y+1	; 0x01
     122:	28 2f       	mov	r18, r24
     124:	30 e0       	ldi	r19, 0x00	; 0
     126:	8b 81       	ldd	r24, Y+3	; 0x03
     128:	9c 81       	ldd	r25, Y+4	; 0x04
     12a:	8c 01       	movw	r16, r24
     12c:	02 0f       	add	r16, r18
     12e:	13 1f       	adc	r17, r19
     130:	8f ef       	ldi	r24, 0xFF	; 255
     132:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
     136:	f8 01       	movw	r30, r16
     138:	80 83       	st	Z, r24
 */
void nrf24l01_readregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_R_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     13a:	89 81       	ldd	r24, Y+1	; 0x01
     13c:	8f 5f       	subi	r24, 0xFF	; 255
     13e:	89 83       	std	Y+1, r24	; 0x01
     140:	99 81       	ldd	r25, Y+1	; 0x01
     142:	8d 81       	ldd	r24, Y+5	; 0x05
     144:	98 17       	cp	r25, r24
     146:	60 f3       	brcs	.-40     	; 0x120 <nrf24l01_readregisters+0x36>
		value[i] = spi_writereadbyte(NRF24L01_CMD_NOP); //read write register
	nrf24l01_CSNhi; //high CSN
     148:	a5 e2       	ldi	r26, 0x25	; 37
     14a:	b0 e0       	ldi	r27, 0x00	; 0
     14c:	e5 e2       	ldi	r30, 0x25	; 37
     14e:	f0 e0       	ldi	r31, 0x00	; 0
     150:	80 81       	ld	r24, Z
     152:	82 60       	ori	r24, 0x02	; 2
     154:	8c 93       	st	X, r24
}
     156:	0f 90       	pop	r0
     158:	0f 90       	pop	r0
     15a:	0f 90       	pop	r0
     15c:	0f 90       	pop	r0
     15e:	0f 90       	pop	r0
     160:	cf 91       	pop	r28
     162:	df 91       	pop	r29
     164:	1f 91       	pop	r17
     166:	0f 91       	pop	r16
     168:	08 95       	ret

0000016a <nrf24l01_writeregister>:

/*
 * write one register
 */
void nrf24l01_writeregister(uint8_t reg, uint8_t value) {
     16a:	df 93       	push	r29
     16c:	cf 93       	push	r28
     16e:	00 d0       	rcall	.+0      	; 0x170 <nrf24l01_writeregister+0x6>
     170:	cd b7       	in	r28, 0x3d	; 61
     172:	de b7       	in	r29, 0x3e	; 62
     174:	89 83       	std	Y+1, r24	; 0x01
     176:	6a 83       	std	Y+2, r22	; 0x02
	nrf24l01_CSNlo; //low CSN
     178:	a5 e2       	ldi	r26, 0x25	; 37
     17a:	b0 e0       	ldi	r27, 0x00	; 0
     17c:	e5 e2       	ldi	r30, 0x25	; 37
     17e:	f0 e0       	ldi	r31, 0x00	; 0
     180:	80 81       	ld	r24, Z
     182:	8d 7f       	andi	r24, 0xFD	; 253
     184:	8c 93       	st	X, r24
	spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     186:	89 81       	ldd	r24, Y+1	; 0x01
     188:	8f 71       	andi	r24, 0x1F	; 31
     18a:	80 62       	ori	r24, 0x20	; 32
     18c:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
	spi_writereadbyte(value); //write register
     190:	8a 81       	ldd	r24, Y+2	; 0x02
     192:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     196:	a5 e2       	ldi	r26, 0x25	; 37
     198:	b0 e0       	ldi	r27, 0x00	; 0
     19a:	e5 e2       	ldi	r30, 0x25	; 37
     19c:	f0 e0       	ldi	r31, 0x00	; 0
     19e:	80 81       	ld	r24, Z
     1a0:	82 60       	ori	r24, 0x02	; 2
     1a2:	8c 93       	st	X, r24
}
     1a4:	0f 90       	pop	r0
     1a6:	0f 90       	pop	r0
     1a8:	cf 91       	pop	r28
     1aa:	df 91       	pop	r29
     1ac:	08 95       	ret

000001ae <nrf24l01_writeregisters>:

/*
 * write many registers
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
     1ae:	df 93       	push	r29
     1b0:	cf 93       	push	r28
     1b2:	00 d0       	rcall	.+0      	; 0x1b4 <nrf24l01_writeregisters+0x6>
     1b4:	00 d0       	rcall	.+0      	; 0x1b6 <nrf24l01_writeregisters+0x8>
     1b6:	0f 92       	push	r0
     1b8:	cd b7       	in	r28, 0x3d	; 61
     1ba:	de b7       	in	r29, 0x3e	; 62
     1bc:	8a 83       	std	Y+2, r24	; 0x02
     1be:	7c 83       	std	Y+4, r23	; 0x04
     1c0:	6b 83       	std	Y+3, r22	; 0x03
     1c2:	4d 83       	std	Y+5, r20	; 0x05
	uint8_t i = 0;
     1c4:	19 82       	std	Y+1, r1	; 0x01
	nrf24l01_CSNlo; //low CSN
     1c6:	a5 e2       	ldi	r26, 0x25	; 37
     1c8:	b0 e0       	ldi	r27, 0x00	; 0
     1ca:	e5 e2       	ldi	r30, 0x25	; 37
     1cc:	f0 e0       	ldi	r31, 0x00	; 0
     1ce:	80 81       	ld	r24, Z
     1d0:	8d 7f       	andi	r24, 0xFD	; 253
     1d2:	8c 93       	st	X, r24
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
     1d4:	8a 81       	ldd	r24, Y+2	; 0x02
     1d6:	8f 71       	andi	r24, 0x1F	; 31
     1d8:	80 62       	ori	r24, 0x20	; 32
     1da:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
	for(i=0; i<len; i++)
     1de:	19 82       	std	Y+1, r1	; 0x01
     1e0:	0e c0       	rjmp	.+28     	; 0x1fe <nrf24l01_writeregisters+0x50>
		 spi_writereadbyte(value[i]); //write register
     1e2:	89 81       	ldd	r24, Y+1	; 0x01
     1e4:	28 2f       	mov	r18, r24
     1e6:	30 e0       	ldi	r19, 0x00	; 0
     1e8:	8b 81       	ldd	r24, Y+3	; 0x03
     1ea:	9c 81       	ldd	r25, Y+4	; 0x04
     1ec:	fc 01       	movw	r30, r24
     1ee:	e2 0f       	add	r30, r18
     1f0:	f3 1f       	adc	r31, r19
     1f2:	80 81       	ld	r24, Z
     1f4:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
 */
void nrf24l01_writeregisters(uint8_t reg, uint8_t *value, uint8_t len) {
	uint8_t i = 0;
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_W_REGISTER | (NRF24L01_CMD_REGISTER_MASK & reg));
	for(i=0; i<len; i++)
     1f8:	89 81       	ldd	r24, Y+1	; 0x01
     1fa:	8f 5f       	subi	r24, 0xFF	; 255
     1fc:	89 83       	std	Y+1, r24	; 0x01
     1fe:	99 81       	ldd	r25, Y+1	; 0x01
     200:	8d 81       	ldd	r24, Y+5	; 0x05
     202:	98 17       	cp	r25, r24
     204:	70 f3       	brcs	.-36     	; 0x1e2 <nrf24l01_writeregisters+0x34>
		 spi_writereadbyte(value[i]); //write register
	nrf24l01_CSNhi; //high CSN
     206:	a5 e2       	ldi	r26, 0x25	; 37
     208:	b0 e0       	ldi	r27, 0x00	; 0
     20a:	e5 e2       	ldi	r30, 0x25	; 37
     20c:	f0 e0       	ldi	r31, 0x00	; 0
     20e:	80 81       	ld	r24, Z
     210:	82 60       	ori	r24, 0x02	; 2
     212:	8c 93       	st	X, r24
}
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	0f 90       	pop	r0
     21a:	0f 90       	pop	r0
     21c:	0f 90       	pop	r0
     21e:	cf 91       	pop	r28
     220:	df 91       	pop	r29
     222:	08 95       	ret

00000224 <nrf24l01_revaddress>:

/*
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
     224:	df 93       	push	r29
     226:	cf 93       	push	r28
     228:	00 d0       	rcall	.+0      	; 0x22a <nrf24l01_revaddress+0x6>
     22a:	00 d0       	rcall	.+0      	; 0x22c <nrf24l01_revaddress+0x8>
     22c:	0f 92       	push	r0
     22e:	cd b7       	in	r28, 0x3d	; 61
     230:	de b7       	in	r29, 0x3e	; 62
     232:	9b 83       	std	Y+3, r25	; 0x03
     234:	8a 83       	std	Y+2, r24	; 0x02
     236:	7d 83       	std	Y+5, r23	; 0x05
     238:	6c 83       	std	Y+4, r22	; 0x04
	//reverse address
	uint8_t i = 0;
     23a:	19 82       	std	Y+1, r1	; 0x01
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     23c:	19 82       	std	Y+1, r1	; 0x01
     23e:	1d c0       	rjmp	.+58     	; 0x27a <nrf24l01_revaddress+0x56>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
     240:	89 81       	ldd	r24, Y+1	; 0x01
     242:	28 2f       	mov	r18, r24
     244:	30 e0       	ldi	r19, 0x00	; 0
     246:	8c 81       	ldd	r24, Y+4	; 0x04
     248:	9d 81       	ldd	r25, Y+5	; 0x05
     24a:	ac 01       	movw	r20, r24
     24c:	42 0f       	add	r20, r18
     24e:	53 1f       	adc	r21, r19
     250:	89 81       	ldd	r24, Y+1	; 0x01
     252:	28 2f       	mov	r18, r24
     254:	30 e0       	ldi	r19, 0x00	; 0
     256:	84 e0       	ldi	r24, 0x04	; 4
     258:	90 e0       	ldi	r25, 0x00	; 0
     25a:	82 1b       	sub	r24, r18
     25c:	93 0b       	sbc	r25, r19
     25e:	9c 01       	movw	r18, r24
     260:	8a 81       	ldd	r24, Y+2	; 0x02
     262:	9b 81       	ldd	r25, Y+3	; 0x03
     264:	28 0f       	add	r18, r24
     266:	39 1f       	adc	r19, r25
     268:	ca 01       	movw	r24, r20
     26a:	b9 01       	movw	r22, r18
     26c:	41 e0       	ldi	r20, 0x01	; 1
     26e:	50 e0       	ldi	r21, 0x00	; 0
     270:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <memcpy>
 * reverse an array, NRF24L01 expects LSB first
 */
void nrf24l01_revaddress(uint8_t *addr, uint8_t *addrrev) {
	//reverse address
	uint8_t i = 0;
	for(i=0; i<NRF24L01_ADDRSIZE; i++)
     274:	89 81       	ldd	r24, Y+1	; 0x01
     276:	8f 5f       	subi	r24, 0xFF	; 255
     278:	89 83       	std	Y+1, r24	; 0x01
     27a:	89 81       	ldd	r24, Y+1	; 0x01
     27c:	85 30       	cpi	r24, 0x05	; 5
     27e:	00 f3       	brcs	.-64     	; 0x240 <nrf24l01_revaddress+0x1c>
		memcpy(&addrrev[i], &addr[NRF24L01_ADDRSIZE-1-i], 1);
}
     280:	0f 90       	pop	r0
     282:	0f 90       	pop	r0
     284:	0f 90       	pop	r0
     286:	0f 90       	pop	r0
     288:	0f 90       	pop	r0
     28a:	cf 91       	pop	r28
     28c:	df 91       	pop	r29
     28e:	08 95       	ret

00000290 <nrf24l01_setrxaddr>:

/*
 * set rx address
 */
void nrf24l01_setrxaddr(uint8_t pipe, uint8_t *addr) {
     290:	df 93       	push	r29
     292:	cf 93       	push	r28
     294:	cd b7       	in	r28, 0x3d	; 61
     296:	de b7       	in	r29, 0x3e	; 62
     298:	2d 97       	sbiw	r28, 0x0d	; 13
     29a:	0f b6       	in	r0, 0x3f	; 63
     29c:	f8 94       	cli
     29e:	de bf       	out	0x3e, r29	; 62
     2a0:	0f be       	out	0x3f, r0	; 63
     2a2:	cd bf       	out	0x3d, r28	; 61
     2a4:	8b 87       	std	Y+11, r24	; 0x0b
     2a6:	7d 87       	std	Y+13, r23	; 0x0d
     2a8:	6c 87       	std	Y+12, r22	; 0x0c
	if(pipe == 0) {
     2aa:	8b 85       	ldd	r24, Y+11	; 0x0b
     2ac:	88 23       	and	r24, r24
     2ae:	d1 f4       	brne	.+52     	; 0x2e4 <nrf24l01_setrxaddr+0x54>
		memcpy(&nrf24l01_addr0, addr, NRF24L01_ADDRSIZE); //cache address
     2b0:	80 e0       	ldi	r24, 0x00	; 0
     2b2:	91 e0       	ldi	r25, 0x01	; 1
     2b4:	2c 85       	ldd	r18, Y+12	; 0x0c
     2b6:	3d 85       	ldd	r19, Y+13	; 0x0d
     2b8:	b9 01       	movw	r22, r18
     2ba:	45 e0       	ldi	r20, 0x05	; 5
     2bc:	50 e0       	ldi	r21, 0x00	; 0
     2be:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <memcpy>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     2c2:	8c 85       	ldd	r24, Y+12	; 0x0c
     2c4:	9d 85       	ldd	r25, Y+13	; 0x0d
     2c6:	9e 01       	movw	r18, r28
     2c8:	2f 5f       	subi	r18, 0xFF	; 255
     2ca:	3f 4f       	sbci	r19, 0xFF	; 255
     2cc:	b9 01       	movw	r22, r18
     2ce:	0e 94 12 01 	call	0x224	; 0x224 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE);
     2d2:	8a e0       	ldi	r24, 0x0A	; 10
     2d4:	9e 01       	movw	r18, r28
     2d6:	2f 5f       	subi	r18, 0xFF	; 255
     2d8:	3f 4f       	sbci	r19, 0xFF	; 255
     2da:	b9 01       	movw	r22, r18
     2dc:	45 e0       	ldi	r20, 0x05	; 5
     2de:	0e 94 d7 00 	call	0x1ae	; 0x1ae <nrf24l01_writeregisters>
     2e2:	74 c0       	rjmp	.+232    	; 0x3cc <nrf24l01_setrxaddr+0x13c>
	} else if(pipe == 1) {
     2e4:	8b 85       	ldd	r24, Y+11	; 0x0b
     2e6:	81 30       	cpi	r24, 0x01	; 1
     2e8:	d1 f4       	brne	.+52     	; 0x31e <nrf24l01_setrxaddr+0x8e>
		memcpy(&nrf24l01_addr1, addr, NRF24L01_ADDRSIZE); //cache address
     2ea:	85 e0       	ldi	r24, 0x05	; 5
     2ec:	91 e0       	ldi	r25, 0x01	; 1
     2ee:	2c 85       	ldd	r18, Y+12	; 0x0c
     2f0:	3d 85       	ldd	r19, Y+13	; 0x0d
     2f2:	b9 01       	movw	r22, r18
     2f4:	45 e0       	ldi	r20, 0x05	; 5
     2f6:	50 e0       	ldi	r21, 0x00	; 0
     2f8:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <memcpy>
		uint8_t addrrev[NRF24L01_ADDRSIZE];
		nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     2fc:	8c 85       	ldd	r24, Y+12	; 0x0c
     2fe:	9d 85       	ldd	r25, Y+13	; 0x0d
     300:	9e 01       	movw	r18, r28
     302:	2a 5f       	subi	r18, 0xFA	; 250
     304:	3f 4f       	sbci	r19, 0xFF	; 255
     306:	b9 01       	movw	r22, r18
     308:	0e 94 12 01 	call	0x224	; 0x224 <nrf24l01_revaddress>
    	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P1, addrrev, NRF24L01_ADDRSIZE);
     30c:	9e 01       	movw	r18, r28
     30e:	2a 5f       	subi	r18, 0xFA	; 250
     310:	3f 4f       	sbci	r19, 0xFF	; 255
     312:	8b e0       	ldi	r24, 0x0B	; 11
     314:	b9 01       	movw	r22, r18
     316:	45 e0       	ldi	r20, 0x05	; 5
     318:	0e 94 d7 00 	call	0x1ae	; 0x1ae <nrf24l01_writeregisters>
     31c:	57 c0       	rjmp	.+174    	; 0x3cc <nrf24l01_setrxaddr+0x13c>
	} else if(pipe == 2) {
     31e:	8b 85       	ldd	r24, Y+11	; 0x0b
     320:	82 30       	cpi	r24, 0x02	; 2
     322:	99 f4       	brne	.+38     	; 0x34a <nrf24l01_setrxaddr+0xba>
		memcpy(&nrf24l01_addr2, addr, NRF24L01_ADDRSIZE); //cache address
     324:	8a e0       	ldi	r24, 0x0A	; 10
     326:	91 e0       	ldi	r25, 0x01	; 1
     328:	2c 85       	ldd	r18, Y+12	; 0x0c
     32a:	3d 85       	ldd	r19, Y+13	; 0x0d
     32c:	b9 01       	movw	r22, r18
     32e:	45 e0       	ldi	r20, 0x05	; 5
     330:	50 e0       	ldi	r21, 0x00	; 0
     332:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <memcpy>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P2, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     336:	8c 85       	ldd	r24, Y+12	; 0x0c
     338:	9d 85       	ldd	r25, Y+13	; 0x0d
     33a:	fc 01       	movw	r30, r24
     33c:	34 96       	adiw	r30, 0x04	; 4
     33e:	90 81       	ld	r25, Z
     340:	8c e0       	ldi	r24, 0x0C	; 12
     342:	69 2f       	mov	r22, r25
     344:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
     348:	41 c0       	rjmp	.+130    	; 0x3cc <nrf24l01_setrxaddr+0x13c>
	} else if(pipe == 3) {
     34a:	8b 85       	ldd	r24, Y+11	; 0x0b
     34c:	83 30       	cpi	r24, 0x03	; 3
     34e:	99 f4       	brne	.+38     	; 0x376 <nrf24l01_setrxaddr+0xe6>
		memcpy(&nrf24l01_addr3, addr, NRF24L01_ADDRSIZE); //cache address
     350:	8f e0       	ldi	r24, 0x0F	; 15
     352:	91 e0       	ldi	r25, 0x01	; 1
     354:	2c 85       	ldd	r18, Y+12	; 0x0c
     356:	3d 85       	ldd	r19, Y+13	; 0x0d
     358:	b9 01       	movw	r22, r18
     35a:	45 e0       	ldi	r20, 0x05	; 5
     35c:	50 e0       	ldi	r21, 0x00	; 0
     35e:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <memcpy>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P3, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     362:	8c 85       	ldd	r24, Y+12	; 0x0c
     364:	9d 85       	ldd	r25, Y+13	; 0x0d
     366:	fc 01       	movw	r30, r24
     368:	34 96       	adiw	r30, 0x04	; 4
     36a:	90 81       	ld	r25, Z
     36c:	8d e0       	ldi	r24, 0x0D	; 13
     36e:	69 2f       	mov	r22, r25
     370:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
     374:	2b c0       	rjmp	.+86     	; 0x3cc <nrf24l01_setrxaddr+0x13c>
	} else if(pipe == 4) {
     376:	8b 85       	ldd	r24, Y+11	; 0x0b
     378:	84 30       	cpi	r24, 0x04	; 4
     37a:	99 f4       	brne	.+38     	; 0x3a2 <nrf24l01_setrxaddr+0x112>
		memcpy(&nrf24l01_addr4, addr, NRF24L01_ADDRSIZE); //cache address
     37c:	84 e1       	ldi	r24, 0x14	; 20
     37e:	91 e0       	ldi	r25, 0x01	; 1
     380:	2c 85       	ldd	r18, Y+12	; 0x0c
     382:	3d 85       	ldd	r19, Y+13	; 0x0d
     384:	b9 01       	movw	r22, r18
     386:	45 e0       	ldi	r20, 0x05	; 5
     388:	50 e0       	ldi	r21, 0x00	; 0
     38a:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <memcpy>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P4, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     38e:	8c 85       	ldd	r24, Y+12	; 0x0c
     390:	9d 85       	ldd	r25, Y+13	; 0x0d
     392:	fc 01       	movw	r30, r24
     394:	34 96       	adiw	r30, 0x04	; 4
     396:	90 81       	ld	r25, Z
     398:	8e e0       	ldi	r24, 0x0E	; 14
     39a:	69 2f       	mov	r22, r25
     39c:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
     3a0:	15 c0       	rjmp	.+42     	; 0x3cc <nrf24l01_setrxaddr+0x13c>
	} else if(pipe == 5) {
     3a2:	8b 85       	ldd	r24, Y+11	; 0x0b
     3a4:	85 30       	cpi	r24, 0x05	; 5
     3a6:	91 f4       	brne	.+36     	; 0x3cc <nrf24l01_setrxaddr+0x13c>
		memcpy(&nrf24l01_addr5, addr, NRF24L01_ADDRSIZE); //cache address
     3a8:	89 e1       	ldi	r24, 0x19	; 25
     3aa:	91 e0       	ldi	r25, 0x01	; 1
     3ac:	2c 85       	ldd	r18, Y+12	; 0x0c
     3ae:	3d 85       	ldd	r19, Y+13	; 0x0d
     3b0:	b9 01       	movw	r22, r18
     3b2:	45 e0       	ldi	r20, 0x05	; 5
     3b4:	50 e0       	ldi	r21, 0x00	; 0
     3b6:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <memcpy>
		nrf24l01_writeregister(NRF24L01_REG_RX_ADDR_P5, addr[NRF24L01_ADDRSIZE-1]); //write only LSB MSBytes are equal to RX_ADDR_P
     3ba:	8c 85       	ldd	r24, Y+12	; 0x0c
     3bc:	9d 85       	ldd	r25, Y+13	; 0x0d
     3be:	fc 01       	movw	r30, r24
     3c0:	34 96       	adiw	r30, 0x04	; 4
     3c2:	90 81       	ld	r25, Z
     3c4:	8f e0       	ldi	r24, 0x0F	; 15
     3c6:	69 2f       	mov	r22, r25
     3c8:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	}
}
     3cc:	2d 96       	adiw	r28, 0x0d	; 13
     3ce:	0f b6       	in	r0, 0x3f	; 63
     3d0:	f8 94       	cli
     3d2:	de bf       	out	0x3e, r29	; 62
     3d4:	0f be       	out	0x3f, r0	; 63
     3d6:	cd bf       	out	0x3d, r28	; 61
     3d8:	cf 91       	pop	r28
     3da:	df 91       	pop	r29
     3dc:	08 95       	ret

000003de <nrf24l01_settxaddr>:

/*
 * set tx address
 */
void nrf24l01_settxaddr(uint8_t *addr) {
     3de:	df 93       	push	r29
     3e0:	cf 93       	push	r28
     3e2:	cd b7       	in	r28, 0x3d	; 61
     3e4:	de b7       	in	r29, 0x3e	; 62
     3e6:	27 97       	sbiw	r28, 0x07	; 7
     3e8:	0f b6       	in	r0, 0x3f	; 63
     3ea:	f8 94       	cli
     3ec:	de bf       	out	0x3e, r29	; 62
     3ee:	0f be       	out	0x3f, r0	; 63
     3f0:	cd bf       	out	0x3d, r28	; 61
     3f2:	9f 83       	std	Y+7, r25	; 0x07
     3f4:	8e 83       	std	Y+6, r24	; 0x06
	memcpy(&nrf24l01_addrtx, addr, NRF24L01_ADDRSIZE); //cache address
     3f6:	8e e1       	ldi	r24, 0x1E	; 30
     3f8:	91 e0       	ldi	r25, 0x01	; 1
     3fa:	2e 81       	ldd	r18, Y+6	; 0x06
     3fc:	3f 81       	ldd	r19, Y+7	; 0x07
     3fe:	b9 01       	movw	r22, r18
     400:	45 e0       	ldi	r20, 0x05	; 5
     402:	50 e0       	ldi	r21, 0x00	; 0
     404:	0e 94 f4 1c 	call	0x39e8	; 0x39e8 <memcpy>
	uint8_t addrrev[NRF24L01_ADDRSIZE];
	nrf24l01_revaddress(addr, (uint8_t *)addrrev);
     408:	8e 81       	ldd	r24, Y+6	; 0x06
     40a:	9f 81       	ldd	r25, Y+7	; 0x07
     40c:	9e 01       	movw	r18, r28
     40e:	2f 5f       	subi	r18, 0xFF	; 255
     410:	3f 4f       	sbci	r19, 0xFF	; 255
     412:	b9 01       	movw	r22, r18
     414:	0e 94 12 01 	call	0x224	; 0x224 <nrf24l01_revaddress>
	nrf24l01_writeregisters(NRF24L01_REG_RX_ADDR_P0, addrrev, NRF24L01_ADDRSIZE); //set rx address for ack on pipe 0
     418:	8a e0       	ldi	r24, 0x0A	; 10
     41a:	9e 01       	movw	r18, r28
     41c:	2f 5f       	subi	r18, 0xFF	; 255
     41e:	3f 4f       	sbci	r19, 0xFF	; 255
     420:	b9 01       	movw	r22, r18
     422:	45 e0       	ldi	r20, 0x05	; 5
     424:	0e 94 d7 00 	call	0x1ae	; 0x1ae <nrf24l01_writeregisters>
	nrf24l01_writeregisters(NRF24L01_REG_TX_ADDR, addrrev, NRF24L01_ADDRSIZE); //set tx address
     428:	80 e1       	ldi	r24, 0x10	; 16
     42a:	9e 01       	movw	r18, r28
     42c:	2f 5f       	subi	r18, 0xFF	; 255
     42e:	3f 4f       	sbci	r19, 0xFF	; 255
     430:	b9 01       	movw	r22, r18
     432:	45 e0       	ldi	r20, 0x05	; 5
     434:	0e 94 d7 00 	call	0x1ae	; 0x1ae <nrf24l01_writeregisters>
}
     438:	27 96       	adiw	r28, 0x07	; 7
     43a:	0f b6       	in	r0, 0x3f	; 63
     43c:	f8 94       	cli
     43e:	de bf       	out	0x3e, r29	; 62
     440:	0f be       	out	0x3f, r0	; 63
     442:	cd bf       	out	0x3d, r28	; 61
     444:	cf 91       	pop	r28
     446:	df 91       	pop	r29
     448:	08 95       	ret

0000044a <nrf24l01_flushRXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushRXfifo() {
     44a:	df 93       	push	r29
     44c:	cf 93       	push	r28
     44e:	cd b7       	in	r28, 0x3d	; 61
     450:	de b7       	in	r29, 0x3e	; 62
	nrf24l01_CSNlo; //low CSN
     452:	a5 e2       	ldi	r26, 0x25	; 37
     454:	b0 e0       	ldi	r27, 0x00	; 0
     456:	e5 e2       	ldi	r30, 0x25	; 37
     458:	f0 e0       	ldi	r31, 0x00	; 0
     45a:	80 81       	ld	r24, Z
     45c:	8d 7f       	andi	r24, 0xFD	; 253
     45e:	8c 93       	st	X, r24
	spi_writereadbyte(NRF24L01_CMD_FLUSH_RX);
     460:	82 ee       	ldi	r24, 0xE2	; 226
     462:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     466:	a5 e2       	ldi	r26, 0x25	; 37
     468:	b0 e0       	ldi	r27, 0x00	; 0
     46a:	e5 e2       	ldi	r30, 0x25	; 37
     46c:	f0 e0       	ldi	r31, 0x00	; 0
     46e:	80 81       	ld	r24, Z
     470:	82 60       	ori	r24, 0x02	; 2
     472:	8c 93       	st	X, r24
}
     474:	cf 91       	pop	r28
     476:	df 91       	pop	r29
     478:	08 95       	ret

0000047a <nrf24l01_flushTXfifo>:

/*
 * flush RX fifo
 */
void nrf24l01_flushTXfifo() {
     47a:	df 93       	push	r29
     47c:	cf 93       	push	r28
     47e:	cd b7       	in	r28, 0x3d	; 61
     480:	de b7       	in	r29, 0x3e	; 62
	nrf24l01_CSNlo; //low CSN
     482:	a5 e2       	ldi	r26, 0x25	; 37
     484:	b0 e0       	ldi	r27, 0x00	; 0
     486:	e5 e2       	ldi	r30, 0x25	; 37
     488:	f0 e0       	ldi	r31, 0x00	; 0
     48a:	80 81       	ld	r24, Z
     48c:	8d 7f       	andi	r24, 0xFD	; 253
     48e:	8c 93       	st	X, r24
	spi_writereadbyte(NRF24L01_CMD_FLUSH_TX);
     490:	81 ee       	ldi	r24, 0xE1	; 225
     492:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
	nrf24l01_CSNhi; //high CSN
     496:	a5 e2       	ldi	r26, 0x25	; 37
     498:	b0 e0       	ldi	r27, 0x00	; 0
     49a:	e5 e2       	ldi	r30, 0x25	; 37
     49c:	f0 e0       	ldi	r31, 0x00	; 0
     49e:	80 81       	ld	r24, Z
     4a0:	82 60       	ori	r24, 0x02	; 2
     4a2:	8c 93       	st	X, r24
}
     4a4:	cf 91       	pop	r28
     4a6:	df 91       	pop	r29
     4a8:	08 95       	ret

000004aa <nrf24l01_setRX>:

/*
 * set chip as RX
 */
void nrf24l01_setRX() {
     4aa:	df 93       	push	r29
     4ac:	cf 93       	push	r28
     4ae:	cd b7       	in	r28, 0x3d	; 61
     4b0:	de b7       	in	r29, 0x3e	; 62
     4b2:	68 97       	sbiw	r28, 0x18	; 24
     4b4:	0f b6       	in	r0, 0x3f	; 63
     4b6:	f8 94       	cli
     4b8:	de bf       	out	0x3e, r29	; 62
     4ba:	0f be       	out	0x3f, r0	; 63
     4bc:	cd bf       	out	0x3d, r28	; 61
	nrf24l01_setrxaddr(0, nrf24l01_addr0); //restore pipe 0 address
     4be:	20 e0       	ldi	r18, 0x00	; 0
     4c0:	31 e0       	ldi	r19, 0x01	; 1
     4c2:	80 e0       	ldi	r24, 0x00	; 0
     4c4:	b9 01       	movw	r22, r18
     4c6:	0e 94 48 01 	call	0x290	; 0x290 <nrf24l01_setrxaddr>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PRIM_RX)); //prx mode
     4ca:	80 e0       	ldi	r24, 0x00	; 0
     4cc:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     4d0:	98 2f       	mov	r25, r24
     4d2:	91 60       	ori	r25, 0x01	; 1
     4d4:	80 e0       	ldi	r24, 0x00	; 0
     4d6:	69 2f       	mov	r22, r25
     4d8:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     4dc:	80 e0       	ldi	r24, 0x00	; 0
     4de:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     4e2:	98 2f       	mov	r25, r24
     4e4:	92 60       	ori	r25, 0x02	; 2
     4e6:	80 e0       	ldi	r24, 0x00	; 0
     4e8:	69 2f       	mov	r22, r25
     4ea:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     4ee:	87 e0       	ldi	r24, 0x07	; 7
     4f0:	60 e7       	ldi	r22, 0x70	; 112
     4f2:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	nrf24l01_flushRXfifo(); //flush rx fifo
     4f6:	0e 94 25 02 	call	0x44a	; 0x44a <nrf24l01_flushRXfifo>
	nrf24l01_flushTXfifo(); //flush tx fifo
     4fa:	0e 94 3d 02 	call	0x47a	; 0x47a <nrf24l01_flushTXfifo>
	nrf24l01_CEhi; //start listening
     4fe:	a5 e2       	ldi	r26, 0x25	; 37
     500:	b0 e0       	ldi	r27, 0x00	; 0
     502:	e5 e2       	ldi	r30, 0x25	; 37
     504:	f0 e0       	ldi	r31, 0x00	; 0
     506:	80 81       	ld	r24, Z
     508:	81 60       	ori	r24, 0x01	; 1
     50a:	8c 93       	st	X, r24
     50c:	80 e0       	ldi	r24, 0x00	; 0
     50e:	90 e0       	ldi	r25, 0x00	; 0
     510:	a6 e1       	ldi	r26, 0x16	; 22
     512:	b3 e4       	ldi	r27, 0x43	; 67
     514:	8d 8b       	std	Y+21, r24	; 0x15
     516:	9e 8b       	std	Y+22, r25	; 0x16
     518:	af 8b       	std	Y+23, r26	; 0x17
     51a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     51c:	6d 89       	ldd	r22, Y+21	; 0x15
     51e:	7e 89       	ldd	r23, Y+22	; 0x16
     520:	8f 89       	ldd	r24, Y+23	; 0x17
     522:	98 8d       	ldd	r25, Y+24	; 0x18
     524:	2b ea       	ldi	r18, 0xAB	; 171
     526:	3a ea       	ldi	r19, 0xAA	; 170
     528:	4a e2       	ldi	r20, 0x2A	; 42
     52a:	50 e4       	ldi	r21, 0x40	; 64
     52c:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     530:	dc 01       	movw	r26, r24
     532:	cb 01       	movw	r24, r22
     534:	89 8b       	std	Y+17, r24	; 0x11
     536:	9a 8b       	std	Y+18, r25	; 0x12
     538:	ab 8b       	std	Y+19, r26	; 0x13
     53a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     53c:	69 89       	ldd	r22, Y+17	; 0x11
     53e:	7a 89       	ldd	r23, Y+18	; 0x12
     540:	8b 89       	ldd	r24, Y+19	; 0x13
     542:	9c 89       	ldd	r25, Y+20	; 0x14
     544:	20 e0       	ldi	r18, 0x00	; 0
     546:	30 e0       	ldi	r19, 0x00	; 0
     548:	40 e8       	ldi	r20, 0x80	; 128
     54a:	5f e3       	ldi	r21, 0x3F	; 63
     54c:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
     550:	88 23       	and	r24, r24
     552:	1c f4       	brge	.+6      	; 0x55a <nrf24l01_setRX+0xb0>
		__ticks = 1;
     554:	81 e0       	ldi	r24, 0x01	; 1
     556:	88 8b       	std	Y+16, r24	; 0x10
     558:	91 c0       	rjmp	.+290    	; 0x67c <nrf24l01_setRX+0x1d2>
	else if (__tmp > 255)
     55a:	69 89       	ldd	r22, Y+17	; 0x11
     55c:	7a 89       	ldd	r23, Y+18	; 0x12
     55e:	8b 89       	ldd	r24, Y+19	; 0x13
     560:	9c 89       	ldd	r25, Y+20	; 0x14
     562:	20 e0       	ldi	r18, 0x00	; 0
     564:	30 e0       	ldi	r19, 0x00	; 0
     566:	4f e7       	ldi	r20, 0x7F	; 127
     568:	53 e4       	ldi	r21, 0x43	; 67
     56a:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
     56e:	18 16       	cp	r1, r24
     570:	0c f0       	brlt	.+2      	; 0x574 <nrf24l01_setRX+0xca>
     572:	7b c0       	rjmp	.+246    	; 0x66a <nrf24l01_setRX+0x1c0>
	{
		_delay_ms(__us / 1000.0);
     574:	6d 89       	ldd	r22, Y+21	; 0x15
     576:	7e 89       	ldd	r23, Y+22	; 0x16
     578:	8f 89       	ldd	r24, Y+23	; 0x17
     57a:	98 8d       	ldd	r25, Y+24	; 0x18
     57c:	20 e0       	ldi	r18, 0x00	; 0
     57e:	30 e0       	ldi	r19, 0x00	; 0
     580:	4a e7       	ldi	r20, 0x7A	; 122
     582:	54 e4       	ldi	r21, 0x44	; 68
     584:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__divsf3>
     588:	dc 01       	movw	r26, r24
     58a:	cb 01       	movw	r24, r22
     58c:	8c 87       	std	Y+12, r24	; 0x0c
     58e:	9d 87       	std	Y+13, r25	; 0x0d
     590:	ae 87       	std	Y+14, r26	; 0x0e
     592:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     594:	6c 85       	ldd	r22, Y+12	; 0x0c
     596:	7d 85       	ldd	r23, Y+13	; 0x0d
     598:	8e 85       	ldd	r24, Y+14	; 0x0e
     59a:	9f 85       	ldd	r25, Y+15	; 0x0f
     59c:	20 e0       	ldi	r18, 0x00	; 0
     59e:	30 e0       	ldi	r19, 0x00	; 0
     5a0:	4a ef       	ldi	r20, 0xFA	; 250
     5a2:	54 e4       	ldi	r21, 0x44	; 68
     5a4:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     5a8:	dc 01       	movw	r26, r24
     5aa:	cb 01       	movw	r24, r22
     5ac:	88 87       	std	Y+8, r24	; 0x08
     5ae:	99 87       	std	Y+9, r25	; 0x09
     5b0:	aa 87       	std	Y+10, r26	; 0x0a
     5b2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     5b4:	68 85       	ldd	r22, Y+8	; 0x08
     5b6:	79 85       	ldd	r23, Y+9	; 0x09
     5b8:	8a 85       	ldd	r24, Y+10	; 0x0a
     5ba:	9b 85       	ldd	r25, Y+11	; 0x0b
     5bc:	20 e0       	ldi	r18, 0x00	; 0
     5be:	30 e0       	ldi	r19, 0x00	; 0
     5c0:	40 e8       	ldi	r20, 0x80	; 128
     5c2:	5f e3       	ldi	r21, 0x3F	; 63
     5c4:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
     5c8:	88 23       	and	r24, r24
     5ca:	2c f4       	brge	.+10     	; 0x5d6 <nrf24l01_setRX+0x12c>
		__ticks = 1;
     5cc:	81 e0       	ldi	r24, 0x01	; 1
     5ce:	90 e0       	ldi	r25, 0x00	; 0
     5d0:	9f 83       	std	Y+7, r25	; 0x07
     5d2:	8e 83       	std	Y+6, r24	; 0x06
     5d4:	3f c0       	rjmp	.+126    	; 0x654 <nrf24l01_setRX+0x1aa>
	else if (__tmp > 65535)
     5d6:	68 85       	ldd	r22, Y+8	; 0x08
     5d8:	79 85       	ldd	r23, Y+9	; 0x09
     5da:	8a 85       	ldd	r24, Y+10	; 0x0a
     5dc:	9b 85       	ldd	r25, Y+11	; 0x0b
     5de:	20 e0       	ldi	r18, 0x00	; 0
     5e0:	3f ef       	ldi	r19, 0xFF	; 255
     5e2:	4f e7       	ldi	r20, 0x7F	; 127
     5e4:	57 e4       	ldi	r21, 0x47	; 71
     5e6:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
     5ea:	18 16       	cp	r1, r24
     5ec:	4c f5       	brge	.+82     	; 0x640 <nrf24l01_setRX+0x196>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     5ee:	6c 85       	ldd	r22, Y+12	; 0x0c
     5f0:	7d 85       	ldd	r23, Y+13	; 0x0d
     5f2:	8e 85       	ldd	r24, Y+14	; 0x0e
     5f4:	9f 85       	ldd	r25, Y+15	; 0x0f
     5f6:	20 e0       	ldi	r18, 0x00	; 0
     5f8:	30 e0       	ldi	r19, 0x00	; 0
     5fa:	40 e2       	ldi	r20, 0x20	; 32
     5fc:	51 e4       	ldi	r21, 0x41	; 65
     5fe:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     602:	dc 01       	movw	r26, r24
     604:	cb 01       	movw	r24, r22
     606:	bc 01       	movw	r22, r24
     608:	cd 01       	movw	r24, r26
     60a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     60e:	dc 01       	movw	r26, r24
     610:	cb 01       	movw	r24, r22
     612:	9f 83       	std	Y+7, r25	; 0x07
     614:	8e 83       	std	Y+6, r24	; 0x06
     616:	0f c0       	rjmp	.+30     	; 0x636 <nrf24l01_setRX+0x18c>
     618:	88 ec       	ldi	r24, 0xC8	; 200
     61a:	90 e0       	ldi	r25, 0x00	; 0
     61c:	9d 83       	std	Y+5, r25	; 0x05
     61e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     620:	8c 81       	ldd	r24, Y+4	; 0x04
     622:	9d 81       	ldd	r25, Y+5	; 0x05
     624:	01 97       	sbiw	r24, 0x01	; 1
     626:	f1 f7       	brne	.-4      	; 0x624 <nrf24l01_setRX+0x17a>
     628:	9d 83       	std	Y+5, r25	; 0x05
     62a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     62c:	8e 81       	ldd	r24, Y+6	; 0x06
     62e:	9f 81       	ldd	r25, Y+7	; 0x07
     630:	01 97       	sbiw	r24, 0x01	; 1
     632:	9f 83       	std	Y+7, r25	; 0x07
     634:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     636:	8e 81       	ldd	r24, Y+6	; 0x06
     638:	9f 81       	ldd	r25, Y+7	; 0x07
     63a:	00 97       	sbiw	r24, 0x00	; 0
     63c:	69 f7       	brne	.-38     	; 0x618 <nrf24l01_setRX+0x16e>
     63e:	24 c0       	rjmp	.+72     	; 0x688 <nrf24l01_setRX+0x1de>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     640:	68 85       	ldd	r22, Y+8	; 0x08
     642:	79 85       	ldd	r23, Y+9	; 0x09
     644:	8a 85       	ldd	r24, Y+10	; 0x0a
     646:	9b 85       	ldd	r25, Y+11	; 0x0b
     648:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     64c:	dc 01       	movw	r26, r24
     64e:	cb 01       	movw	r24, r22
     650:	9f 83       	std	Y+7, r25	; 0x07
     652:	8e 83       	std	Y+6, r24	; 0x06
     654:	8e 81       	ldd	r24, Y+6	; 0x06
     656:	9f 81       	ldd	r25, Y+7	; 0x07
     658:	9b 83       	std	Y+3, r25	; 0x03
     65a:	8a 83       	std	Y+2, r24	; 0x02
     65c:	8a 81       	ldd	r24, Y+2	; 0x02
     65e:	9b 81       	ldd	r25, Y+3	; 0x03
     660:	01 97       	sbiw	r24, 0x01	; 1
     662:	f1 f7       	brne	.-4      	; 0x660 <nrf24l01_setRX+0x1b6>
     664:	9b 83       	std	Y+3, r25	; 0x03
     666:	8a 83       	std	Y+2, r24	; 0x02
     668:	0f c0       	rjmp	.+30     	; 0x688 <nrf24l01_setRX+0x1de>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     66a:	69 89       	ldd	r22, Y+17	; 0x11
     66c:	7a 89       	ldd	r23, Y+18	; 0x12
     66e:	8b 89       	ldd	r24, Y+19	; 0x13
     670:	9c 89       	ldd	r25, Y+20	; 0x14
     672:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     676:	dc 01       	movw	r26, r24
     678:	cb 01       	movw	r24, r22
     67a:	88 8b       	std	Y+16, r24	; 0x10
     67c:	88 89       	ldd	r24, Y+16	; 0x10
     67e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     680:	89 81       	ldd	r24, Y+1	; 0x01
     682:	8a 95       	dec	r24
     684:	f1 f7       	brne	.-4      	; 0x682 <nrf24l01_setRX+0x1d8>
     686:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150); //wait for the radio to power up
}
     688:	68 96       	adiw	r28, 0x18	; 24
     68a:	0f b6       	in	r0, 0x3f	; 63
     68c:	f8 94       	cli
     68e:	de bf       	out	0x3e, r29	; 62
     690:	0f be       	out	0x3f, r0	; 63
     692:	cd bf       	out	0x3d, r28	; 61
     694:	cf 91       	pop	r28
     696:	df 91       	pop	r29
     698:	08 95       	ret

0000069a <nrf24l01_setTX>:

/*
 * set chip as TX
 */
void nrf24l01_setTX() {
     69a:	df 93       	push	r29
     69c:	cf 93       	push	r28
     69e:	cd b7       	in	r28, 0x3d	; 61
     6a0:	de b7       	in	r29, 0x3e	; 62
     6a2:	68 97       	sbiw	r28, 0x18	; 24
     6a4:	0f b6       	in	r0, 0x3f	; 63
     6a6:	f8 94       	cli
     6a8:	de bf       	out	0x3e, r29	; 62
     6aa:	0f be       	out	0x3f, r0	; 63
     6ac:	cd bf       	out	0x3d, r28	; 61
	nrf24l01_CElo; //stop listening
     6ae:	a5 e2       	ldi	r26, 0x25	; 37
     6b0:	b0 e0       	ldi	r27, 0x00	; 0
     6b2:	e5 e2       	ldi	r30, 0x25	; 37
     6b4:	f0 e0       	ldi	r31, 0x00	; 0
     6b6:	80 81       	ld	r24, Z
     6b8:	8e 7f       	andi	r24, 0xFE	; 254
     6ba:	8c 93       	st	X, r24
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PRIM_RX)); //ptx mode
     6bc:	80 e0       	ldi	r24, 0x00	; 0
     6be:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     6c2:	98 2f       	mov	r25, r24
     6c4:	9e 7f       	andi	r25, 0xFE	; 254
     6c6:	80 e0       	ldi	r24, 0x00	; 0
     6c8:	69 2f       	mov	r22, r25
     6ca:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) | (1<<NRF24L01_REG_PWR_UP)); //power up
     6ce:	80 e0       	ldi	r24, 0x00	; 0
     6d0:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     6d4:	98 2f       	mov	r25, r24
     6d6:	92 60       	ori	r25, 0x02	; 2
     6d8:	80 e0       	ldi	r24, 0x00	; 0
     6da:	69 2f       	mov	r22, r25
     6dc:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR) | (1<<NRF24L01_REG_TX_DS) | (1<<NRF24L01_REG_MAX_RT)); //reset status
     6e0:	87 e0       	ldi	r24, 0x07	; 7
     6e2:	60 e7       	ldi	r22, 0x70	; 112
     6e4:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	nrf24l01_flushTXfifo(); //flush tx fifo
     6e8:	0e 94 3d 02 	call	0x47a	; 0x47a <nrf24l01_flushTXfifo>
     6ec:	80 e0       	ldi	r24, 0x00	; 0
     6ee:	90 e0       	ldi	r25, 0x00	; 0
     6f0:	a6 e1       	ldi	r26, 0x16	; 22
     6f2:	b3 e4       	ldi	r27, 0x43	; 67
     6f4:	8d 8b       	std	Y+21, r24	; 0x15
     6f6:	9e 8b       	std	Y+22, r25	; 0x16
     6f8:	af 8b       	std	Y+23, r26	; 0x17
     6fa:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     6fc:	6d 89       	ldd	r22, Y+21	; 0x15
     6fe:	7e 89       	ldd	r23, Y+22	; 0x16
     700:	8f 89       	ldd	r24, Y+23	; 0x17
     702:	98 8d       	ldd	r25, Y+24	; 0x18
     704:	2b ea       	ldi	r18, 0xAB	; 171
     706:	3a ea       	ldi	r19, 0xAA	; 170
     708:	4a e2       	ldi	r20, 0x2A	; 42
     70a:	50 e4       	ldi	r21, 0x40	; 64
     70c:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     710:	dc 01       	movw	r26, r24
     712:	cb 01       	movw	r24, r22
     714:	89 8b       	std	Y+17, r24	; 0x11
     716:	9a 8b       	std	Y+18, r25	; 0x12
     718:	ab 8b       	std	Y+19, r26	; 0x13
     71a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     71c:	69 89       	ldd	r22, Y+17	; 0x11
     71e:	7a 89       	ldd	r23, Y+18	; 0x12
     720:	8b 89       	ldd	r24, Y+19	; 0x13
     722:	9c 89       	ldd	r25, Y+20	; 0x14
     724:	20 e0       	ldi	r18, 0x00	; 0
     726:	30 e0       	ldi	r19, 0x00	; 0
     728:	40 e8       	ldi	r20, 0x80	; 128
     72a:	5f e3       	ldi	r21, 0x3F	; 63
     72c:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
     730:	88 23       	and	r24, r24
     732:	1c f4       	brge	.+6      	; 0x73a <nrf24l01_setTX+0xa0>
		__ticks = 1;
     734:	81 e0       	ldi	r24, 0x01	; 1
     736:	88 8b       	std	Y+16, r24	; 0x10
     738:	91 c0       	rjmp	.+290    	; 0x85c <nrf24l01_setTX+0x1c2>
	else if (__tmp > 255)
     73a:	69 89       	ldd	r22, Y+17	; 0x11
     73c:	7a 89       	ldd	r23, Y+18	; 0x12
     73e:	8b 89       	ldd	r24, Y+19	; 0x13
     740:	9c 89       	ldd	r25, Y+20	; 0x14
     742:	20 e0       	ldi	r18, 0x00	; 0
     744:	30 e0       	ldi	r19, 0x00	; 0
     746:	4f e7       	ldi	r20, 0x7F	; 127
     748:	53 e4       	ldi	r21, 0x43	; 67
     74a:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
     74e:	18 16       	cp	r1, r24
     750:	0c f0       	brlt	.+2      	; 0x754 <nrf24l01_setTX+0xba>
     752:	7b c0       	rjmp	.+246    	; 0x84a <nrf24l01_setTX+0x1b0>
	{
		_delay_ms(__us / 1000.0);
     754:	6d 89       	ldd	r22, Y+21	; 0x15
     756:	7e 89       	ldd	r23, Y+22	; 0x16
     758:	8f 89       	ldd	r24, Y+23	; 0x17
     75a:	98 8d       	ldd	r25, Y+24	; 0x18
     75c:	20 e0       	ldi	r18, 0x00	; 0
     75e:	30 e0       	ldi	r19, 0x00	; 0
     760:	4a e7       	ldi	r20, 0x7A	; 122
     762:	54 e4       	ldi	r21, 0x44	; 68
     764:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__divsf3>
     768:	dc 01       	movw	r26, r24
     76a:	cb 01       	movw	r24, r22
     76c:	8c 87       	std	Y+12, r24	; 0x0c
     76e:	9d 87       	std	Y+13, r25	; 0x0d
     770:	ae 87       	std	Y+14, r26	; 0x0e
     772:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     774:	6c 85       	ldd	r22, Y+12	; 0x0c
     776:	7d 85       	ldd	r23, Y+13	; 0x0d
     778:	8e 85       	ldd	r24, Y+14	; 0x0e
     77a:	9f 85       	ldd	r25, Y+15	; 0x0f
     77c:	20 e0       	ldi	r18, 0x00	; 0
     77e:	30 e0       	ldi	r19, 0x00	; 0
     780:	4a ef       	ldi	r20, 0xFA	; 250
     782:	54 e4       	ldi	r21, 0x44	; 68
     784:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     788:	dc 01       	movw	r26, r24
     78a:	cb 01       	movw	r24, r22
     78c:	88 87       	std	Y+8, r24	; 0x08
     78e:	99 87       	std	Y+9, r25	; 0x09
     790:	aa 87       	std	Y+10, r26	; 0x0a
     792:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     794:	68 85       	ldd	r22, Y+8	; 0x08
     796:	79 85       	ldd	r23, Y+9	; 0x09
     798:	8a 85       	ldd	r24, Y+10	; 0x0a
     79a:	9b 85       	ldd	r25, Y+11	; 0x0b
     79c:	20 e0       	ldi	r18, 0x00	; 0
     79e:	30 e0       	ldi	r19, 0x00	; 0
     7a0:	40 e8       	ldi	r20, 0x80	; 128
     7a2:	5f e3       	ldi	r21, 0x3F	; 63
     7a4:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
     7a8:	88 23       	and	r24, r24
     7aa:	2c f4       	brge	.+10     	; 0x7b6 <nrf24l01_setTX+0x11c>
		__ticks = 1;
     7ac:	81 e0       	ldi	r24, 0x01	; 1
     7ae:	90 e0       	ldi	r25, 0x00	; 0
     7b0:	9f 83       	std	Y+7, r25	; 0x07
     7b2:	8e 83       	std	Y+6, r24	; 0x06
     7b4:	3f c0       	rjmp	.+126    	; 0x834 <nrf24l01_setTX+0x19a>
	else if (__tmp > 65535)
     7b6:	68 85       	ldd	r22, Y+8	; 0x08
     7b8:	79 85       	ldd	r23, Y+9	; 0x09
     7ba:	8a 85       	ldd	r24, Y+10	; 0x0a
     7bc:	9b 85       	ldd	r25, Y+11	; 0x0b
     7be:	20 e0       	ldi	r18, 0x00	; 0
     7c0:	3f ef       	ldi	r19, 0xFF	; 255
     7c2:	4f e7       	ldi	r20, 0x7F	; 127
     7c4:	57 e4       	ldi	r21, 0x47	; 71
     7c6:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
     7ca:	18 16       	cp	r1, r24
     7cc:	4c f5       	brge	.+82     	; 0x820 <nrf24l01_setTX+0x186>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     7ce:	6c 85       	ldd	r22, Y+12	; 0x0c
     7d0:	7d 85       	ldd	r23, Y+13	; 0x0d
     7d2:	8e 85       	ldd	r24, Y+14	; 0x0e
     7d4:	9f 85       	ldd	r25, Y+15	; 0x0f
     7d6:	20 e0       	ldi	r18, 0x00	; 0
     7d8:	30 e0       	ldi	r19, 0x00	; 0
     7da:	40 e2       	ldi	r20, 0x20	; 32
     7dc:	51 e4       	ldi	r21, 0x41	; 65
     7de:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     7e2:	dc 01       	movw	r26, r24
     7e4:	cb 01       	movw	r24, r22
     7e6:	bc 01       	movw	r22, r24
     7e8:	cd 01       	movw	r24, r26
     7ea:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     7ee:	dc 01       	movw	r26, r24
     7f0:	cb 01       	movw	r24, r22
     7f2:	9f 83       	std	Y+7, r25	; 0x07
     7f4:	8e 83       	std	Y+6, r24	; 0x06
     7f6:	0f c0       	rjmp	.+30     	; 0x816 <nrf24l01_setTX+0x17c>
     7f8:	88 ec       	ldi	r24, 0xC8	; 200
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	9d 83       	std	Y+5, r25	; 0x05
     7fe:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     800:	8c 81       	ldd	r24, Y+4	; 0x04
     802:	9d 81       	ldd	r25, Y+5	; 0x05
     804:	01 97       	sbiw	r24, 0x01	; 1
     806:	f1 f7       	brne	.-4      	; 0x804 <nrf24l01_setTX+0x16a>
     808:	9d 83       	std	Y+5, r25	; 0x05
     80a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     80c:	8e 81       	ldd	r24, Y+6	; 0x06
     80e:	9f 81       	ldd	r25, Y+7	; 0x07
     810:	01 97       	sbiw	r24, 0x01	; 1
     812:	9f 83       	std	Y+7, r25	; 0x07
     814:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     816:	8e 81       	ldd	r24, Y+6	; 0x06
     818:	9f 81       	ldd	r25, Y+7	; 0x07
     81a:	00 97       	sbiw	r24, 0x00	; 0
     81c:	69 f7       	brne	.-38     	; 0x7f8 <nrf24l01_setTX+0x15e>
     81e:	24 c0       	rjmp	.+72     	; 0x868 <nrf24l01_setTX+0x1ce>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     820:	68 85       	ldd	r22, Y+8	; 0x08
     822:	79 85       	ldd	r23, Y+9	; 0x09
     824:	8a 85       	ldd	r24, Y+10	; 0x0a
     826:	9b 85       	ldd	r25, Y+11	; 0x0b
     828:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     82c:	dc 01       	movw	r26, r24
     82e:	cb 01       	movw	r24, r22
     830:	9f 83       	std	Y+7, r25	; 0x07
     832:	8e 83       	std	Y+6, r24	; 0x06
     834:	8e 81       	ldd	r24, Y+6	; 0x06
     836:	9f 81       	ldd	r25, Y+7	; 0x07
     838:	9b 83       	std	Y+3, r25	; 0x03
     83a:	8a 83       	std	Y+2, r24	; 0x02
     83c:	8a 81       	ldd	r24, Y+2	; 0x02
     83e:	9b 81       	ldd	r25, Y+3	; 0x03
     840:	01 97       	sbiw	r24, 0x01	; 1
     842:	f1 f7       	brne	.-4      	; 0x840 <nrf24l01_setTX+0x1a6>
     844:	9b 83       	std	Y+3, r25	; 0x03
     846:	8a 83       	std	Y+2, r24	; 0x02
     848:	0f c0       	rjmp	.+30     	; 0x868 <nrf24l01_setTX+0x1ce>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     84a:	69 89       	ldd	r22, Y+17	; 0x11
     84c:	7a 89       	ldd	r23, Y+18	; 0x12
     84e:	8b 89       	ldd	r24, Y+19	; 0x13
     850:	9c 89       	ldd	r25, Y+20	; 0x14
     852:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     856:	dc 01       	movw	r26, r24
     858:	cb 01       	movw	r24, r22
     85a:	88 8b       	std	Y+16, r24	; 0x10
     85c:	88 89       	ldd	r24, Y+16	; 0x10
     85e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     860:	89 81       	ldd	r24, Y+1	; 0x01
     862:	8a 95       	dec	r24
     864:	f1 f7       	brne	.-4      	; 0x862 <nrf24l01_setTX+0x1c8>
     866:	89 83       	std	Y+1, r24	; 0x01
	_delay_us(150); //wait for the radio to power up
}
     868:	68 96       	adiw	r28, 0x18	; 24
     86a:	0f b6       	in	r0, 0x3f	; 63
     86c:	f8 94       	cli
     86e:	de bf       	out	0x3e, r29	; 62
     870:	0f be       	out	0x3f, r0	; 63
     872:	cd bf       	out	0x3d, r28	; 61
     874:	cf 91       	pop	r28
     876:	df 91       	pop	r29
     878:	08 95       	ret

0000087a <nrf24l01_printinfo>:

#if NRF24L01_PRINTENABLE == 1
/*
 * print info
 */
void nrf24l01_printinfo(void(*prints)(const char *), void(*printc)(unsigned char data)) {
     87a:	df 93       	push	r29
     87c:	cf 93       	push	r28
     87e:	cd b7       	in	r28, 0x3d	; 61
     880:	de b7       	in	r29, 0x3e	; 62
     882:	c8 56       	subi	r28, 0x68	; 104
     884:	d0 40       	sbci	r29, 0x00	; 0
     886:	0f b6       	in	r0, 0x3f	; 63
     888:	f8 94       	cli
     88a:	de bf       	out	0x3e, r29	; 62
     88c:	0f be       	out	0x3f, r0	; 63
     88e:	cd bf       	out	0x3d, r28	; 61
     890:	fe 01       	movw	r30, r28
     892:	eb 59       	subi	r30, 0x9B	; 155
     894:	ff 4f       	sbci	r31, 0xFF	; 255
     896:	91 83       	std	Z+1, r25	; 0x01
     898:	80 83       	st	Z, r24
     89a:	fe 01       	movw	r30, r28
     89c:	e9 59       	subi	r30, 0x99	; 153
     89e:	ff 4f       	sbci	r31, 0xFF	; 255
     8a0:	71 83       	std	Z+1, r23	; 0x01
     8a2:	60 83       	st	Z, r22
	char buff[100];
	prints("info\r\n");
     8a4:	fe 01       	movw	r30, r28
     8a6:	eb 59       	subi	r30, 0x9B	; 155
     8a8:	ff 4f       	sbci	r31, 0xFF	; 255
     8aa:	83 e2       	ldi	r24, 0x23	; 35
     8ac:	91 e0       	ldi	r25, 0x01	; 1
     8ae:	01 90       	ld	r0, Z+
     8b0:	f0 81       	ld	r31, Z
     8b2:	e0 2d       	mov	r30, r0
     8b4:	09 95       	icall
	sprintf(buff,"STATUS: %02X\r\n", nrf24l01_getstatus()); prints(buff);
     8b6:	0e 94 85 05 	call	0xb0a	; 0xb0a <nrf24l01_getstatus>
     8ba:	28 2f       	mov	r18, r24
     8bc:	30 e0       	ldi	r19, 0x00	; 0
     8be:	00 d0       	rcall	.+0      	; 0x8c0 <nrf24l01_printinfo+0x46>
     8c0:	00 d0       	rcall	.+0      	; 0x8c2 <nrf24l01_printinfo+0x48>
     8c2:	00 d0       	rcall	.+0      	; 0x8c4 <nrf24l01_printinfo+0x4a>
     8c4:	ed b7       	in	r30, 0x3d	; 61
     8c6:	fe b7       	in	r31, 0x3e	; 62
     8c8:	31 96       	adiw	r30, 0x01	; 1
     8ca:	ce 01       	movw	r24, r28
     8cc:	01 96       	adiw	r24, 0x01	; 1
     8ce:	91 83       	std	Z+1, r25	; 0x01
     8d0:	80 83       	st	Z, r24
     8d2:	8a e2       	ldi	r24, 0x2A	; 42
     8d4:	91 e0       	ldi	r25, 0x01	; 1
     8d6:	93 83       	std	Z+3, r25	; 0x03
     8d8:	82 83       	std	Z+2, r24	; 0x02
     8da:	35 83       	std	Z+5, r19	; 0x05
     8dc:	24 83       	std	Z+4, r18	; 0x04
     8de:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <sprintf>
     8e2:	8d b7       	in	r24, 0x3d	; 61
     8e4:	9e b7       	in	r25, 0x3e	; 62
     8e6:	06 96       	adiw	r24, 0x06	; 6
     8e8:	0f b6       	in	r0, 0x3f	; 63
     8ea:	f8 94       	cli
     8ec:	9e bf       	out	0x3e, r25	; 62
     8ee:	0f be       	out	0x3f, r0	; 63
     8f0:	8d bf       	out	0x3d, r24	; 61
     8f2:	fe 01       	movw	r30, r28
     8f4:	eb 59       	subi	r30, 0x9B	; 155
     8f6:	ff 4f       	sbci	r31, 0xFF	; 255
     8f8:	01 90       	ld	r0, Z+
     8fa:	f0 81       	ld	r31, Z
     8fc:	e0 2d       	mov	r30, r0
     8fe:	ce 01       	movw	r24, r28
     900:	01 96       	adiw	r24, 0x01	; 1
     902:	09 95       	icall
	sprintf(buff,"CONFIG: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_CONFIG)); prints(buff);
     904:	80 e0       	ldi	r24, 0x00	; 0
     906:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     90a:	28 2f       	mov	r18, r24
     90c:	30 e0       	ldi	r19, 0x00	; 0
     90e:	00 d0       	rcall	.+0      	; 0x910 <__stack+0x11>
     910:	00 d0       	rcall	.+0      	; 0x912 <__stack+0x13>
     912:	00 d0       	rcall	.+0      	; 0x914 <__stack+0x15>
     914:	ed b7       	in	r30, 0x3d	; 61
     916:	fe b7       	in	r31, 0x3e	; 62
     918:	31 96       	adiw	r30, 0x01	; 1
     91a:	ce 01       	movw	r24, r28
     91c:	01 96       	adiw	r24, 0x01	; 1
     91e:	91 83       	std	Z+1, r25	; 0x01
     920:	80 83       	st	Z, r24
     922:	89 e3       	ldi	r24, 0x39	; 57
     924:	91 e0       	ldi	r25, 0x01	; 1
     926:	93 83       	std	Z+3, r25	; 0x03
     928:	82 83       	std	Z+2, r24	; 0x02
     92a:	35 83       	std	Z+5, r19	; 0x05
     92c:	24 83       	std	Z+4, r18	; 0x04
     92e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <sprintf>
     932:	8d b7       	in	r24, 0x3d	; 61
     934:	9e b7       	in	r25, 0x3e	; 62
     936:	06 96       	adiw	r24, 0x06	; 6
     938:	0f b6       	in	r0, 0x3f	; 63
     93a:	f8 94       	cli
     93c:	9e bf       	out	0x3e, r25	; 62
     93e:	0f be       	out	0x3f, r0	; 63
     940:	8d bf       	out	0x3d, r24	; 61
     942:	fe 01       	movw	r30, r28
     944:	eb 59       	subi	r30, 0x9B	; 155
     946:	ff 4f       	sbci	r31, 0xFF	; 255
     948:	01 90       	ld	r0, Z+
     94a:	f0 81       	ld	r31, Z
     94c:	e0 2d       	mov	r30, r0
     94e:	ce 01       	movw	r24, r28
     950:	01 96       	adiw	r24, 0x01	; 1
     952:	09 95       	icall
	sprintf(buff,"RF_CH: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_CH)); prints(buff);
     954:	85 e0       	ldi	r24, 0x05	; 5
     956:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     95a:	28 2f       	mov	r18, r24
     95c:	30 e0       	ldi	r19, 0x00	; 0
     95e:	00 d0       	rcall	.+0      	; 0x960 <__stack+0x61>
     960:	00 d0       	rcall	.+0      	; 0x962 <__stack+0x63>
     962:	00 d0       	rcall	.+0      	; 0x964 <__stack+0x65>
     964:	ed b7       	in	r30, 0x3d	; 61
     966:	fe b7       	in	r31, 0x3e	; 62
     968:	31 96       	adiw	r30, 0x01	; 1
     96a:	ce 01       	movw	r24, r28
     96c:	01 96       	adiw	r24, 0x01	; 1
     96e:	91 83       	std	Z+1, r25	; 0x01
     970:	80 83       	st	Z, r24
     972:	88 e4       	ldi	r24, 0x48	; 72
     974:	91 e0       	ldi	r25, 0x01	; 1
     976:	93 83       	std	Z+3, r25	; 0x03
     978:	82 83       	std	Z+2, r24	; 0x02
     97a:	35 83       	std	Z+5, r19	; 0x05
     97c:	24 83       	std	Z+4, r18	; 0x04
     97e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <sprintf>
     982:	8d b7       	in	r24, 0x3d	; 61
     984:	9e b7       	in	r25, 0x3e	; 62
     986:	06 96       	adiw	r24, 0x06	; 6
     988:	0f b6       	in	r0, 0x3f	; 63
     98a:	f8 94       	cli
     98c:	9e bf       	out	0x3e, r25	; 62
     98e:	0f be       	out	0x3f, r0	; 63
     990:	8d bf       	out	0x3d, r24	; 61
     992:	fe 01       	movw	r30, r28
     994:	eb 59       	subi	r30, 0x9B	; 155
     996:	ff 4f       	sbci	r31, 0xFF	; 255
     998:	01 90       	ld	r0, Z+
     99a:	f0 81       	ld	r31, Z
     99c:	e0 2d       	mov	r30, r0
     99e:	ce 01       	movw	r24, r28
     9a0:	01 96       	adiw	r24, 0x01	; 1
     9a2:	09 95       	icall
	sprintf(buff,"RF_SETUP: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_RF_SETUP)); prints(buff);
     9a4:	86 e0       	ldi	r24, 0x06	; 6
     9a6:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     9aa:	28 2f       	mov	r18, r24
     9ac:	30 e0       	ldi	r19, 0x00	; 0
     9ae:	00 d0       	rcall	.+0      	; 0x9b0 <__stack+0xb1>
     9b0:	00 d0       	rcall	.+0      	; 0x9b2 <__stack+0xb3>
     9b2:	00 d0       	rcall	.+0      	; 0x9b4 <__stack+0xb5>
     9b4:	ed b7       	in	r30, 0x3d	; 61
     9b6:	fe b7       	in	r31, 0x3e	; 62
     9b8:	31 96       	adiw	r30, 0x01	; 1
     9ba:	ce 01       	movw	r24, r28
     9bc:	01 96       	adiw	r24, 0x01	; 1
     9be:	91 83       	std	Z+1, r25	; 0x01
     9c0:	80 83       	st	Z, r24
     9c2:	86 e5       	ldi	r24, 0x56	; 86
     9c4:	91 e0       	ldi	r25, 0x01	; 1
     9c6:	93 83       	std	Z+3, r25	; 0x03
     9c8:	82 83       	std	Z+2, r24	; 0x02
     9ca:	35 83       	std	Z+5, r19	; 0x05
     9cc:	24 83       	std	Z+4, r18	; 0x04
     9ce:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <sprintf>
     9d2:	8d b7       	in	r24, 0x3d	; 61
     9d4:	9e b7       	in	r25, 0x3e	; 62
     9d6:	06 96       	adiw	r24, 0x06	; 6
     9d8:	0f b6       	in	r0, 0x3f	; 63
     9da:	f8 94       	cli
     9dc:	9e bf       	out	0x3e, r25	; 62
     9de:	0f be       	out	0x3f, r0	; 63
     9e0:	8d bf       	out	0x3d, r24	; 61
     9e2:	fe 01       	movw	r30, r28
     9e4:	eb 59       	subi	r30, 0x9B	; 155
     9e6:	ff 4f       	sbci	r31, 0xFF	; 255
     9e8:	01 90       	ld	r0, Z+
     9ea:	f0 81       	ld	r31, Z
     9ec:	e0 2d       	mov	r30, r0
     9ee:	ce 01       	movw	r24, r28
     9f0:	01 96       	adiw	r24, 0x01	; 1
     9f2:	09 95       	icall
	sprintf(buff,"EN_AA: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_AA)); prints(buff);
     9f4:	81 e0       	ldi	r24, 0x01	; 1
     9f6:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     9fa:	28 2f       	mov	r18, r24
     9fc:	30 e0       	ldi	r19, 0x00	; 0
     9fe:	00 d0       	rcall	.+0      	; 0xa00 <__stack+0x101>
     a00:	00 d0       	rcall	.+0      	; 0xa02 <__stack+0x103>
     a02:	00 d0       	rcall	.+0      	; 0xa04 <__stack+0x105>
     a04:	ed b7       	in	r30, 0x3d	; 61
     a06:	fe b7       	in	r31, 0x3e	; 62
     a08:	31 96       	adiw	r30, 0x01	; 1
     a0a:	ce 01       	movw	r24, r28
     a0c:	01 96       	adiw	r24, 0x01	; 1
     a0e:	91 83       	std	Z+1, r25	; 0x01
     a10:	80 83       	st	Z, r24
     a12:	87 e6       	ldi	r24, 0x67	; 103
     a14:	91 e0       	ldi	r25, 0x01	; 1
     a16:	93 83       	std	Z+3, r25	; 0x03
     a18:	82 83       	std	Z+2, r24	; 0x02
     a1a:	35 83       	std	Z+5, r19	; 0x05
     a1c:	24 83       	std	Z+4, r18	; 0x04
     a1e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <sprintf>
     a22:	8d b7       	in	r24, 0x3d	; 61
     a24:	9e b7       	in	r25, 0x3e	; 62
     a26:	06 96       	adiw	r24, 0x06	; 6
     a28:	0f b6       	in	r0, 0x3f	; 63
     a2a:	f8 94       	cli
     a2c:	9e bf       	out	0x3e, r25	; 62
     a2e:	0f be       	out	0x3f, r0	; 63
     a30:	8d bf       	out	0x3d, r24	; 61
     a32:	fe 01       	movw	r30, r28
     a34:	eb 59       	subi	r30, 0x9B	; 155
     a36:	ff 4f       	sbci	r31, 0xFF	; 255
     a38:	01 90       	ld	r0, Z+
     a3a:	f0 81       	ld	r31, Z
     a3c:	e0 2d       	mov	r30, r0
     a3e:	ce 01       	movw	r24, r28
     a40:	01 96       	adiw	r24, 0x01	; 1
     a42:	09 95       	icall
	sprintf(buff,"EN_RXADDR: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_EN_RXADDR)); prints(buff);
     a44:	82 e0       	ldi	r24, 0x02	; 2
     a46:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     a4a:	28 2f       	mov	r18, r24
     a4c:	30 e0       	ldi	r19, 0x00	; 0
     a4e:	00 d0       	rcall	.+0      	; 0xa50 <__stack+0x151>
     a50:	00 d0       	rcall	.+0      	; 0xa52 <__stack+0x153>
     a52:	00 d0       	rcall	.+0      	; 0xa54 <__stack+0x155>
     a54:	ed b7       	in	r30, 0x3d	; 61
     a56:	fe b7       	in	r31, 0x3e	; 62
     a58:	31 96       	adiw	r30, 0x01	; 1
     a5a:	ce 01       	movw	r24, r28
     a5c:	01 96       	adiw	r24, 0x01	; 1
     a5e:	91 83       	std	Z+1, r25	; 0x01
     a60:	80 83       	st	Z, r24
     a62:	85 e7       	ldi	r24, 0x75	; 117
     a64:	91 e0       	ldi	r25, 0x01	; 1
     a66:	93 83       	std	Z+3, r25	; 0x03
     a68:	82 83       	std	Z+2, r24	; 0x02
     a6a:	35 83       	std	Z+5, r19	; 0x05
     a6c:	24 83       	std	Z+4, r18	; 0x04
     a6e:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <sprintf>
     a72:	8d b7       	in	r24, 0x3d	; 61
     a74:	9e b7       	in	r25, 0x3e	; 62
     a76:	06 96       	adiw	r24, 0x06	; 6
     a78:	0f b6       	in	r0, 0x3f	; 63
     a7a:	f8 94       	cli
     a7c:	9e bf       	out	0x3e, r25	; 62
     a7e:	0f be       	out	0x3f, r0	; 63
     a80:	8d bf       	out	0x3d, r24	; 61
     a82:	fe 01       	movw	r30, r28
     a84:	eb 59       	subi	r30, 0x9B	; 155
     a86:	ff 4f       	sbci	r31, 0xFF	; 255
     a88:	01 90       	ld	r0, Z+
     a8a:	f0 81       	ld	r31, Z
     a8c:	e0 2d       	mov	r30, r0
     a8e:	ce 01       	movw	r24, r28
     a90:	01 96       	adiw	r24, 0x01	; 1
     a92:	09 95       	icall
	sprintf(buff,"OBSERVE_TX: %02X\r\n", nrf24l01_readregister(NRF24L01_REG_OBSERVE_TX)); prints(buff);
     a94:	88 e0       	ldi	r24, 0x08	; 8
     a96:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     a9a:	28 2f       	mov	r18, r24
     a9c:	30 e0       	ldi	r19, 0x00	; 0
     a9e:	00 d0       	rcall	.+0      	; 0xaa0 <__stack+0x1a1>
     aa0:	00 d0       	rcall	.+0      	; 0xaa2 <__stack+0x1a3>
     aa2:	00 d0       	rcall	.+0      	; 0xaa4 <__stack+0x1a5>
     aa4:	ed b7       	in	r30, 0x3d	; 61
     aa6:	fe b7       	in	r31, 0x3e	; 62
     aa8:	31 96       	adiw	r30, 0x01	; 1
     aaa:	ce 01       	movw	r24, r28
     aac:	01 96       	adiw	r24, 0x01	; 1
     aae:	91 83       	std	Z+1, r25	; 0x01
     ab0:	80 83       	st	Z, r24
     ab2:	87 e8       	ldi	r24, 0x87	; 135
     ab4:	91 e0       	ldi	r25, 0x01	; 1
     ab6:	93 83       	std	Z+3, r25	; 0x03
     ab8:	82 83       	std	Z+2, r24	; 0x02
     aba:	35 83       	std	Z+5, r19	; 0x05
     abc:	24 83       	std	Z+4, r18	; 0x04
     abe:	0e 94 1e 1d 	call	0x3a3c	; 0x3a3c <sprintf>
     ac2:	8d b7       	in	r24, 0x3d	; 61
     ac4:	9e b7       	in	r25, 0x3e	; 62
     ac6:	06 96       	adiw	r24, 0x06	; 6
     ac8:	0f b6       	in	r0, 0x3f	; 63
     aca:	f8 94       	cli
     acc:	9e bf       	out	0x3e, r25	; 62
     ace:	0f be       	out	0x3f, r0	; 63
     ad0:	8d bf       	out	0x3d, r24	; 61
     ad2:	fe 01       	movw	r30, r28
     ad4:	eb 59       	subi	r30, 0x9B	; 155
     ad6:	ff 4f       	sbci	r31, 0xFF	; 255
     ad8:	01 90       	ld	r0, Z+
     ada:	f0 81       	ld	r31, Z
     adc:	e0 2d       	mov	r30, r0
     ade:	ce 01       	movw	r24, r28
     ae0:	01 96       	adiw	r24, 0x01	; 1
     ae2:	09 95       	icall
	prints("\r\n");
     ae4:	fe 01       	movw	r30, r28
     ae6:	eb 59       	subi	r30, 0x9B	; 155
     ae8:	ff 4f       	sbci	r31, 0xFF	; 255
     aea:	8a e9       	ldi	r24, 0x9A	; 154
     aec:	91 e0       	ldi	r25, 0x01	; 1
     aee:	01 90       	ld	r0, Z+
     af0:	f0 81       	ld	r31, Z
     af2:	e0 2d       	mov	r30, r0
     af4:	09 95       	icall
}
     af6:	c8 59       	subi	r28, 0x98	; 152
     af8:	df 4f       	sbci	r29, 0xFF	; 255
     afa:	0f b6       	in	r0, 0x3f	; 63
     afc:	f8 94       	cli
     afe:	de bf       	out	0x3e, r29	; 62
     b00:	0f be       	out	0x3f, r0	; 63
     b02:	cd bf       	out	0x3d, r28	; 61
     b04:	cf 91       	pop	r28
     b06:	df 91       	pop	r29
     b08:	08 95       	ret

00000b0a <nrf24l01_getstatus>:


/*
 * get status register
 */
uint8_t nrf24l01_getstatus() {
     b0a:	df 93       	push	r29
     b0c:	cf 93       	push	r28
     b0e:	0f 92       	push	r0
     b10:	cd b7       	in	r28, 0x3d	; 61
     b12:	de b7       	in	r29, 0x3e	; 62
	uint8_t status = 0;
     b14:	19 82       	std	Y+1, r1	; 0x01
	nrf24l01_CSNlo; //low CSN
     b16:	a5 e2       	ldi	r26, 0x25	; 37
     b18:	b0 e0       	ldi	r27, 0x00	; 0
     b1a:	e5 e2       	ldi	r30, 0x25	; 37
     b1c:	f0 e0       	ldi	r31, 0x00	; 0
     b1e:	80 81       	ld	r24, Z
     b20:	8d 7f       	andi	r24, 0xFD	; 253
     b22:	8c 93       	st	X, r24
	status = spi_writereadbyte(NRF24L01_CMD_NOP); //get status, send NOP request
     b24:	8f ef       	ldi	r24, 0xFF	; 255
     b26:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
     b2a:	89 83       	std	Y+1, r24	; 0x01
	nrf24l01_CSNhi; //high CSN
     b2c:	a5 e2       	ldi	r26, 0x25	; 37
     b2e:	b0 e0       	ldi	r27, 0x00	; 0
     b30:	e5 e2       	ldi	r30, 0x25	; 37
     b32:	f0 e0       	ldi	r31, 0x00	; 0
     b34:	80 81       	ld	r24, Z
     b36:	82 60       	ori	r24, 0x02	; 2
     b38:	8c 93       	st	X, r24
	return status;
     b3a:	89 81       	ldd	r24, Y+1	; 0x01
}
     b3c:	0f 90       	pop	r0
     b3e:	cf 91       	pop	r28
     b40:	df 91       	pop	r29
     b42:	08 95       	ret

00000b44 <nrf24l01_readready>:

/*
 * check if there is data ready
 */
uint8_t nrf24l01_readready(uint8_t* pipe) {
     b44:	df 93       	push	r29
     b46:	cf 93       	push	r28
     b48:	00 d0       	rcall	.+0      	; 0xb4a <nrf24l01_readready+0x6>
     b4a:	00 d0       	rcall	.+0      	; 0xb4c <nrf24l01_readready+0x8>
     b4c:	cd b7       	in	r28, 0x3d	; 61
     b4e:	de b7       	in	r29, 0x3e	; 62
     b50:	9c 83       	std	Y+4, r25	; 0x04
     b52:	8b 83       	std	Y+3, r24	; 0x03
    uint8_t status = nrf24l01_getstatus();
     b54:	0e 94 85 05 	call	0xb0a	; 0xb0a <nrf24l01_getstatus>
     b58:	8a 83       	std	Y+2, r24	; 0x02
    uint8_t ret = status & (1<<NRF24L01_REG_RX_DR);
     b5a:	8a 81       	ldd	r24, Y+2	; 0x02
     b5c:	80 74       	andi	r24, 0x40	; 64
     b5e:	89 83       	std	Y+1, r24	; 0x01
    if(ret) {
     b60:	89 81       	ldd	r24, Y+1	; 0x01
     b62:	88 23       	and	r24, r24
     b64:	51 f0       	breq	.+20     	; 0xb7a <nrf24l01_readready+0x36>
		//get the pipe number
		if(pipe)
     b66:	8b 81       	ldd	r24, Y+3	; 0x03
     b68:	9c 81       	ldd	r25, Y+4	; 0x04
     b6a:	00 97       	sbiw	r24, 0x00	; 0
     b6c:	31 f0       	breq	.+12     	; 0xb7a <nrf24l01_readready+0x36>
			*pipe = (status >> NRF24L01_REG_RX_P_NO) & 0b111;
     b6e:	8a 81       	ldd	r24, Y+2	; 0x02
     b70:	86 95       	lsr	r24
     b72:	87 70       	andi	r24, 0x07	; 7
     b74:	eb 81       	ldd	r30, Y+3	; 0x03
     b76:	fc 81       	ldd	r31, Y+4	; 0x04
     b78:	80 83       	st	Z, r24
    }
    return ret;
     b7a:	89 81       	ldd	r24, Y+1	; 0x01
}
     b7c:	0f 90       	pop	r0
     b7e:	0f 90       	pop	r0
     b80:	0f 90       	pop	r0
     b82:	0f 90       	pop	r0
     b84:	cf 91       	pop	r28
     b86:	df 91       	pop	r29
     b88:	08 95       	ret

00000b8a <nrf24l01_read>:

/*
 * get data
 */
void nrf24l01_read(uint8_t *data) {
     b8a:	0f 93       	push	r16
     b8c:	1f 93       	push	r17
     b8e:	df 93       	push	r29
     b90:	cf 93       	push	r28
     b92:	00 d0       	rcall	.+0      	; 0xb94 <nrf24l01_read+0xa>
     b94:	0f 92       	push	r0
     b96:	cd b7       	in	r28, 0x3d	; 61
     b98:	de b7       	in	r29, 0x3e	; 62
     b9a:	9b 83       	std	Y+3, r25	; 0x03
     b9c:	8a 83       	std	Y+2, r24	; 0x02
	uint8_t i = 0;
     b9e:	19 82       	std	Y+1, r1	; 0x01
	//read rx register
	nrf24l01_CSNlo; //low CSN
     ba0:	a5 e2       	ldi	r26, 0x25	; 37
     ba2:	b0 e0       	ldi	r27, 0x00	; 0
     ba4:	e5 e2       	ldi	r30, 0x25	; 37
     ba6:	f0 e0       	ldi	r31, 0x00	; 0
     ba8:	80 81       	ld	r24, Z
     baa:	8d 7f       	andi	r24, 0xFD	; 253
     bac:	8c 93       	st	X, r24
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
     bae:	81 e6       	ldi	r24, 0x61	; 97
     bb0:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     bb4:	19 82       	std	Y+1, r1	; 0x01
     bb6:	10 c0       	rjmp	.+32     	; 0xbd8 <nrf24l01_read+0x4e>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
     bb8:	89 81       	ldd	r24, Y+1	; 0x01
     bba:	28 2f       	mov	r18, r24
     bbc:	30 e0       	ldi	r19, 0x00	; 0
     bbe:	8a 81       	ldd	r24, Y+2	; 0x02
     bc0:	9b 81       	ldd	r25, Y+3	; 0x03
     bc2:	8c 01       	movw	r16, r24
     bc4:	02 0f       	add	r16, r18
     bc6:	13 1f       	adc	r17, r19
     bc8:	8f ef       	ldi	r24, 0xFF	; 255
     bca:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
     bce:	f8 01       	movw	r30, r16
     bd0:	80 83       	st	Z, r24
void nrf24l01_read(uint8_t *data) {
	uint8_t i = 0;
	//read rx register
	nrf24l01_CSNlo; //low CSN
    spi_writereadbyte(NRF24L01_CMD_R_RX_PAYLOAD);
    for(i=0; i<NRF24L01_PAYLOAD; i++)
     bd2:	89 81       	ldd	r24, Y+1	; 0x01
     bd4:	8f 5f       	subi	r24, 0xFF	; 255
     bd6:	89 83       	std	Y+1, r24	; 0x01
     bd8:	89 81       	ldd	r24, Y+1	; 0x01
     bda:	80 31       	cpi	r24, 0x10	; 16
     bdc:	68 f3       	brcs	.-38     	; 0xbb8 <nrf24l01_read+0x2e>
    	data[i] = spi_writereadbyte(NRF24L01_CMD_NOP);
    nrf24l01_CSNhi; //high CSN
     bde:	a5 e2       	ldi	r26, 0x25	; 37
     be0:	b0 e0       	ldi	r27, 0x00	; 0
     be2:	e5 e2       	ldi	r30, 0x25	; 37
     be4:	f0 e0       	ldi	r31, 0x00	; 0
     be6:	80 81       	ld	r24, Z
     be8:	82 60       	ori	r24, 0x02	; 2
     bea:	8c 93       	st	X, r24
    //reset register
    nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_RX_DR));
     bec:	87 e0       	ldi	r24, 0x07	; 7
     bee:	60 e4       	ldi	r22, 0x40	; 64
     bf0:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
    //handle ack payload receipt
	if (nrf24l01_getstatus() & (1<<NRF24L01_REG_TX_DS))
     bf4:	0e 94 85 05 	call	0xb0a	; 0xb0a <nrf24l01_getstatus>
     bf8:	88 2f       	mov	r24, r24
     bfa:	90 e0       	ldi	r25, 0x00	; 0
     bfc:	80 72       	andi	r24, 0x20	; 32
     bfe:	90 70       	andi	r25, 0x00	; 0
     c00:	00 97       	sbiw	r24, 0x00	; 0
     c02:	21 f0       	breq	.+8      	; 0xc0c <nrf24l01_read+0x82>
		nrf24l01_writeregister(NRF24L01_REG_STATUS, (1<<NRF24L01_REG_TX_DS));
     c04:	87 e0       	ldi	r24, 0x07	; 7
     c06:	60 e2       	ldi	r22, 0x20	; 32
     c08:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
}
     c0c:	0f 90       	pop	r0
     c0e:	0f 90       	pop	r0
     c10:	0f 90       	pop	r0
     c12:	cf 91       	pop	r28
     c14:	df 91       	pop	r29
     c16:	1f 91       	pop	r17
     c18:	0f 91       	pop	r16
     c1a:	08 95       	ret

00000c1c <nrf24l01_write>:

/*
 * put data
 */
uint8_t nrf24l01_write(uint8_t *data) {
     c1c:	df 93       	push	r29
     c1e:	cf 93       	push	r28
     c20:	cd b7       	in	r28, 0x3d	; 61
     c22:	de b7       	in	r29, 0x3e	; 62
     c24:	e4 97       	sbiw	r28, 0x34	; 52
     c26:	0f b6       	in	r0, 0x3f	; 63
     c28:	f8 94       	cli
     c2a:	de bf       	out	0x3e, r29	; 62
     c2c:	0f be       	out	0x3f, r0	; 63
     c2e:	cd bf       	out	0x3d, r28	; 61
     c30:	9c ab       	std	Y+52, r25	; 0x34
     c32:	8b ab       	std	Y+51, r24	; 0x33
	uint8_t i = 0;
     c34:	1a aa       	std	Y+50, r1	; 0x32
	uint8_t ret = 0;
     c36:	19 aa       	std	Y+49, r1	; 0x31

	//set tx mode
	nrf24l01_setTX();
     c38:	0e 94 4d 03 	call	0x69a	; 0x69a <nrf24l01_setTX>

	//write data
	nrf24l01_CSNlo; //low CSN
     c3c:	a5 e2       	ldi	r26, 0x25	; 37
     c3e:	b0 e0       	ldi	r27, 0x00	; 0
     c40:	e5 e2       	ldi	r30, 0x25	; 37
     c42:	f0 e0       	ldi	r31, 0x00	; 0
     c44:	80 81       	ld	r24, Z
     c46:	8d 7f       	andi	r24, 0xFD	; 253
     c48:	8c 93       	st	X, r24
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
     c4a:	80 ea       	ldi	r24, 0xA0	; 160
     c4c:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     c50:	1a aa       	std	Y+50, r1	; 0x32
     c52:	0e c0       	rjmp	.+28     	; 0xc70 <nrf24l01_write+0x54>
		spi_writereadbyte(data[i]);
     c54:	8a a9       	ldd	r24, Y+50	; 0x32
     c56:	28 2f       	mov	r18, r24
     c58:	30 e0       	ldi	r19, 0x00	; 0
     c5a:	8b a9       	ldd	r24, Y+51	; 0x33
     c5c:	9c a9       	ldd	r25, Y+52	; 0x34
     c5e:	fc 01       	movw	r30, r24
     c60:	e2 0f       	add	r30, r18
     c62:	f3 1f       	adc	r31, r19
     c64:	80 81       	ld	r24, Z
     c66:	0e 94 bf 09 	call	0x137e	; 0x137e <spi_writereadbyte>
	nrf24l01_setTX();

	//write data
	nrf24l01_CSNlo; //low CSN
	spi_writereadbyte(NRF24L01_CMD_W_TX_PAYLOAD);
	for (i=0; i<NRF24L01_PAYLOAD; i++)
     c6a:	8a a9       	ldd	r24, Y+50	; 0x32
     c6c:	8f 5f       	subi	r24, 0xFF	; 255
     c6e:	8a ab       	std	Y+50, r24	; 0x32
     c70:	8a a9       	ldd	r24, Y+50	; 0x32
     c72:	80 31       	cpi	r24, 0x10	; 16
     c74:	78 f3       	brcs	.-34     	; 0xc54 <nrf24l01_write+0x38>
		spi_writereadbyte(data[i]);
	nrf24l01_CSNhi; //high CSN
     c76:	a5 e2       	ldi	r26, 0x25	; 37
     c78:	b0 e0       	ldi	r27, 0x00	; 0
     c7a:	e5 e2       	ldi	r30, 0x25	; 37
     c7c:	f0 e0       	ldi	r31, 0x00	; 0
     c7e:	80 81       	ld	r24, Z
     c80:	82 60       	ori	r24, 0x02	; 2
     c82:	8c 93       	st	X, r24

	//start transmission
	nrf24l01_CEhi; //high CE
     c84:	a5 e2       	ldi	r26, 0x25	; 37
     c86:	b0 e0       	ldi	r27, 0x00	; 0
     c88:	e5 e2       	ldi	r30, 0x25	; 37
     c8a:	f0 e0       	ldi	r31, 0x00	; 0
     c8c:	80 81       	ld	r24, Z
     c8e:	81 60       	ori	r24, 0x01	; 1
     c90:	8c 93       	st	X, r24
     c92:	80 e0       	ldi	r24, 0x00	; 0
     c94:	90 e0       	ldi	r25, 0x00	; 0
     c96:	a0 e7       	ldi	r26, 0x70	; 112
     c98:	b1 e4       	ldi	r27, 0x41	; 65
     c9a:	8d a7       	std	Y+45, r24	; 0x2d
     c9c:	9e a7       	std	Y+46, r25	; 0x2e
     c9e:	af a7       	std	Y+47, r26	; 0x2f
     ca0:	b8 ab       	std	Y+48, r27	; 0x30
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     ca2:	6d a5       	ldd	r22, Y+45	; 0x2d
     ca4:	7e a5       	ldd	r23, Y+46	; 0x2e
     ca6:	8f a5       	ldd	r24, Y+47	; 0x2f
     ca8:	98 a9       	ldd	r25, Y+48	; 0x30
     caa:	2b ea       	ldi	r18, 0xAB	; 171
     cac:	3a ea       	ldi	r19, 0xAA	; 170
     cae:	4a e2       	ldi	r20, 0x2A	; 42
     cb0:	50 e4       	ldi	r21, 0x40	; 64
     cb2:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     cb6:	dc 01       	movw	r26, r24
     cb8:	cb 01       	movw	r24, r22
     cba:	89 a7       	std	Y+41, r24	; 0x29
     cbc:	9a a7       	std	Y+42, r25	; 0x2a
     cbe:	ab a7       	std	Y+43, r26	; 0x2b
     cc0:	bc a7       	std	Y+44, r27	; 0x2c
	if (__tmp < 1.0)
     cc2:	69 a5       	ldd	r22, Y+41	; 0x29
     cc4:	7a a5       	ldd	r23, Y+42	; 0x2a
     cc6:	8b a5       	ldd	r24, Y+43	; 0x2b
     cc8:	9c a5       	ldd	r25, Y+44	; 0x2c
     cca:	20 e0       	ldi	r18, 0x00	; 0
     ccc:	30 e0       	ldi	r19, 0x00	; 0
     cce:	40 e8       	ldi	r20, 0x80	; 128
     cd0:	5f e3       	ldi	r21, 0x3F	; 63
     cd2:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
     cd6:	88 23       	and	r24, r24
     cd8:	1c f4       	brge	.+6      	; 0xce0 <nrf24l01_write+0xc4>
		__ticks = 1;
     cda:	81 e0       	ldi	r24, 0x01	; 1
     cdc:	88 a7       	std	Y+40, r24	; 0x28
     cde:	91 c0       	rjmp	.+290    	; 0xe02 <nrf24l01_write+0x1e6>
	else if (__tmp > 255)
     ce0:	69 a5       	ldd	r22, Y+41	; 0x29
     ce2:	7a a5       	ldd	r23, Y+42	; 0x2a
     ce4:	8b a5       	ldd	r24, Y+43	; 0x2b
     ce6:	9c a5       	ldd	r25, Y+44	; 0x2c
     ce8:	20 e0       	ldi	r18, 0x00	; 0
     cea:	30 e0       	ldi	r19, 0x00	; 0
     cec:	4f e7       	ldi	r20, 0x7F	; 127
     cee:	53 e4       	ldi	r21, 0x43	; 67
     cf0:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
     cf4:	18 16       	cp	r1, r24
     cf6:	0c f0       	brlt	.+2      	; 0xcfa <nrf24l01_write+0xde>
     cf8:	7b c0       	rjmp	.+246    	; 0xdf0 <nrf24l01_write+0x1d4>
	{
		_delay_ms(__us / 1000.0);
     cfa:	6d a5       	ldd	r22, Y+45	; 0x2d
     cfc:	7e a5       	ldd	r23, Y+46	; 0x2e
     cfe:	8f a5       	ldd	r24, Y+47	; 0x2f
     d00:	98 a9       	ldd	r25, Y+48	; 0x30
     d02:	20 e0       	ldi	r18, 0x00	; 0
     d04:	30 e0       	ldi	r19, 0x00	; 0
     d06:	4a e7       	ldi	r20, 0x7A	; 122
     d08:	54 e4       	ldi	r21, 0x44	; 68
     d0a:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__divsf3>
     d0e:	dc 01       	movw	r26, r24
     d10:	cb 01       	movw	r24, r22
     d12:	8c a3       	std	Y+36, r24	; 0x24
     d14:	9d a3       	std	Y+37, r25	; 0x25
     d16:	ae a3       	std	Y+38, r26	; 0x26
     d18:	bf a3       	std	Y+39, r27	; 0x27
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     d1a:	6c a1       	ldd	r22, Y+36	; 0x24
     d1c:	7d a1       	ldd	r23, Y+37	; 0x25
     d1e:	8e a1       	ldd	r24, Y+38	; 0x26
     d20:	9f a1       	ldd	r25, Y+39	; 0x27
     d22:	20 e0       	ldi	r18, 0x00	; 0
     d24:	30 e0       	ldi	r19, 0x00	; 0
     d26:	4a ef       	ldi	r20, 0xFA	; 250
     d28:	54 e4       	ldi	r21, 0x44	; 68
     d2a:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     d2e:	dc 01       	movw	r26, r24
     d30:	cb 01       	movw	r24, r22
     d32:	88 a3       	std	Y+32, r24	; 0x20
     d34:	99 a3       	std	Y+33, r25	; 0x21
     d36:	aa a3       	std	Y+34, r26	; 0x22
     d38:	bb a3       	std	Y+35, r27	; 0x23
	if (__tmp < 1.0)
     d3a:	68 a1       	ldd	r22, Y+32	; 0x20
     d3c:	79 a1       	ldd	r23, Y+33	; 0x21
     d3e:	8a a1       	ldd	r24, Y+34	; 0x22
     d40:	9b a1       	ldd	r25, Y+35	; 0x23
     d42:	20 e0       	ldi	r18, 0x00	; 0
     d44:	30 e0       	ldi	r19, 0x00	; 0
     d46:	40 e8       	ldi	r20, 0x80	; 128
     d48:	5f e3       	ldi	r21, 0x3F	; 63
     d4a:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
     d4e:	88 23       	and	r24, r24
     d50:	2c f4       	brge	.+10     	; 0xd5c <nrf24l01_write+0x140>
		__ticks = 1;
     d52:	81 e0       	ldi	r24, 0x01	; 1
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	9f 8f       	std	Y+31, r25	; 0x1f
     d58:	8e 8f       	std	Y+30, r24	; 0x1e
     d5a:	3f c0       	rjmp	.+126    	; 0xdda <nrf24l01_write+0x1be>
	else if (__tmp > 65535)
     d5c:	68 a1       	ldd	r22, Y+32	; 0x20
     d5e:	79 a1       	ldd	r23, Y+33	; 0x21
     d60:	8a a1       	ldd	r24, Y+34	; 0x22
     d62:	9b a1       	ldd	r25, Y+35	; 0x23
     d64:	20 e0       	ldi	r18, 0x00	; 0
     d66:	3f ef       	ldi	r19, 0xFF	; 255
     d68:	4f e7       	ldi	r20, 0x7F	; 127
     d6a:	57 e4       	ldi	r21, 0x47	; 71
     d6c:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
     d70:	18 16       	cp	r1, r24
     d72:	4c f5       	brge	.+82     	; 0xdc6 <nrf24l01_write+0x1aa>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     d74:	6c a1       	ldd	r22, Y+36	; 0x24
     d76:	7d a1       	ldd	r23, Y+37	; 0x25
     d78:	8e a1       	ldd	r24, Y+38	; 0x26
     d7a:	9f a1       	ldd	r25, Y+39	; 0x27
     d7c:	20 e0       	ldi	r18, 0x00	; 0
     d7e:	30 e0       	ldi	r19, 0x00	; 0
     d80:	40 e2       	ldi	r20, 0x20	; 32
     d82:	51 e4       	ldi	r21, 0x41	; 65
     d84:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     d88:	dc 01       	movw	r26, r24
     d8a:	cb 01       	movw	r24, r22
     d8c:	bc 01       	movw	r22, r24
     d8e:	cd 01       	movw	r24, r26
     d90:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     d94:	dc 01       	movw	r26, r24
     d96:	cb 01       	movw	r24, r22
     d98:	9f 8f       	std	Y+31, r25	; 0x1f
     d9a:	8e 8f       	std	Y+30, r24	; 0x1e
     d9c:	0f c0       	rjmp	.+30     	; 0xdbc <nrf24l01_write+0x1a0>
     d9e:	88 ec       	ldi	r24, 0xC8	; 200
     da0:	90 e0       	ldi	r25, 0x00	; 0
     da2:	9d 8f       	std	Y+29, r25	; 0x1d
     da4:	8c 8f       	std	Y+28, r24	; 0x1c
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     da6:	8c 8d       	ldd	r24, Y+28	; 0x1c
     da8:	9d 8d       	ldd	r25, Y+29	; 0x1d
     daa:	01 97       	sbiw	r24, 0x01	; 1
     dac:	f1 f7       	brne	.-4      	; 0xdaa <nrf24l01_write+0x18e>
     dae:	9d 8f       	std	Y+29, r25	; 0x1d
     db0:	8c 8f       	std	Y+28, r24	; 0x1c
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     db2:	8e 8d       	ldd	r24, Y+30	; 0x1e
     db4:	9f 8d       	ldd	r25, Y+31	; 0x1f
     db6:	01 97       	sbiw	r24, 0x01	; 1
     db8:	9f 8f       	std	Y+31, r25	; 0x1f
     dba:	8e 8f       	std	Y+30, r24	; 0x1e
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     dbc:	8e 8d       	ldd	r24, Y+30	; 0x1e
     dbe:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dc0:	00 97       	sbiw	r24, 0x00	; 0
     dc2:	69 f7       	brne	.-38     	; 0xd9e <nrf24l01_write+0x182>
     dc4:	24 c0       	rjmp	.+72     	; 0xe0e <nrf24l01_write+0x1f2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     dc6:	68 a1       	ldd	r22, Y+32	; 0x20
     dc8:	79 a1       	ldd	r23, Y+33	; 0x21
     dca:	8a a1       	ldd	r24, Y+34	; 0x22
     dcc:	9b a1       	ldd	r25, Y+35	; 0x23
     dce:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     dd2:	dc 01       	movw	r26, r24
     dd4:	cb 01       	movw	r24, r22
     dd6:	9f 8f       	std	Y+31, r25	; 0x1f
     dd8:	8e 8f       	std	Y+30, r24	; 0x1e
     dda:	8e 8d       	ldd	r24, Y+30	; 0x1e
     ddc:	9f 8d       	ldd	r25, Y+31	; 0x1f
     dde:	9b 8f       	std	Y+27, r25	; 0x1b
     de0:	8a 8f       	std	Y+26, r24	; 0x1a
     de2:	8a 8d       	ldd	r24, Y+26	; 0x1a
     de4:	9b 8d       	ldd	r25, Y+27	; 0x1b
     de6:	01 97       	sbiw	r24, 0x01	; 1
     de8:	f1 f7       	brne	.-4      	; 0xde6 <nrf24l01_write+0x1ca>
     dea:	9b 8f       	std	Y+27, r25	; 0x1b
     dec:	8a 8f       	std	Y+26, r24	; 0x1a
     dee:	0f c0       	rjmp	.+30     	; 0xe0e <nrf24l01_write+0x1f2>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     df0:	69 a5       	ldd	r22, Y+41	; 0x29
     df2:	7a a5       	ldd	r23, Y+42	; 0x2a
     df4:	8b a5       	ldd	r24, Y+43	; 0x2b
     df6:	9c a5       	ldd	r25, Y+44	; 0x2c
     df8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     dfc:	dc 01       	movw	r26, r24
     dfe:	cb 01       	movw	r24, r22
     e00:	88 a7       	std	Y+40, r24	; 0x28
     e02:	88 a5       	ldd	r24, Y+40	; 0x28
     e04:	89 8f       	std	Y+25, r24	; 0x19
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     e06:	89 8d       	ldd	r24, Y+25	; 0x19
     e08:	8a 95       	dec	r24
     e0a:	f1 f7       	brne	.-4      	; 0xe08 <nrf24l01_write+0x1ec>
     e0c:	89 8f       	std	Y+25, r24	; 0x19
	_delay_us(15);
	nrf24l01_CElo; //low CE
     e0e:	a5 e2       	ldi	r26, 0x25	; 37
     e10:	b0 e0       	ldi	r27, 0x00	; 0
     e12:	e5 e2       	ldi	r30, 0x25	; 37
     e14:	f0 e0       	ldi	r31, 0x00	; 0
     e16:	80 81       	ld	r24, Z
     e18:	8e 7f       	andi	r24, 0xFE	; 254
     e1a:	8c 93       	st	X, r24
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	a0 e2       	ldi	r26, 0x20	; 32
     e22:	b1 e4       	ldi	r27, 0x41	; 65
     e24:	8d 8b       	std	Y+21, r24	; 0x15
     e26:	9e 8b       	std	Y+22, r25	; 0x16
     e28:	af 8b       	std	Y+23, r26	; 0x17
     e2a:	b8 8f       	std	Y+24, r27	; 0x18
 */
void
_delay_us(double __us)
{
	uint8_t __ticks;
	double __tmp = ((F_CPU) / 3e6) * __us;
     e2c:	6d 89       	ldd	r22, Y+21	; 0x15
     e2e:	7e 89       	ldd	r23, Y+22	; 0x16
     e30:	8f 89       	ldd	r24, Y+23	; 0x17
     e32:	98 8d       	ldd	r25, Y+24	; 0x18
     e34:	2b ea       	ldi	r18, 0xAB	; 171
     e36:	3a ea       	ldi	r19, 0xAA	; 170
     e38:	4a e2       	ldi	r20, 0x2A	; 42
     e3a:	50 e4       	ldi	r21, 0x40	; 64
     e3c:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     e40:	dc 01       	movw	r26, r24
     e42:	cb 01       	movw	r24, r22
     e44:	89 8b       	std	Y+17, r24	; 0x11
     e46:	9a 8b       	std	Y+18, r25	; 0x12
     e48:	ab 8b       	std	Y+19, r26	; 0x13
     e4a:	bc 8b       	std	Y+20, r27	; 0x14
	if (__tmp < 1.0)
     e4c:	69 89       	ldd	r22, Y+17	; 0x11
     e4e:	7a 89       	ldd	r23, Y+18	; 0x12
     e50:	8b 89       	ldd	r24, Y+19	; 0x13
     e52:	9c 89       	ldd	r25, Y+20	; 0x14
     e54:	20 e0       	ldi	r18, 0x00	; 0
     e56:	30 e0       	ldi	r19, 0x00	; 0
     e58:	40 e8       	ldi	r20, 0x80	; 128
     e5a:	5f e3       	ldi	r21, 0x3F	; 63
     e5c:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
     e60:	88 23       	and	r24, r24
     e62:	1c f4       	brge	.+6      	; 0xe6a <nrf24l01_write+0x24e>
		__ticks = 1;
     e64:	81 e0       	ldi	r24, 0x01	; 1
     e66:	88 8b       	std	Y+16, r24	; 0x10
     e68:	91 c0       	rjmp	.+290    	; 0xf8c <nrf24l01_write+0x370>
	else if (__tmp > 255)
     e6a:	69 89       	ldd	r22, Y+17	; 0x11
     e6c:	7a 89       	ldd	r23, Y+18	; 0x12
     e6e:	8b 89       	ldd	r24, Y+19	; 0x13
     e70:	9c 89       	ldd	r25, Y+20	; 0x14
     e72:	20 e0       	ldi	r18, 0x00	; 0
     e74:	30 e0       	ldi	r19, 0x00	; 0
     e76:	4f e7       	ldi	r20, 0x7F	; 127
     e78:	53 e4       	ldi	r21, 0x43	; 67
     e7a:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
     e7e:	18 16       	cp	r1, r24
     e80:	0c f0       	brlt	.+2      	; 0xe84 <nrf24l01_write+0x268>
     e82:	7b c0       	rjmp	.+246    	; 0xf7a <nrf24l01_write+0x35e>
	{
		_delay_ms(__us / 1000.0);
     e84:	6d 89       	ldd	r22, Y+21	; 0x15
     e86:	7e 89       	ldd	r23, Y+22	; 0x16
     e88:	8f 89       	ldd	r24, Y+23	; 0x17
     e8a:	98 8d       	ldd	r25, Y+24	; 0x18
     e8c:	20 e0       	ldi	r18, 0x00	; 0
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	4a e7       	ldi	r20, 0x7A	; 122
     e92:	54 e4       	ldi	r21, 0x44	; 68
     e94:	0e 94 7b 19 	call	0x32f6	; 0x32f6 <__divsf3>
     e98:	dc 01       	movw	r26, r24
     e9a:	cb 01       	movw	r24, r22
     e9c:	8c 87       	std	Y+12, r24	; 0x0c
     e9e:	9d 87       	std	Y+13, r25	; 0x0d
     ea0:	ae 87       	std	Y+14, r26	; 0x0e
     ea2:	bf 87       	std	Y+15, r27	; 0x0f
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
     ea4:	6c 85       	ldd	r22, Y+12	; 0x0c
     ea6:	7d 85       	ldd	r23, Y+13	; 0x0d
     ea8:	8e 85       	ldd	r24, Y+14	; 0x0e
     eaa:	9f 85       	ldd	r25, Y+15	; 0x0f
     eac:	20 e0       	ldi	r18, 0x00	; 0
     eae:	30 e0       	ldi	r19, 0x00	; 0
     eb0:	4a ef       	ldi	r20, 0xFA	; 250
     eb2:	54 e4       	ldi	r21, 0x44	; 68
     eb4:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     eb8:	dc 01       	movw	r26, r24
     eba:	cb 01       	movw	r24, r22
     ebc:	88 87       	std	Y+8, r24	; 0x08
     ebe:	99 87       	std	Y+9, r25	; 0x09
     ec0:	aa 87       	std	Y+10, r26	; 0x0a
     ec2:	bb 87       	std	Y+11, r27	; 0x0b
	if (__tmp < 1.0)
     ec4:	68 85       	ldd	r22, Y+8	; 0x08
     ec6:	79 85       	ldd	r23, Y+9	; 0x09
     ec8:	8a 85       	ldd	r24, Y+10	; 0x0a
     eca:	9b 85       	ldd	r25, Y+11	; 0x0b
     ecc:	20 e0       	ldi	r18, 0x00	; 0
     ece:	30 e0       	ldi	r19, 0x00	; 0
     ed0:	40 e8       	ldi	r20, 0x80	; 128
     ed2:	5f e3       	ldi	r21, 0x3F	; 63
     ed4:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
     ed8:	88 23       	and	r24, r24
     eda:	2c f4       	brge	.+10     	; 0xee6 <nrf24l01_write+0x2ca>
		__ticks = 1;
     edc:	81 e0       	ldi	r24, 0x01	; 1
     ede:	90 e0       	ldi	r25, 0x00	; 0
     ee0:	9f 83       	std	Y+7, r25	; 0x07
     ee2:	8e 83       	std	Y+6, r24	; 0x06
     ee4:	3f c0       	rjmp	.+126    	; 0xf64 <nrf24l01_write+0x348>
	else if (__tmp > 65535)
     ee6:	68 85       	ldd	r22, Y+8	; 0x08
     ee8:	79 85       	ldd	r23, Y+9	; 0x09
     eea:	8a 85       	ldd	r24, Y+10	; 0x0a
     eec:	9b 85       	ldd	r25, Y+11	; 0x0b
     eee:	20 e0       	ldi	r18, 0x00	; 0
     ef0:	3f ef       	ldi	r19, 0xFF	; 255
     ef2:	4f e7       	ldi	r20, 0x7F	; 127
     ef4:	57 e4       	ldi	r21, 0x47	; 71
     ef6:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
     efa:	18 16       	cp	r1, r24
     efc:	4c f5       	brge	.+82     	; 0xf50 <nrf24l01_write+0x334>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
     efe:	6c 85       	ldd	r22, Y+12	; 0x0c
     f00:	7d 85       	ldd	r23, Y+13	; 0x0d
     f02:	8e 85       	ldd	r24, Y+14	; 0x0e
     f04:	9f 85       	ldd	r25, Y+15	; 0x0f
     f06:	20 e0       	ldi	r18, 0x00	; 0
     f08:	30 e0       	ldi	r19, 0x00	; 0
     f0a:	40 e2       	ldi	r20, 0x20	; 32
     f0c:	51 e4       	ldi	r21, 0x41	; 65
     f0e:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
     f12:	dc 01       	movw	r26, r24
     f14:	cb 01       	movw	r24, r22
     f16:	bc 01       	movw	r22, r24
     f18:	cd 01       	movw	r24, r26
     f1a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     f1e:	dc 01       	movw	r26, r24
     f20:	cb 01       	movw	r24, r22
     f22:	9f 83       	std	Y+7, r25	; 0x07
     f24:	8e 83       	std	Y+6, r24	; 0x06
     f26:	0f c0       	rjmp	.+30     	; 0xf46 <nrf24l01_write+0x32a>
     f28:	88 ec       	ldi	r24, 0xC8	; 200
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	9d 83       	std	Y+5, r25	; 0x05
     f2e:	8c 83       	std	Y+4, r24	; 0x04
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
     f30:	8c 81       	ldd	r24, Y+4	; 0x04
     f32:	9d 81       	ldd	r25, Y+5	; 0x05
     f34:	01 97       	sbiw	r24, 0x01	; 1
     f36:	f1 f7       	brne	.-4      	; 0xf34 <nrf24l01_write+0x318>
     f38:	9d 83       	std	Y+5, r25	; 0x05
     f3a:	8c 83       	std	Y+4, r24	; 0x04
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
     f3c:	8e 81       	ldd	r24, Y+6	; 0x06
     f3e:	9f 81       	ldd	r25, Y+7	; 0x07
     f40:	01 97       	sbiw	r24, 0x01	; 1
     f42:	9f 83       	std	Y+7, r25	; 0x07
     f44:	8e 83       	std	Y+6, r24	; 0x06
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
     f46:	8e 81       	ldd	r24, Y+6	; 0x06
     f48:	9f 81       	ldd	r25, Y+7	; 0x07
     f4a:	00 97       	sbiw	r24, 0x00	; 0
     f4c:	69 f7       	brne	.-38     	; 0xf28 <nrf24l01_write+0x30c>
     f4e:	24 c0       	rjmp	.+72     	; 0xf98 <nrf24l01_write+0x37c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
     f50:	68 85       	ldd	r22, Y+8	; 0x08
     f52:	79 85       	ldd	r23, Y+9	; 0x09
     f54:	8a 85       	ldd	r24, Y+10	; 0x0a
     f56:	9b 85       	ldd	r25, Y+11	; 0x0b
     f58:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     f5c:	dc 01       	movw	r26, r24
     f5e:	cb 01       	movw	r24, r22
     f60:	9f 83       	std	Y+7, r25	; 0x07
     f62:	8e 83       	std	Y+6, r24	; 0x06
     f64:	8e 81       	ldd	r24, Y+6	; 0x06
     f66:	9f 81       	ldd	r25, Y+7	; 0x07
     f68:	9b 83       	std	Y+3, r25	; 0x03
     f6a:	8a 83       	std	Y+2, r24	; 0x02
     f6c:	8a 81       	ldd	r24, Y+2	; 0x02
     f6e:	9b 81       	ldd	r25, Y+3	; 0x03
     f70:	01 97       	sbiw	r24, 0x01	; 1
     f72:	f1 f7       	brne	.-4      	; 0xf70 <nrf24l01_write+0x354>
     f74:	9b 83       	std	Y+3, r25	; 0x03
     f76:	8a 83       	std	Y+2, r24	; 0x02
     f78:	0f c0       	rjmp	.+30     	; 0xf98 <nrf24l01_write+0x37c>
	{
		_delay_ms(__us / 1000.0);
		return;
	}
	else
		__ticks = (uint8_t)__tmp;
     f7a:	69 89       	ldd	r22, Y+17	; 0x11
     f7c:	7a 89       	ldd	r23, Y+18	; 0x12
     f7e:	8b 89       	ldd	r24, Y+19	; 0x13
     f80:	9c 89       	ldd	r25, Y+20	; 0x14
     f82:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
     f86:	dc 01       	movw	r26, r24
     f88:	cb 01       	movw	r24, r22
     f8a:	88 8b       	std	Y+16, r24	; 0x10
     f8c:	88 89       	ldd	r24, Y+16	; 0x10
     f8e:	89 83       	std	Y+1, r24	; 0x01
    can be achieved.
*/
void
_delay_loop_1(uint8_t __count)
{
	__asm__ volatile (
     f90:	89 81       	ldd	r24, Y+1	; 0x01
     f92:	8a 95       	dec	r24
     f94:	f1 f7       	brne	.-4      	; 0xf92 <nrf24l01_write+0x376>
     f96:	89 83       	std	Y+1, r24	; 0x01

	//stop if max_retries reached or send is ok
	do {
		_delay_us(10);
	}
	while( !(nrf24l01_getstatus() & (1<<NRF24L01_REG_MAX_RT | 1<<NRF24L01_REG_TX_DS)) );
     f98:	0e 94 85 05 	call	0xb0a	; 0xb0a <nrf24l01_getstatus>
     f9c:	88 2f       	mov	r24, r24
     f9e:	90 e0       	ldi	r25, 0x00	; 0
     fa0:	80 73       	andi	r24, 0x30	; 48
     fa2:	90 70       	andi	r25, 0x00	; 0
     fa4:	00 97       	sbiw	r24, 0x00	; 0
     fa6:	09 f4       	brne	.+2      	; 0xfaa <nrf24l01_write+0x38e>
     fa8:	39 cf       	rjmp	.-398    	; 0xe1c <nrf24l01_write+0x200>

	if(nrf24l01_getstatus() & 1<<NRF24L01_REG_TX_DS)
     faa:	0e 94 85 05 	call	0xb0a	; 0xb0a <nrf24l01_getstatus>
     fae:	88 2f       	mov	r24, r24
     fb0:	90 e0       	ldi	r25, 0x00	; 0
     fb2:	80 72       	andi	r24, 0x20	; 32
     fb4:	90 70       	andi	r25, 0x00	; 0
     fb6:	00 97       	sbiw	r24, 0x00	; 0
     fb8:	11 f0       	breq	.+4      	; 0xfbe <nrf24l01_write+0x3a2>
		ret = 1;
     fba:	81 e0       	ldi	r24, 0x01	; 1
     fbc:	89 ab       	std	Y+49, r24	; 0x31

	//reset PLOS_CNT
	nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH);
     fbe:	85 e0       	ldi	r24, 0x05	; 5
     fc0:	6c e4       	ldi	r22, 0x4C	; 76
     fc2:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>

	//power down
	nrf24l01_writeregister(NRF24L01_REG_CONFIG, nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~(1<<NRF24L01_REG_PWR_UP));
     fc6:	80 e0       	ldi	r24, 0x00	; 0
     fc8:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
     fcc:	98 2f       	mov	r25, r24
     fce:	9d 7f       	andi	r25, 0xFD	; 253
     fd0:	80 e0       	ldi	r24, 0x00	; 0
     fd2:	69 2f       	mov	r22, r25
     fd4:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>

	//set rx mode
	nrf24l01_setRX();
     fd8:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrf24l01_setRX>

	return ret;
     fdc:	89 a9       	ldd	r24, Y+49	; 0x31
}
     fde:	e4 96       	adiw	r28, 0x34	; 52
     fe0:	0f b6       	in	r0, 0x3f	; 63
     fe2:	f8 94       	cli
     fe4:	de bf       	out	0x3e, r29	; 62
     fe6:	0f be       	out	0x3f, r0	; 63
     fe8:	cd bf       	out	0x3d, r28	; 61
     fea:	cf 91       	pop	r28
     fec:	df 91       	pop	r29
     fee:	08 95       	ret

00000ff0 <nrf24l01_setpalevel>:

/*
 * set power level
 */
void nrf24l01_setpalevel() {
     ff0:	df 93       	push	r29
     ff2:	cf 93       	push	r28
     ff4:	0f 92       	push	r0
     ff6:	cd b7       	in	r28, 0x3d	; 61
     ff8:	de b7       	in	r29, 0x3e	; 62
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP);
     ffa:	86 e0       	ldi	r24, 0x06	; 6
     ffc:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    1000:	89 83       	std	Y+1, r24	; 0x01
  setup &= ~((1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH));
    1002:	89 81       	ldd	r24, Y+1	; 0x01
    1004:	89 7f       	andi	r24, 0xF9	; 249
    1006:	89 83       	std	Y+1, r24	; 0x01

  if (NRF24L01_RF24_PA == NRF24L01_RF24_PA_MAX) {
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
    1008:	89 81       	ldd	r24, Y+1	; 0x01
    100a:	86 60       	ori	r24, 0x06	; 6
    100c:	89 83       	std	Y+1, r24	; 0x01
  } else {
	  //default is max power
	  setup |= (1<<NRF24L01_REG_RF_PWR_LOW) | (1<<NRF24L01_REG_RF_PWR_HIGH);
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
    100e:	86 e0       	ldi	r24, 0x06	; 6
    1010:	69 81       	ldd	r22, Y+1	; 0x01
    1012:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
}
    1016:	0f 90       	pop	r0
    1018:	cf 91       	pop	r28
    101a:	df 91       	pop	r29
    101c:	08 95       	ret

0000101e <nrf24l01_setdatarate>:

/*
 * set datarate
 */
void nrf24l01_setdatarate() {
    101e:	df 93       	push	r29
    1020:	cf 93       	push	r28
    1022:	0f 92       	push	r0
    1024:	cd b7       	in	r28, 0x3d	; 61
    1026:	de b7       	in	r29, 0x3e	; 62
  uint8_t setup = nrf24l01_readregister(NRF24L01_REG_RF_SETUP) ;
    1028:	86 e0       	ldi	r24, 0x06	; 6
    102a:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    102e:	89 83       	std	Y+1, r24	; 0x01

  setup &= ~((1<<NRF24L01_REG_RF_DR_LOW) | (1<<NRF24L01_REG_RF_DR_HIGH));
    1030:	89 81       	ldd	r24, Y+1	; 0x01
    1032:	87 7d       	andi	r24, 0xD7	; 215
    1034:	89 83       	std	Y+1, r24	; 0x01
    } else {
    	//default is 1Mbps
    }
  }

  nrf24l01_writeregister(NRF24L01_REG_RF_SETUP, setup);
    1036:	86 e0       	ldi	r24, 0x06	; 6
    1038:	69 81       	ldd	r22, Y+1	; 0x01
    103a:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
}
    103e:	0f 90       	pop	r0
    1040:	cf 91       	pop	r28
    1042:	df 91       	pop	r29
    1044:	08 95       	ret

00001046 <nrf24l01_setcrclength>:

/*
 * set crc length
 */
void nrf24l01_setcrclength() {
    1046:	df 93       	push	r29
    1048:	cf 93       	push	r28
    104a:	0f 92       	push	r0
    104c:	cd b7       	in	r28, 0x3d	; 61
    104e:	de b7       	in	r29, 0x3e	; 62
  uint8_t config = nrf24l01_readregister(NRF24L01_REG_CONFIG) & ~((1<<NRF24L01_REG_CRCO) | (1<<NRF24L01_REG_EN_CRC));
    1050:	80 e0       	ldi	r24, 0x00	; 0
    1052:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    1056:	83 7f       	andi	r24, 0xF3	; 243
    1058:	89 83       	std	Y+1, r24	; 0x01
  if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_DISABLED) {
	  //nothing
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_8) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
  } else if (NRF24L01_RF24_CRC == NRF24L01_RF24_CRC_16) {
	  config |= (1<<NRF24L01_REG_EN_CRC);
    105a:	89 81       	ldd	r24, Y+1	; 0x01
    105c:	88 60       	ori	r24, 0x08	; 8
    105e:	89 83       	std	Y+1, r24	; 0x01
	  config |= (1<<NRF24L01_REG_CRCO);
    1060:	89 81       	ldd	r24, Y+1	; 0x01
    1062:	84 60       	ori	r24, 0x04	; 4
    1064:	89 83       	std	Y+1, r24	; 0x01
  } else {
	  //default is disabled
  }

  nrf24l01_writeregister(NRF24L01_REG_CONFIG, config);
    1066:	80 e0       	ldi	r24, 0x00	; 0
    1068:	69 81       	ldd	r22, Y+1	; 0x01
    106a:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
}
    106e:	0f 90       	pop	r0
    1070:	cf 91       	pop	r28
    1072:	df 91       	pop	r29
    1074:	08 95       	ret

00001076 <nrf24l01_init>:

/*
 * init nrf24l01
 */
void nrf24l01_init() {
    1076:	df 93       	push	r29
    1078:	cf 93       	push	r28
    107a:	cd b7       	in	r28, 0x3d	; 61
    107c:	de b7       	in	r29, 0x3e	; 62
    107e:	2e 97       	sbiw	r28, 0x0e	; 14
    1080:	0f b6       	in	r0, 0x3f	; 63
    1082:	f8 94       	cli
    1084:	de bf       	out	0x3e, r29	; 62
    1086:	0f be       	out	0x3f, r0	; 63
    1088:	cd bf       	out	0x3d, r28	; 61
	//setup port
	NRF24L01_DDR |= (1<<NRF24L01_CSN); //output
    108a:	a4 e2       	ldi	r26, 0x24	; 36
    108c:	b0 e0       	ldi	r27, 0x00	; 0
    108e:	e4 e2       	ldi	r30, 0x24	; 36
    1090:	f0 e0       	ldi	r31, 0x00	; 0
    1092:	80 81       	ld	r24, Z
    1094:	82 60       	ori	r24, 0x02	; 2
    1096:	8c 93       	st	X, r24
	NRF24L01_DDR |= (1<<NRF24L01_CE); //output
    1098:	a4 e2       	ldi	r26, 0x24	; 36
    109a:	b0 e0       	ldi	r27, 0x00	; 0
    109c:	e4 e2       	ldi	r30, 0x24	; 36
    109e:	f0 e0       	ldi	r31, 0x00	; 0
    10a0:	80 81       	ld	r24, Z
    10a2:	81 60       	ori	r24, 0x01	; 1
    10a4:	8c 93       	st	X, r24

    spi_init(); //init spi
    10a6:	0e 94 a2 09 	call	0x1344	; 0x1344 <spi_init>

    nrf24l01_CElo; //low CE
    10aa:	a5 e2       	ldi	r26, 0x25	; 37
    10ac:	b0 e0       	ldi	r27, 0x00	; 0
    10ae:	e5 e2       	ldi	r30, 0x25	; 37
    10b0:	f0 e0       	ldi	r31, 0x00	; 0
    10b2:	80 81       	ld	r24, Z
    10b4:	8e 7f       	andi	r24, 0xFE	; 254
    10b6:	8c 93       	st	X, r24
    nrf24l01_CSNhi; //high CSN
    10b8:	a5 e2       	ldi	r26, 0x25	; 37
    10ba:	b0 e0       	ldi	r27, 0x00	; 0
    10bc:	e5 e2       	ldi	r30, 0x25	; 37
    10be:	f0 e0       	ldi	r31, 0x00	; 0
    10c0:	80 81       	ld	r24, Z
    10c2:	82 60       	ori	r24, 0x02	; 2
    10c4:	8c 93       	st	X, r24
    10c6:	80 e0       	ldi	r24, 0x00	; 0
    10c8:	90 e0       	ldi	r25, 0x00	; 0
    10ca:	a0 ea       	ldi	r26, 0xA0	; 160
    10cc:	b0 e4       	ldi	r27, 0x40	; 64
    10ce:	8b 87       	std	Y+11, r24	; 0x0b
    10d0:	9c 87       	std	Y+12, r25	; 0x0c
    10d2:	ad 87       	std	Y+13, r26	; 0x0d
    10d4:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    10d6:	6b 85       	ldd	r22, Y+11	; 0x0b
    10d8:	7c 85       	ldd	r23, Y+12	; 0x0c
    10da:	8d 85       	ldd	r24, Y+13	; 0x0d
    10dc:	9e 85       	ldd	r25, Y+14	; 0x0e
    10de:	20 e0       	ldi	r18, 0x00	; 0
    10e0:	30 e0       	ldi	r19, 0x00	; 0
    10e2:	4a ef       	ldi	r20, 0xFA	; 250
    10e4:	54 e4       	ldi	r21, 0x44	; 68
    10e6:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    10ea:	dc 01       	movw	r26, r24
    10ec:	cb 01       	movw	r24, r22
    10ee:	8f 83       	std	Y+7, r24	; 0x07
    10f0:	98 87       	std	Y+8, r25	; 0x08
    10f2:	a9 87       	std	Y+9, r26	; 0x09
    10f4:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    10f6:	6f 81       	ldd	r22, Y+7	; 0x07
    10f8:	78 85       	ldd	r23, Y+8	; 0x08
    10fa:	89 85       	ldd	r24, Y+9	; 0x09
    10fc:	9a 85       	ldd	r25, Y+10	; 0x0a
    10fe:	20 e0       	ldi	r18, 0x00	; 0
    1100:	30 e0       	ldi	r19, 0x00	; 0
    1102:	40 e8       	ldi	r20, 0x80	; 128
    1104:	5f e3       	ldi	r21, 0x3F	; 63
    1106:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    110a:	88 23       	and	r24, r24
    110c:	2c f4       	brge	.+10     	; 0x1118 <nrf24l01_init+0xa2>
		__ticks = 1;
    110e:	81 e0       	ldi	r24, 0x01	; 1
    1110:	90 e0       	ldi	r25, 0x00	; 0
    1112:	9e 83       	std	Y+6, r25	; 0x06
    1114:	8d 83       	std	Y+5, r24	; 0x05
    1116:	3f c0       	rjmp	.+126    	; 0x1196 <nrf24l01_init+0x120>
	else if (__tmp > 65535)
    1118:	6f 81       	ldd	r22, Y+7	; 0x07
    111a:	78 85       	ldd	r23, Y+8	; 0x08
    111c:	89 85       	ldd	r24, Y+9	; 0x09
    111e:	9a 85       	ldd	r25, Y+10	; 0x0a
    1120:	20 e0       	ldi	r18, 0x00	; 0
    1122:	3f ef       	ldi	r19, 0xFF	; 255
    1124:	4f e7       	ldi	r20, 0x7F	; 127
    1126:	57 e4       	ldi	r21, 0x47	; 71
    1128:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    112c:	18 16       	cp	r1, r24
    112e:	4c f5       	brge	.+82     	; 0x1182 <nrf24l01_init+0x10c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1130:	6b 85       	ldd	r22, Y+11	; 0x0b
    1132:	7c 85       	ldd	r23, Y+12	; 0x0c
    1134:	8d 85       	ldd	r24, Y+13	; 0x0d
    1136:	9e 85       	ldd	r25, Y+14	; 0x0e
    1138:	20 e0       	ldi	r18, 0x00	; 0
    113a:	30 e0       	ldi	r19, 0x00	; 0
    113c:	40 e2       	ldi	r20, 0x20	; 32
    113e:	51 e4       	ldi	r21, 0x41	; 65
    1140:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1144:	dc 01       	movw	r26, r24
    1146:	cb 01       	movw	r24, r22
    1148:	bc 01       	movw	r22, r24
    114a:	cd 01       	movw	r24, r26
    114c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1150:	dc 01       	movw	r26, r24
    1152:	cb 01       	movw	r24, r22
    1154:	9e 83       	std	Y+6, r25	; 0x06
    1156:	8d 83       	std	Y+5, r24	; 0x05
    1158:	0f c0       	rjmp	.+30     	; 0x1178 <nrf24l01_init+0x102>
    115a:	88 ec       	ldi	r24, 0xC8	; 200
    115c:	90 e0       	ldi	r25, 0x00	; 0
    115e:	9c 83       	std	Y+4, r25	; 0x04
    1160:	8b 83       	std	Y+3, r24	; 0x03
    milliseconds can be achieved.
 */
void
_delay_loop_2(uint16_t __count)
{
	__asm__ volatile (
    1162:	8b 81       	ldd	r24, Y+3	; 0x03
    1164:	9c 81       	ldd	r25, Y+4	; 0x04
    1166:	01 97       	sbiw	r24, 0x01	; 1
    1168:	f1 f7       	brne	.-4      	; 0x1166 <nrf24l01_init+0xf0>
    116a:	9c 83       	std	Y+4, r25	; 0x04
    116c:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    116e:	8d 81       	ldd	r24, Y+5	; 0x05
    1170:	9e 81       	ldd	r25, Y+6	; 0x06
    1172:	01 97       	sbiw	r24, 0x01	; 1
    1174:	9e 83       	std	Y+6, r25	; 0x06
    1176:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1178:	8d 81       	ldd	r24, Y+5	; 0x05
    117a:	9e 81       	ldd	r25, Y+6	; 0x06
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	69 f7       	brne	.-38     	; 0x115a <nrf24l01_init+0xe4>
    1180:	14 c0       	rjmp	.+40     	; 0x11aa <nrf24l01_init+0x134>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1182:	6f 81       	ldd	r22, Y+7	; 0x07
    1184:	78 85       	ldd	r23, Y+8	; 0x08
    1186:	89 85       	ldd	r24, Y+9	; 0x09
    1188:	9a 85       	ldd	r25, Y+10	; 0x0a
    118a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    118e:	dc 01       	movw	r26, r24
    1190:	cb 01       	movw	r24, r22
    1192:	9e 83       	std	Y+6, r25	; 0x06
    1194:	8d 83       	std	Y+5, r24	; 0x05
    1196:	8d 81       	ldd	r24, Y+5	; 0x05
    1198:	9e 81       	ldd	r25, Y+6	; 0x06
    119a:	9a 83       	std	Y+2, r25	; 0x02
    119c:	89 83       	std	Y+1, r24	; 0x01
    119e:	89 81       	ldd	r24, Y+1	; 0x01
    11a0:	9a 81       	ldd	r25, Y+2	; 0x02
    11a2:	01 97       	sbiw	r24, 0x01	; 1
    11a4:	f1 f7       	brne	.-4      	; 0x11a2 <nrf24l01_init+0x12c>
    11a6:	9a 83       	std	Y+2, r25	; 0x02
    11a8:	89 83       	std	Y+1, r24	; 0x01

    _delay_ms(5); //wait for the radio to init

    nrf24l01_setpalevel(); //set power level
    11aa:	0e 94 f8 07 	call	0xff0	; 0xff0 <nrf24l01_setpalevel>
    nrf24l01_setdatarate(); //set data rate
    11ae:	0e 94 0f 08 	call	0x101e	; 0x101e <nrf24l01_setdatarate>
    nrf24l01_setcrclength(); //set crc length
    11b2:	0e 94 23 08 	call	0x1046	; 0x1046 <nrf24l01_setcrclength>
    nrf24l01_writeregister(NRF24L01_REG_SETUP_RETR, NRF24L01_RETR); // set retries
    11b6:	84 e0       	ldi	r24, 0x04	; 4
    11b8:	67 e4       	ldi	r22, 0x47	; 71
    11ba:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_DYNPD, 0); //disable dynamic payloads
    11be:	8c e1       	ldi	r24, 0x1C	; 28
    11c0:	60 e0       	ldi	r22, 0x00	; 0
    11c2:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
    nrf24l01_writeregister(NRF24L01_REG_RF_CH, NRF24L01_CH); //set RF channel
    11c6:	85 e0       	ldi	r24, 0x05	; 5
    11c8:	6c e4       	ldi	r22, 0x4C	; 76
    11ca:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>

	//payload size
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P0, NRF24L01_PAYLOAD);
    11ce:	81 e1       	ldi	r24, 0x11	; 17
    11d0:	60 e1       	ldi	r22, 0x10	; 16
    11d2:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P1, NRF24L01_PAYLOAD);
    11d6:	82 e1       	ldi	r24, 0x12	; 18
    11d8:	60 e1       	ldi	r22, 0x10	; 16
    11da:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P2, NRF24L01_PAYLOAD);
    11de:	83 e1       	ldi	r24, 0x13	; 19
    11e0:	60 e1       	ldi	r22, 0x10	; 16
    11e2:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P3, NRF24L01_PAYLOAD);
    11e6:	84 e1       	ldi	r24, 0x14	; 20
    11e8:	60 e1       	ldi	r22, 0x10	; 16
    11ea:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P4, NRF24L01_PAYLOAD);
    11ee:	85 e1       	ldi	r24, 0x15	; 21
    11f0:	60 e1       	ldi	r22, 0x10	; 16
    11f2:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_RX_PW_P5, NRF24L01_PAYLOAD);
    11f6:	86 e1       	ldi	r24, 0x16	; 22
    11f8:	60 e1       	ldi	r22, 0x10	; 16
    11fa:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif

	//enable pipe
	nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, 0);
    11fe:	82 e0       	ldi	r24, 0x02	; 2
    1200:	60 e0       	ldi	r22, 0x00	; 0
    1202:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#if NRF24L01_ENABLEDP0 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P0));
    1206:	82 e0       	ldi	r24, 0x02	; 2
    1208:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    120c:	98 2f       	mov	r25, r24
    120e:	91 60       	ori	r25, 0x01	; 1
    1210:	82 e0       	ldi	r24, 0x02	; 2
    1212:	69 2f       	mov	r22, r25
    1214:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP1 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P1));
    1218:	82 e0       	ldi	r24, 0x02	; 2
    121a:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    121e:	98 2f       	mov	r25, r24
    1220:	92 60       	ori	r25, 0x02	; 2
    1222:	82 e0       	ldi	r24, 0x02	; 2
    1224:	69 2f       	mov	r22, r25
    1226:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP2 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P2));
    122a:	82 e0       	ldi	r24, 0x02	; 2
    122c:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    1230:	98 2f       	mov	r25, r24
    1232:	94 60       	ori	r25, 0x04	; 4
    1234:	82 e0       	ldi	r24, 0x02	; 2
    1236:	69 2f       	mov	r22, r25
    1238:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP3 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P3));
    123c:	82 e0       	ldi	r24, 0x02	; 2
    123e:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    1242:	98 2f       	mov	r25, r24
    1244:	98 60       	ori	r25, 0x08	; 8
    1246:	82 e0       	ldi	r24, 0x02	; 2
    1248:	69 2f       	mov	r22, r25
    124a:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP4 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P4));
    124e:	82 e0       	ldi	r24, 0x02	; 2
    1250:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    1254:	98 2f       	mov	r25, r24
    1256:	90 61       	ori	r25, 0x10	; 16
    1258:	82 e0       	ldi	r24, 0x02	; 2
    125a:	69 2f       	mov	r22, r25
    125c:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif
	#if NRF24L01_ENABLEDP5 == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_RXADDR, nrf24l01_readregister(NRF24L01_REG_EN_RXADDR) | (1<<NRF24L01_REG_ERX_P5));
    1260:	82 e0       	ldi	r24, 0x02	; 2
    1262:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    1266:	98 2f       	mov	r25, r24
    1268:	90 62       	ori	r25, 0x20	; 32
    126a:	82 e0       	ldi	r24, 0x02	; 2
    126c:	69 2f       	mov	r22, r25
    126e:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
	#endif

	//auto ack
	#if NRF24L01_ACK == 1
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P0));
    1272:	81 e0       	ldi	r24, 0x01	; 1
    1274:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    1278:	98 2f       	mov	r25, r24
    127a:	91 60       	ori	r25, 0x01	; 1
    127c:	81 e0       	ldi	r24, 0x01	; 1
    127e:	69 2f       	mov	r22, r25
    1280:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P1));
    1284:	81 e0       	ldi	r24, 0x01	; 1
    1286:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    128a:	98 2f       	mov	r25, r24
    128c:	92 60       	ori	r25, 0x02	; 2
    128e:	81 e0       	ldi	r24, 0x01	; 1
    1290:	69 2f       	mov	r22, r25
    1292:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P2));
    1296:	81 e0       	ldi	r24, 0x01	; 1
    1298:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    129c:	98 2f       	mov	r25, r24
    129e:	94 60       	ori	r25, 0x04	; 4
    12a0:	81 e0       	ldi	r24, 0x01	; 1
    12a2:	69 2f       	mov	r22, r25
    12a4:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P3));
    12a8:	81 e0       	ldi	r24, 0x01	; 1
    12aa:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    12ae:	98 2f       	mov	r25, r24
    12b0:	98 60       	ori	r25, 0x08	; 8
    12b2:	81 e0       	ldi	r24, 0x01	; 1
    12b4:	69 2f       	mov	r22, r25
    12b6:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P4));
    12ba:	81 e0       	ldi	r24, 0x01	; 1
    12bc:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    12c0:	98 2f       	mov	r25, r24
    12c2:	90 61       	ori	r25, 0x10	; 16
    12c4:	81 e0       	ldi	r24, 0x01	; 1
    12c6:	69 2f       	mov	r22, r25
    12c8:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) | (1<<NRF24L01_REG_ENAA_P5));
    12cc:	81 e0       	ldi	r24, 0x01	; 1
    12ce:	0e 94 53 00 	call	0xa6	; 0xa6 <nrf24l01_readregister>
    12d2:	98 2f       	mov	r25, r24
    12d4:	90 62       	ori	r25, 0x20	; 32
    12d6:	81 e0       	ldi	r24, 0x01	; 1
    12d8:	69 2f       	mov	r22, r25
    12da:	0e 94 b5 00 	call	0x16a	; 0x16a <nrf24l01_writeregister>
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P4));
		nrf24l01_writeregister(NRF24L01_REG_EN_AA, nrf24l01_readregister(NRF24L01_REG_EN_AA) & ~(1<<NRF24L01_REG_ENAA_P5));
	#endif

	//rx address
	nrf24l01_setrxaddr(0, nrf24l01_addr0);
    12de:	20 e0       	ldi	r18, 0x00	; 0
    12e0:	31 e0       	ldi	r19, 0x01	; 1
    12e2:	80 e0       	ldi	r24, 0x00	; 0
    12e4:	b9 01       	movw	r22, r18
    12e6:	0e 94 48 01 	call	0x290	; 0x290 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(1, nrf24l01_addr1);
    12ea:	25 e0       	ldi	r18, 0x05	; 5
    12ec:	31 e0       	ldi	r19, 0x01	; 1
    12ee:	81 e0       	ldi	r24, 0x01	; 1
    12f0:	b9 01       	movw	r22, r18
    12f2:	0e 94 48 01 	call	0x290	; 0x290 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(2, nrf24l01_addr2);
    12f6:	2a e0       	ldi	r18, 0x0A	; 10
    12f8:	31 e0       	ldi	r19, 0x01	; 1
    12fa:	82 e0       	ldi	r24, 0x02	; 2
    12fc:	b9 01       	movw	r22, r18
    12fe:	0e 94 48 01 	call	0x290	; 0x290 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(3, nrf24l01_addr3);
    1302:	2f e0       	ldi	r18, 0x0F	; 15
    1304:	31 e0       	ldi	r19, 0x01	; 1
    1306:	83 e0       	ldi	r24, 0x03	; 3
    1308:	b9 01       	movw	r22, r18
    130a:	0e 94 48 01 	call	0x290	; 0x290 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(4, nrf24l01_addr4);
    130e:	24 e1       	ldi	r18, 0x14	; 20
    1310:	31 e0       	ldi	r19, 0x01	; 1
    1312:	84 e0       	ldi	r24, 0x04	; 4
    1314:	b9 01       	movw	r22, r18
    1316:	0e 94 48 01 	call	0x290	; 0x290 <nrf24l01_setrxaddr>
	nrf24l01_setrxaddr(5, nrf24l01_addr5);
    131a:	29 e1       	ldi	r18, 0x19	; 25
    131c:	31 e0       	ldi	r19, 0x01	; 1
    131e:	85 e0       	ldi	r24, 0x05	; 5
    1320:	b9 01       	movw	r22, r18
    1322:	0e 94 48 01 	call	0x290	; 0x290 <nrf24l01_setrxaddr>

	//tx address
	nrf24l01_settxaddr(nrf24l01_addrtx);
    1326:	8e e1       	ldi	r24, 0x1E	; 30
    1328:	91 e0       	ldi	r25, 0x01	; 1
    132a:	0e 94 ef 01 	call	0x3de	; 0x3de <nrf24l01_settxaddr>

	//set rx mode
	nrf24l01_setRX();
    132e:	0e 94 55 02 	call	0x4aa	; 0x4aa <nrf24l01_setRX>
}
    1332:	2e 96       	adiw	r28, 0x0e	; 14
    1334:	0f b6       	in	r0, 0x3f	; 63
    1336:	f8 94       	cli
    1338:	de bf       	out	0x3e, r29	; 62
    133a:	0f be       	out	0x3f, r0	; 63
    133c:	cd bf       	out	0x3d, r28	; 61
    133e:	cf 91       	pop	r28
    1340:	df 91       	pop	r29
    1342:	08 95       	ret

00001344 <spi_init>:


/*
 * spi initialize
 */
void spi_init() {
    1344:	df 93       	push	r29
    1346:	cf 93       	push	r28
    1348:	cd b7       	in	r28, 0x3d	; 61
    134a:	de b7       	in	r29, 0x3e	; 62
    SPI_DDR &= ~((1<<SPI_MOSI) | (1<<SPI_MISO) | (1<<SPI_SS) | (1<<SPI_SCK)); //input
    134c:	a4 e2       	ldi	r26, 0x24	; 36
    134e:	b0 e0       	ldi	r27, 0x00	; 0
    1350:	e4 e2       	ldi	r30, 0x24	; 36
    1352:	f0 e0       	ldi	r31, 0x00	; 0
    1354:	80 81       	ld	r24, Z
    1356:	83 7c       	andi	r24, 0xC3	; 195
    1358:	8c 93       	st	X, r24
    SPI_DDR |= ((1<<SPI_MOSI) | (1<<SPI_SS) | (1<<SPI_SCK)); //output
    135a:	a4 e2       	ldi	r26, 0x24	; 36
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	e4 e2       	ldi	r30, 0x24	; 36
    1360:	f0 e0       	ldi	r31, 0x00	; 0
    1362:	80 81       	ld	r24, Z
    1364:	8c 62       	ori	r24, 0x2C	; 44
    1366:	8c 93       	st	X, r24

    SPCR = ((1<<SPE)|               // SPI Enable
    1368:	ec e4       	ldi	r30, 0x4C	; 76
    136a:	f0 e0       	ldi	r31, 0x00	; 0
    136c:	81 e5       	ldi	r24, 0x51	; 81
    136e:	80 83       	st	Z, r24
            (1<<MSTR)|              // Master/Slave select
            (0<<SPR1)|(1<<SPR0)|    // SPI Clock Rate
            (0<<CPOL)|              // Clock Polarity (0:SCK low / 1:SCK hi when idle)
            (0<<CPHA));             // Clock Phase (0:leading / 1:trailing edge sampling)

    SPSR = (1<<SPI2X); // Double SPI Speed Bit
    1370:	ed e4       	ldi	r30, 0x4D	; 77
    1372:	f0 e0       	ldi	r31, 0x00	; 0
    1374:	81 e0       	ldi	r24, 0x01	; 1
    1376:	80 83       	st	Z, r24
}
    1378:	cf 91       	pop	r28
    137a:	df 91       	pop	r29
    137c:	08 95       	ret

0000137e <spi_writereadbyte>:

/*
 * spi write one byte and read it back
 */
uint8_t spi_writereadbyte(uint8_t data) {
    137e:	df 93       	push	r29
    1380:	cf 93       	push	r28
    1382:	0f 92       	push	r0
    1384:	cd b7       	in	r28, 0x3d	; 61
    1386:	de b7       	in	r29, 0x3e	; 62
    1388:	89 83       	std	Y+1, r24	; 0x01
    SPDR = data;
    138a:	ee e4       	ldi	r30, 0x4E	; 78
    138c:	f0 e0       	ldi	r31, 0x00	; 0
    138e:	89 81       	ldd	r24, Y+1	; 0x01
    1390:	80 83       	st	Z, r24
    while((SPSR & (1<<SPIF)) == 0);
    1392:	ed e4       	ldi	r30, 0x4D	; 77
    1394:	f0 e0       	ldi	r31, 0x00	; 0
    1396:	80 81       	ld	r24, Z
    1398:	88 23       	and	r24, r24
    139a:	dc f7       	brge	.-10     	; 0x1392 <spi_writereadbyte+0x14>
    return SPDR;
    139c:	ee e4       	ldi	r30, 0x4E	; 78
    139e:	f0 e0       	ldi	r31, 0x00	; 0
    13a0:	80 81       	ld	r24, Z
}
    13a2:	0f 90       	pop	r0
    13a4:	cf 91       	pop	r28
    13a6:	df 91       	pop	r29
    13a8:	08 95       	ret

000013aa <SIG_USART_RECV>:
SIGNAL(UART0_RECEIVE_INTERRUPT)
/*************************************************************************
Function: UART Receive Complete interrupt
Purpose:  called when the UART has received a character
**************************************************************************/
{
    13aa:	1f 92       	push	r1
    13ac:	0f 92       	push	r0
    13ae:	0f b6       	in	r0, 0x3f	; 63
    13b0:	0f 92       	push	r0
    13b2:	11 24       	eor	r1, r1
    13b4:	8f 93       	push	r24
    13b6:	9f 93       	push	r25
    13b8:	ef 93       	push	r30
    13ba:	ff 93       	push	r31
    13bc:	df 93       	push	r29
    13be:	cf 93       	push	r28
    13c0:	00 d0       	rcall	.+0      	; 0x13c2 <SIG_USART_RECV+0x18>
    13c2:	00 d0       	rcall	.+0      	; 0x13c4 <SIG_USART_RECV+0x1a>
    13c4:	cd b7       	in	r28, 0x3d	; 61
    13c6:	de b7       	in	r29, 0x3e	; 62
    unsigned char usr;
    unsigned char lastRxError;
 
 
    /* read UART status register and UART data register */ 
    usr  = UART0_STATUS;
    13c8:	e0 ec       	ldi	r30, 0xC0	; 192
    13ca:	f0 e0       	ldi	r31, 0x00	; 0
    13cc:	80 81       	ld	r24, Z
    13ce:	8a 83       	std	Y+2, r24	; 0x02
    data = UART0_DATA;
    13d0:	e6 ec       	ldi	r30, 0xC6	; 198
    13d2:	f0 e0       	ldi	r31, 0x00	; 0
    13d4:	80 81       	ld	r24, Z
    13d6:	8b 83       	std	Y+3, r24	; 0x03
#if defined( AT90_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#elif defined( ATMEGA_USART0 )
    lastRxError = (usr & (_BV(FE0)|_BV(DOR0)) );
    13d8:	8a 81       	ldd	r24, Y+2	; 0x02
    13da:	88 71       	andi	r24, 0x18	; 24
    13dc:	89 83       	std	Y+1, r24	; 0x01
#elif defined ( ATMEGA_UART )
    lastRxError = (usr & (_BV(FE)|_BV(DOR)) );
#endif
        
    /* calculate buffer index */ 
    tmphead = ( UART_RxHead + 1) & UART_RX_BUFFER_MASK;
    13de:	80 91 98 02 	lds	r24, 0x0298
    13e2:	8f 5f       	subi	r24, 0xFF	; 255
    13e4:	8f 71       	andi	r24, 0x1F	; 31
    13e6:	8c 83       	std	Y+4, r24	; 0x04
    
    if ( tmphead == UART_RxTail ) {
    13e8:	90 91 99 02 	lds	r25, 0x0299
    13ec:	8c 81       	ldd	r24, Y+4	; 0x04
    13ee:	89 17       	cp	r24, r25
    13f0:	19 f4       	brne	.+6      	; 0x13f8 <SIG_USART_RECV+0x4e>
        /* error: receive buffer overflow */
        lastRxError = UART_BUFFER_OVERFLOW >> 8;
    13f2:	82 e0       	ldi	r24, 0x02	; 2
    13f4:	89 83       	std	Y+1, r24	; 0x01
    13f6:	0b c0       	rjmp	.+22     	; 0x140e <SIG_USART_RECV+0x64>
    }else{
        /* store new index */
        UART_RxHead = tmphead;
    13f8:	8c 81       	ldd	r24, Y+4	; 0x04
    13fa:	80 93 98 02 	sts	0x0298, r24
        /* store received data in buffer */
        UART_RxBuf[tmphead] = data;
    13fe:	8c 81       	ldd	r24, Y+4	; 0x04
    1400:	88 2f       	mov	r24, r24
    1402:	90 e0       	ldi	r25, 0x00	; 0
    1404:	fc 01       	movw	r30, r24
    1406:	ea 58       	subi	r30, 0x8A	; 138
    1408:	fd 4f       	sbci	r31, 0xFD	; 253
    140a:	8b 81       	ldd	r24, Y+3	; 0x03
    140c:	80 83       	st	Z, r24
    }
    UART_LastRxError = lastRxError;   
    140e:	89 81       	ldd	r24, Y+1	; 0x01
    1410:	80 93 9a 02 	sts	0x029A, r24
}
    1414:	0f 90       	pop	r0
    1416:	0f 90       	pop	r0
    1418:	0f 90       	pop	r0
    141a:	0f 90       	pop	r0
    141c:	cf 91       	pop	r28
    141e:	df 91       	pop	r29
    1420:	ff 91       	pop	r31
    1422:	ef 91       	pop	r30
    1424:	9f 91       	pop	r25
    1426:	8f 91       	pop	r24
    1428:	0f 90       	pop	r0
    142a:	0f be       	out	0x3f, r0	; 63
    142c:	0f 90       	pop	r0
    142e:	1f 90       	pop	r1
    1430:	18 95       	reti

00001432 <SIG_USART_DATA>:
SIGNAL(UART0_TRANSMIT_INTERRUPT)
/*************************************************************************
Function: UART Data Register Empty interrupt
Purpose:  called when the UART is ready to transmit the next byte
**************************************************************************/
{
    1432:	1f 92       	push	r1
    1434:	0f 92       	push	r0
    1436:	0f b6       	in	r0, 0x3f	; 63
    1438:	0f 92       	push	r0
    143a:	11 24       	eor	r1, r1
    143c:	8f 93       	push	r24
    143e:	9f 93       	push	r25
    1440:	af 93       	push	r26
    1442:	bf 93       	push	r27
    1444:	ef 93       	push	r30
    1446:	ff 93       	push	r31
    1448:	df 93       	push	r29
    144a:	cf 93       	push	r28
    144c:	0f 92       	push	r0
    144e:	cd b7       	in	r28, 0x3d	; 61
    1450:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;

    
    if ( UART_TxHead != UART_TxTail) {
    1452:	90 91 96 02 	lds	r25, 0x0296
    1456:	80 91 97 02 	lds	r24, 0x0297
    145a:	98 17       	cp	r25, r24
    145c:	99 f0       	breq	.+38     	; 0x1484 <SIG_USART_DATA+0x52>
        /* calculate and store new buffer index */
        tmptail = (UART_TxTail + 1) & UART_TX_BUFFER_MASK;
    145e:	80 91 97 02 	lds	r24, 0x0297
    1462:	8f 5f       	subi	r24, 0xFF	; 255
    1464:	8f 71       	andi	r24, 0x1F	; 31
    1466:	89 83       	std	Y+1, r24	; 0x01
        UART_TxTail = tmptail;
    1468:	89 81       	ldd	r24, Y+1	; 0x01
    146a:	80 93 97 02 	sts	0x0297, r24
        /* get one byte from buffer and write it to UART */
        UART0_DATA = UART_TxBuf[tmptail];  /* start transmission */
    146e:	a6 ec       	ldi	r26, 0xC6	; 198
    1470:	b0 e0       	ldi	r27, 0x00	; 0
    1472:	89 81       	ldd	r24, Y+1	; 0x01
    1474:	88 2f       	mov	r24, r24
    1476:	90 e0       	ldi	r25, 0x00	; 0
    1478:	fc 01       	movw	r30, r24
    147a:	ea 5a       	subi	r30, 0xAA	; 170
    147c:	fd 4f       	sbci	r31, 0xFD	; 253
    147e:	80 81       	ld	r24, Z
    1480:	8c 93       	st	X, r24
    1482:	07 c0       	rjmp	.+14     	; 0x1492 <SIG_USART_DATA+0x60>
    }else{
        /* tx buffer empty, disable UDRE interrupt */
        UART0_CONTROL &= ~_BV(UART0_UDRIE);
    1484:	a1 ec       	ldi	r26, 0xC1	; 193
    1486:	b0 e0       	ldi	r27, 0x00	; 0
    1488:	e1 ec       	ldi	r30, 0xC1	; 193
    148a:	f0 e0       	ldi	r31, 0x00	; 0
    148c:	80 81       	ld	r24, Z
    148e:	8f 7d       	andi	r24, 0xDF	; 223
    1490:	8c 93       	st	X, r24
    }
}
    1492:	0f 90       	pop	r0
    1494:	cf 91       	pop	r28
    1496:	df 91       	pop	r29
    1498:	ff 91       	pop	r31
    149a:	ef 91       	pop	r30
    149c:	bf 91       	pop	r27
    149e:	af 91       	pop	r26
    14a0:	9f 91       	pop	r25
    14a2:	8f 91       	pop	r24
    14a4:	0f 90       	pop	r0
    14a6:	0f be       	out	0x3f, r0	; 63
    14a8:	0f 90       	pop	r0
    14aa:	1f 90       	pop	r1
    14ac:	18 95       	reti

000014ae <uart_init>:
Purpose:  initialize UART and set baudrate
Input:    baudrate using macro UART_BAUD_SELECT()
Returns:  none
**************************************************************************/
void uart_init(unsigned int baudrate)
{
    14ae:	df 93       	push	r29
    14b0:	cf 93       	push	r28
    14b2:	00 d0       	rcall	.+0      	; 0x14b4 <uart_init+0x6>
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	9a 83       	std	Y+2, r25	; 0x02
    14ba:	89 83       	std	Y+1, r24	; 0x01
    UART_TxHead = 0;
    14bc:	10 92 96 02 	sts	0x0296, r1
    UART_TxTail = 0;
    14c0:	10 92 97 02 	sts	0x0297, r1
    UART_RxHead = 0;
    14c4:	10 92 98 02 	sts	0x0298, r1
    UART_RxTail = 0;
    14c8:	10 92 99 02 	sts	0x0299, r1
    UCSRC = (3<<UCSZ0);
    #endif 
    
#elif defined (ATMEGA_USART0 )
    /* Set baud rate */
    if ( baudrate & 0x8000 ) 
    14cc:	89 81       	ldd	r24, Y+1	; 0x01
    14ce:	9a 81       	ldd	r25, Y+2	; 0x02
    14d0:	99 23       	and	r25, r25
    14d2:	4c f4       	brge	.+18     	; 0x14e6 <uart_init+0x38>
    {
   		UART0_STATUS = (1<<U2X0);  //Enable 2x speed 
    14d4:	e0 ec       	ldi	r30, 0xC0	; 192
    14d6:	f0 e0       	ldi	r31, 0x00	; 0
    14d8:	82 e0       	ldi	r24, 0x02	; 2
    14da:	80 83       	st	Z, r24
   		baudrate &= ~0x8000;
    14dc:	89 81       	ldd	r24, Y+1	; 0x01
    14de:	9a 81       	ldd	r25, Y+2	; 0x02
    14e0:	9f 77       	andi	r25, 0x7F	; 127
    14e2:	9a 83       	std	Y+2, r25	; 0x02
    14e4:	89 83       	std	Y+1, r24	; 0x01
   	}
    UBRR0H = (unsigned char)(baudrate>>8);
    14e6:	e5 ec       	ldi	r30, 0xC5	; 197
    14e8:	f0 e0       	ldi	r31, 0x00	; 0
    14ea:	89 81       	ldd	r24, Y+1	; 0x01
    14ec:	9a 81       	ldd	r25, Y+2	; 0x02
    14ee:	89 2f       	mov	r24, r25
    14f0:	99 27       	eor	r25, r25
    14f2:	80 83       	st	Z, r24
    UBRR0L = (unsigned char) baudrate;
    14f4:	e4 ec       	ldi	r30, 0xC4	; 196
    14f6:	f0 e0       	ldi	r31, 0x00	; 0
    14f8:	89 81       	ldd	r24, Y+1	; 0x01
    14fa:	80 83       	st	Z, r24

    /* Enable USART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE0)|(1<<RXEN0)|(1<<TXEN0);
    14fc:	e1 ec       	ldi	r30, 0xC1	; 193
    14fe:	f0 e0       	ldi	r31, 0x00	; 0
    1500:	88 e9       	ldi	r24, 0x98	; 152
    1502:	80 83       	st	Z, r24
    
    /* Set frame format: asynchronous, 8data, no parity, 1stop bit */
    #ifdef URSEL0
    UCSR0C = (1<<URSEL0)|(3<<UCSZ00);
    #else
    UCSR0C = (3<<UCSZ00);
    1504:	e2 ec       	ldi	r30, 0xC2	; 194
    1506:	f0 e0       	ldi	r31, 0x00	; 0
    1508:	86 e0       	ldi	r24, 0x06	; 6
    150a:	80 83       	st	Z, r24
    /* Enable UART receiver and transmitter and receive complete interrupt */
    UART0_CONTROL = _BV(RXCIE)|(1<<RXEN)|(1<<TXEN);

#endif

}/* uart_init */
    150c:	0f 90       	pop	r0
    150e:	0f 90       	pop	r0
    1510:	cf 91       	pop	r28
    1512:	df 91       	pop	r29
    1514:	08 95       	ret

00001516 <uart_getc>:
Purpose:  return byte from ringbuffer  
Returns:  lower byte:  received byte from ringbuffer
          higher byte: last receive error
**************************************************************************/
unsigned int uart_getc(void)
{    
    1516:	df 93       	push	r29
    1518:	cf 93       	push	r28
    151a:	00 d0       	rcall	.+0      	; 0x151c <uart_getc+0x6>
    151c:	00 d0       	rcall	.+0      	; 0x151e <uart_getc+0x8>
    151e:	cd b7       	in	r28, 0x3d	; 61
    1520:	de b7       	in	r29, 0x3e	; 62
    unsigned char tmptail;
    unsigned char data;


    if ( UART_RxHead == UART_RxTail ) {
    1522:	90 91 98 02 	lds	r25, 0x0298
    1526:	80 91 99 02 	lds	r24, 0x0299
    152a:	98 17       	cp	r25, r24
    152c:	29 f4       	brne	.+10     	; 0x1538 <uart_getc+0x22>
        return UART_NO_DATA;   /* no data available */
    152e:	80 e0       	ldi	r24, 0x00	; 0
    1530:	91 e0       	ldi	r25, 0x01	; 1
    1532:	9c 83       	std	Y+4, r25	; 0x04
    1534:	8b 83       	std	Y+3, r24	; 0x03
    1536:	1d c0       	rjmp	.+58     	; 0x1572 <uart_getc+0x5c>
    }
    
    /* calculate /store buffer index */
    tmptail = (UART_RxTail + 1) & UART_RX_BUFFER_MASK;
    1538:	80 91 99 02 	lds	r24, 0x0299
    153c:	8f 5f       	subi	r24, 0xFF	; 255
    153e:	8f 71       	andi	r24, 0x1F	; 31
    1540:	8a 83       	std	Y+2, r24	; 0x02
    UART_RxTail = tmptail; 
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	80 93 99 02 	sts	0x0299, r24
    
    /* get data from receive buffer */
    data = UART_RxBuf[tmptail];
    1548:	8a 81       	ldd	r24, Y+2	; 0x02
    154a:	88 2f       	mov	r24, r24
    154c:	90 e0       	ldi	r25, 0x00	; 0
    154e:	fc 01       	movw	r30, r24
    1550:	ea 58       	subi	r30, 0x8A	; 138
    1552:	fd 4f       	sbci	r31, 0xFD	; 253
    1554:	80 81       	ld	r24, Z
    1556:	89 83       	std	Y+1, r24	; 0x01
    
    return (UART_LastRxError << 8) + data;
    1558:	80 91 9a 02 	lds	r24, 0x029A
    155c:	88 2f       	mov	r24, r24
    155e:	90 e0       	ldi	r25, 0x00	; 0
    1560:	38 2f       	mov	r19, r24
    1562:	22 27       	eor	r18, r18
    1564:	89 81       	ldd	r24, Y+1	; 0x01
    1566:	88 2f       	mov	r24, r24
    1568:	90 e0       	ldi	r25, 0x00	; 0
    156a:	82 0f       	add	r24, r18
    156c:	93 1f       	adc	r25, r19
    156e:	9c 83       	std	Y+4, r25	; 0x04
    1570:	8b 83       	std	Y+3, r24	; 0x03
    1572:	8b 81       	ldd	r24, Y+3	; 0x03
    1574:	9c 81       	ldd	r25, Y+4	; 0x04

}/* uart_getc */
    1576:	0f 90       	pop	r0
    1578:	0f 90       	pop	r0
    157a:	0f 90       	pop	r0
    157c:	0f 90       	pop	r0
    157e:	cf 91       	pop	r28
    1580:	df 91       	pop	r29
    1582:	08 95       	ret

00001584 <uart_putc>:
Purpose:  write byte to ringbuffer for transmitting via UART
Input:    byte to be transmitted
Returns:  none          
**************************************************************************/
void uart_putc(unsigned char data)
{
    1584:	df 93       	push	r29
    1586:	cf 93       	push	r28
    1588:	00 d0       	rcall	.+0      	; 0x158a <uart_putc+0x6>
    158a:	cd b7       	in	r28, 0x3d	; 61
    158c:	de b7       	in	r29, 0x3e	; 62
    158e:	8a 83       	std	Y+2, r24	; 0x02
    unsigned char tmphead;

    
    tmphead  = (UART_TxHead + 1) & UART_TX_BUFFER_MASK;
    1590:	80 91 96 02 	lds	r24, 0x0296
    1594:	8f 5f       	subi	r24, 0xFF	; 255
    1596:	8f 71       	andi	r24, 0x1F	; 31
    1598:	89 83       	std	Y+1, r24	; 0x01
    
    while ( tmphead == UART_TxTail ){
    159a:	90 91 97 02 	lds	r25, 0x0297
    159e:	89 81       	ldd	r24, Y+1	; 0x01
    15a0:	89 17       	cp	r24, r25
    15a2:	d9 f3       	breq	.-10     	; 0x159a <uart_putc+0x16>
        ;/* wait for free space in buffer */
    }
    
    UART_TxBuf[tmphead] = data;
    15a4:	89 81       	ldd	r24, Y+1	; 0x01
    15a6:	88 2f       	mov	r24, r24
    15a8:	90 e0       	ldi	r25, 0x00	; 0
    15aa:	fc 01       	movw	r30, r24
    15ac:	ea 5a       	subi	r30, 0xAA	; 170
    15ae:	fd 4f       	sbci	r31, 0xFD	; 253
    15b0:	8a 81       	ldd	r24, Y+2	; 0x02
    15b2:	80 83       	st	Z, r24
    UART_TxHead = tmphead;
    15b4:	89 81       	ldd	r24, Y+1	; 0x01
    15b6:	80 93 96 02 	sts	0x0296, r24

    /* enable UDRE interrupt */
    UART0_CONTROL    |= _BV(UART0_UDRIE);
    15ba:	a1 ec       	ldi	r26, 0xC1	; 193
    15bc:	b0 e0       	ldi	r27, 0x00	; 0
    15be:	e1 ec       	ldi	r30, 0xC1	; 193
    15c0:	f0 e0       	ldi	r31, 0x00	; 0
    15c2:	80 81       	ld	r24, Z
    15c4:	80 62       	ori	r24, 0x20	; 32
    15c6:	8c 93       	st	X, r24

}/* uart_putc */
    15c8:	0f 90       	pop	r0
    15ca:	0f 90       	pop	r0
    15cc:	cf 91       	pop	r28
    15ce:	df 91       	pop	r29
    15d0:	08 95       	ret

000015d2 <uart_puts>:
Purpose:  transmit string to UART
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    15d2:	df 93       	push	r29
    15d4:	cf 93       	push	r28
    15d6:	00 d0       	rcall	.+0      	; 0x15d8 <uart_puts+0x6>
    15d8:	cd b7       	in	r28, 0x3d	; 61
    15da:	de b7       	in	r29, 0x3e	; 62
    15dc:	9a 83       	std	Y+2, r25	; 0x02
    15de:	89 83       	std	Y+1, r24	; 0x01
    15e0:	0c c0       	rjmp	.+24     	; 0x15fa <uart_puts+0x28>
    while (*s) 
      uart_putc(*s++);
    15e2:	e9 81       	ldd	r30, Y+1	; 0x01
    15e4:	fa 81       	ldd	r31, Y+2	; 0x02
    15e6:	80 81       	ld	r24, Z
    15e8:	28 2f       	mov	r18, r24
    15ea:	89 81       	ldd	r24, Y+1	; 0x01
    15ec:	9a 81       	ldd	r25, Y+2	; 0x02
    15ee:	01 96       	adiw	r24, 0x01	; 1
    15f0:	9a 83       	std	Y+2, r25	; 0x02
    15f2:	89 83       	std	Y+1, r24	; 0x01
    15f4:	82 2f       	mov	r24, r18
    15f6:	0e 94 c2 0a 	call	0x1584	; 0x1584 <uart_putc>
Input:    string to be transmitted
Returns:  none          
**************************************************************************/
void uart_puts(const char *s )
{
    while (*s) 
    15fa:	e9 81       	ldd	r30, Y+1	; 0x01
    15fc:	fa 81       	ldd	r31, Y+2	; 0x02
    15fe:	80 81       	ld	r24, Z
    1600:	88 23       	and	r24, r24
    1602:	79 f7       	brne	.-34     	; 0x15e2 <uart_puts+0x10>
      uart_putc(*s++);

}/* uart_puts */
    1604:	0f 90       	pop	r0
    1606:	0f 90       	pop	r0
    1608:	cf 91       	pop	r28
    160a:	df 91       	pop	r29
    160c:	08 95       	ret

0000160e <uart_puts_p>:
Purpose:  transmit string from program memory to UART
Input:    program memory string to be transmitted
Returns:  none
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    160e:	df 93       	push	r29
    1610:	cf 93       	push	r28
    1612:	00 d0       	rcall	.+0      	; 0x1614 <uart_puts_p+0x6>
    1614:	00 d0       	rcall	.+0      	; 0x1616 <uart_puts_p+0x8>
    1616:	00 d0       	rcall	.+0      	; 0x1618 <uart_puts_p+0xa>
    1618:	cd b7       	in	r28, 0x3d	; 61
    161a:	de b7       	in	r29, 0x3e	; 62
    161c:	9d 83       	std	Y+5, r25	; 0x05
    161e:	8c 83       	std	Y+4, r24	; 0x04
    1620:	03 c0       	rjmp	.+6      	; 0x1628 <uart_puts_p+0x1a>
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
      uart_putc(c);
    1622:	8e 81       	ldd	r24, Y+6	; 0x06
    1624:	0e 94 c2 0a 	call	0x1584	; 0x1584 <uart_putc>
**************************************************************************/
void uart_puts_p(const char *progmem_s )
{
    register char c;
    
    while ( (c = pgm_read_byte(progmem_s++)) ) 
    1628:	8c 81       	ldd	r24, Y+4	; 0x04
    162a:	9d 81       	ldd	r25, Y+5	; 0x05
    162c:	9b 83       	std	Y+3, r25	; 0x03
    162e:	8a 83       	std	Y+2, r24	; 0x02
    1630:	8c 81       	ldd	r24, Y+4	; 0x04
    1632:	9d 81       	ldd	r25, Y+5	; 0x05
    1634:	01 96       	adiw	r24, 0x01	; 1
    1636:	9d 83       	std	Y+5, r25	; 0x05
    1638:	8c 83       	std	Y+4, r24	; 0x04
    163a:	ea 81       	ldd	r30, Y+2	; 0x02
    163c:	fb 81       	ldd	r31, Y+3	; 0x03
    163e:	84 91       	lpm	r24, Z+
    1640:	89 83       	std	Y+1, r24	; 0x01
    1642:	89 81       	ldd	r24, Y+1	; 0x01
    1644:	8e 83       	std	Y+6, r24	; 0x06
    1646:	8e 81       	ldd	r24, Y+6	; 0x06
    1648:	88 23       	and	r24, r24
    164a:	59 f7       	brne	.-42     	; 0x1622 <uart_puts_p+0x14>
      uart_putc(c);

}/* uart_puts_p */
    164c:	26 96       	adiw	r28, 0x06	; 6
    164e:	0f b6       	in	r0, 0x3f	; 63
    1650:	f8 94       	cli
    1652:	de bf       	out	0x3e, r29	; 62
    1654:	0f be       	out	0x3f, r0	; 63
    1656:	cd bf       	out	0x3d, r28	; 61
    1658:	cf 91       	pop	r28
    165a:	df 91       	pop	r29
    165c:	08 95       	ret

0000165e <main>:
#define LEDOUT_PORT PORTC
#define LEDOUT PC5
#define LEDOUTPAUSE 300

//main here
int main(void) {
    165e:	0f 93       	push	r16
    1660:	1f 93       	push	r17
    1662:	df 93       	push	r29
    1664:	cf 93       	push	r28
    1666:	cd b7       	in	r28, 0x3d	; 61
    1668:	de b7       	in	r29, 0x3e	; 62
    166a:	c4 51       	subi	r28, 0x14	; 20
    166c:	d1 40       	sbci	r29, 0x01	; 1
    166e:	0f b6       	in	r0, 0x3f	; 63
    1670:	f8 94       	cli
    1672:	de bf       	out	0x3e, r29	; 62
    1674:	0f be       	out	0x3f, r0	; 63
    1676:	cd bf       	out	0x3d, r28	; 61
	uint8_t txrxrole = 0; // 1 transmitter 0 receiver
    1678:	fe 01       	movw	r30, r28
    167a:	e3 55       	subi	r30, 0x53	; 83
    167c:	ff 4f       	sbci	r31, 0xFF	; 255
    167e:	10 82       	st	Z, r1
	uint8_t i = 0;
    1680:	fe 01       	movw	r30, r28
    1682:	e4 55       	subi	r30, 0x54	; 84
    1684:	ff 4f       	sbci	r31, 0xFF	; 255
    1686:	10 82       	st	Z, r1
	//nrf24l01 variables
	uint8_t bufferout[NRF24L01_PAYLOAD];
	uint8_t bufferin[NRF24L01_PAYLOAD];

	//setup port
	BUTTONROLE_DDR &= ~(1<<BUTTONROLE); //input
    1688:	a7 e2       	ldi	r26, 0x27	; 39
    168a:	b0 e0       	ldi	r27, 0x00	; 0
    168c:	e7 e2       	ldi	r30, 0x27	; 39
    168e:	f0 e0       	ldi	r31, 0x00	; 0
    1690:	80 81       	ld	r24, Z
    1692:	8e 7f       	andi	r24, 0xFE	; 254
    1694:	8c 93       	st	X, r24
	BUTTONROLE_PORT &= ~(1<<LEDOUT); //off
    1696:	a8 e2       	ldi	r26, 0x28	; 40
    1698:	b0 e0       	ldi	r27, 0x00	; 0
    169a:	e8 e2       	ldi	r30, 0x28	; 40
    169c:	f0 e0       	ldi	r31, 0x00	; 0
    169e:	80 81       	ld	r24, Z
    16a0:	8f 7d       	andi	r24, 0xDF	; 223
    16a2:	8c 93       	st	X, r24
	BUTTONSEND_DDR &= ~(1<<BUTTONSEND); //input
    16a4:	a7 e2       	ldi	r26, 0x27	; 39
    16a6:	b0 e0       	ldi	r27, 0x00	; 0
    16a8:	e7 e2       	ldi	r30, 0x27	; 39
    16aa:	f0 e0       	ldi	r31, 0x00	; 0
    16ac:	80 81       	ld	r24, Z
    16ae:	8d 7f       	andi	r24, 0xFD	; 253
    16b0:	8c 93       	st	X, r24
	BUTTONSEND_PORT &= ~(1<<LEDOUT); //off
    16b2:	a8 e2       	ldi	r26, 0x28	; 40
    16b4:	b0 e0       	ldi	r27, 0x00	; 0
    16b6:	e8 e2       	ldi	r30, 0x28	; 40
    16b8:	f0 e0       	ldi	r31, 0x00	; 0
    16ba:	80 81       	ld	r24, Z
    16bc:	8f 7d       	andi	r24, 0xDF	; 223
    16be:	8c 93       	st	X, r24
	LEDOUT_DDR |= (1<<LEDOUT); //output
    16c0:	a7 e2       	ldi	r26, 0x27	; 39
    16c2:	b0 e0       	ldi	r27, 0x00	; 0
    16c4:	e7 e2       	ldi	r30, 0x27	; 39
    16c6:	f0 e0       	ldi	r31, 0x00	; 0
    16c8:	80 81       	ld	r24, Z
    16ca:	80 62       	ori	r24, 0x20	; 32
    16cc:	8c 93       	st	X, r24
	LEDOUT_PORT &= ~(1<<LEDOUT); //off
    16ce:	a8 e2       	ldi	r26, 0x28	; 40
    16d0:	b0 e0       	ldi	r27, 0x00	; 0
    16d2:	e8 e2       	ldi	r30, 0x28	; 40
    16d4:	f0 e0       	ldi	r31, 0x00	; 0
    16d6:	80 81       	ld	r24, Z
    16d8:	8f 7d       	andi	r24, 0xDF	; 223
    16da:	8c 93       	st	X, r24

	#if DEBUGENABLED == 1
	//init uart
	uart_init( UART_BAUD_SELECT(UART_BAUD_RATE,F_CPU) );
    16dc:	8f ec       	ldi	r24, 0xCF	; 207
    16de:	90 e0       	ldi	r25, 0x00	; 0
    16e0:	0e 94 57 0a 	call	0x14ae	; 0x14ae <uart_init>
	#endif

	//init nrf24l01
	nrf24l01_init();
    16e4:	0e 94 3b 08 	call	0x1076	; 0x1076 <nrf24l01_init>

	//init interrupt
	sei();
    16e8:	78 94       	sei

	//select a role
	if ((BUTTONROLE_PIN & (1<<BUTTONROLE)) == 0)
    16ea:	e6 e2       	ldi	r30, 0x26	; 38
    16ec:	f0 e0       	ldi	r31, 0x00	; 0
    16ee:	80 81       	ld	r24, Z
    16f0:	88 2f       	mov	r24, r24
    16f2:	90 e0       	ldi	r25, 0x00	; 0
    16f4:	81 70       	andi	r24, 0x01	; 1
    16f6:	90 70       	andi	r25, 0x00	; 0
    16f8:	00 97       	sbiw	r24, 0x00	; 0
    16fa:	29 f4       	brne	.+10     	; 0x1706 <main+0xa8>
		txrxrole = ROLERX;
    16fc:	fe 01       	movw	r30, r28
    16fe:	e3 55       	subi	r30, 0x53	; 83
    1700:	ff 4f       	sbci	r31, 0xFF	; 255
    1702:	10 82       	st	Z, r1
    1704:	05 c0       	rjmp	.+10     	; 0x1710 <main+0xb2>
	else
		txrxrole = ROLETX;
    1706:	fe 01       	movw	r30, r28
    1708:	e3 55       	subi	r30, 0x53	; 83
    170a:	ff 4f       	sbci	r31, 0xFF	; 255
    170c:	81 e0       	ldi	r24, 0x01	; 1
    170e:	80 83       	st	Z, r24

	//blink led depending on role
	if(txrxrole == ROLETX) {
    1710:	fe 01       	movw	r30, r28
    1712:	e3 55       	subi	r30, 0x53	; 83
    1714:	ff 4f       	sbci	r31, 0xFF	; 255
    1716:	80 81       	ld	r24, Z
    1718:	81 30       	cpi	r24, 0x01	; 1
    171a:	09 f0       	breq	.+2      	; 0x171e <main+0xc0>
    171c:	76 c1       	rjmp	.+748    	; 0x1a0a <main+0x3ac>
		LEDOUT_PORT |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    171e:	a8 e2       	ldi	r26, 0x28	; 40
    1720:	b0 e0       	ldi	r27, 0x00	; 0
    1722:	e8 e2       	ldi	r30, 0x28	; 40
    1724:	f0 e0       	ldi	r31, 0x00	; 0
    1726:	80 81       	ld	r24, Z
    1728:	80 62       	ori	r24, 0x20	; 32
    172a:	8c 93       	st	X, r24
    172c:	fe 01       	movw	r30, r28
    172e:	eb 55       	subi	r30, 0x5B	; 91
    1730:	ff 4f       	sbci	r31, 0xFF	; 255
    1732:	80 e0       	ldi	r24, 0x00	; 0
    1734:	90 e0       	ldi	r25, 0x00	; 0
    1736:	a6 e9       	ldi	r26, 0x96	; 150
    1738:	b3 e4       	ldi	r27, 0x43	; 67
    173a:	80 83       	st	Z, r24
    173c:	91 83       	std	Z+1, r25	; 0x01
    173e:	a2 83       	std	Z+2, r26	; 0x02
    1740:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1742:	8e 01       	movw	r16, r28
    1744:	0f 55       	subi	r16, 0x5F	; 95
    1746:	1f 4f       	sbci	r17, 0xFF	; 255
    1748:	fe 01       	movw	r30, r28
    174a:	eb 55       	subi	r30, 0x5B	; 91
    174c:	ff 4f       	sbci	r31, 0xFF	; 255
    174e:	60 81       	ld	r22, Z
    1750:	71 81       	ldd	r23, Z+1	; 0x01
    1752:	82 81       	ldd	r24, Z+2	; 0x02
    1754:	93 81       	ldd	r25, Z+3	; 0x03
    1756:	20 e0       	ldi	r18, 0x00	; 0
    1758:	30 e0       	ldi	r19, 0x00	; 0
    175a:	4a ef       	ldi	r20, 0xFA	; 250
    175c:	54 e4       	ldi	r21, 0x44	; 68
    175e:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1762:	dc 01       	movw	r26, r24
    1764:	cb 01       	movw	r24, r22
    1766:	f8 01       	movw	r30, r16
    1768:	80 83       	st	Z, r24
    176a:	91 83       	std	Z+1, r25	; 0x01
    176c:	a2 83       	std	Z+2, r26	; 0x02
    176e:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1770:	fe 01       	movw	r30, r28
    1772:	ef 55       	subi	r30, 0x5F	; 95
    1774:	ff 4f       	sbci	r31, 0xFF	; 255
    1776:	60 81       	ld	r22, Z
    1778:	71 81       	ldd	r23, Z+1	; 0x01
    177a:	82 81       	ldd	r24, Z+2	; 0x02
    177c:	93 81       	ldd	r25, Z+3	; 0x03
    177e:	20 e0       	ldi	r18, 0x00	; 0
    1780:	30 e0       	ldi	r19, 0x00	; 0
    1782:	40 e8       	ldi	r20, 0x80	; 128
    1784:	5f e3       	ldi	r21, 0x3F	; 63
    1786:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    178a:	88 23       	and	r24, r24
    178c:	44 f4       	brge	.+16     	; 0x179e <main+0x140>
		__ticks = 1;
    178e:	fe 01       	movw	r30, r28
    1790:	e1 56       	subi	r30, 0x61	; 97
    1792:	ff 4f       	sbci	r31, 0xFF	; 255
    1794:	81 e0       	ldi	r24, 0x01	; 1
    1796:	90 e0       	ldi	r25, 0x00	; 0
    1798:	91 83       	std	Z+1, r25	; 0x01
    179a:	80 83       	st	Z, r24
    179c:	64 c0       	rjmp	.+200    	; 0x1866 <main+0x208>
	else if (__tmp > 65535)
    179e:	fe 01       	movw	r30, r28
    17a0:	ef 55       	subi	r30, 0x5F	; 95
    17a2:	ff 4f       	sbci	r31, 0xFF	; 255
    17a4:	60 81       	ld	r22, Z
    17a6:	71 81       	ldd	r23, Z+1	; 0x01
    17a8:	82 81       	ldd	r24, Z+2	; 0x02
    17aa:	93 81       	ldd	r25, Z+3	; 0x03
    17ac:	20 e0       	ldi	r18, 0x00	; 0
    17ae:	3f ef       	ldi	r19, 0xFF	; 255
    17b0:	4f e7       	ldi	r20, 0x7F	; 127
    17b2:	57 e4       	ldi	r21, 0x47	; 71
    17b4:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    17b8:	18 16       	cp	r1, r24
    17ba:	0c f0       	brlt	.+2      	; 0x17be <main+0x160>
    17bc:	43 c0       	rjmp	.+134    	; 0x1844 <main+0x1e6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    17be:	fe 01       	movw	r30, r28
    17c0:	eb 55       	subi	r30, 0x5B	; 91
    17c2:	ff 4f       	sbci	r31, 0xFF	; 255
    17c4:	60 81       	ld	r22, Z
    17c6:	71 81       	ldd	r23, Z+1	; 0x01
    17c8:	82 81       	ldd	r24, Z+2	; 0x02
    17ca:	93 81       	ldd	r25, Z+3	; 0x03
    17cc:	20 e0       	ldi	r18, 0x00	; 0
    17ce:	30 e0       	ldi	r19, 0x00	; 0
    17d0:	40 e2       	ldi	r20, 0x20	; 32
    17d2:	51 e4       	ldi	r21, 0x41	; 65
    17d4:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    17d8:	dc 01       	movw	r26, r24
    17da:	cb 01       	movw	r24, r22
    17dc:	8e 01       	movw	r16, r28
    17de:	01 56       	subi	r16, 0x61	; 97
    17e0:	1f 4f       	sbci	r17, 0xFF	; 255
    17e2:	bc 01       	movw	r22, r24
    17e4:	cd 01       	movw	r24, r26
    17e6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    17ea:	dc 01       	movw	r26, r24
    17ec:	cb 01       	movw	r24, r22
    17ee:	f8 01       	movw	r30, r16
    17f0:	91 83       	std	Z+1, r25	; 0x01
    17f2:	80 83       	st	Z, r24
    17f4:	1f c0       	rjmp	.+62     	; 0x1834 <main+0x1d6>
    17f6:	fe 01       	movw	r30, r28
    17f8:	e3 56       	subi	r30, 0x63	; 99
    17fa:	ff 4f       	sbci	r31, 0xFF	; 255
    17fc:	88 ec       	ldi	r24, 0xC8	; 200
    17fe:	90 e0       	ldi	r25, 0x00	; 0
    1800:	91 83       	std	Z+1, r25	; 0x01
    1802:	80 83       	st	Z, r24
    1804:	fe 01       	movw	r30, r28
    1806:	e3 56       	subi	r30, 0x63	; 99
    1808:	ff 4f       	sbci	r31, 0xFF	; 255
    180a:	80 81       	ld	r24, Z
    180c:	91 81       	ldd	r25, Z+1	; 0x01
    180e:	01 97       	sbiw	r24, 0x01	; 1
    1810:	f1 f7       	brne	.-4      	; 0x180e <main+0x1b0>
    1812:	fe 01       	movw	r30, r28
    1814:	e3 56       	subi	r30, 0x63	; 99
    1816:	ff 4f       	sbci	r31, 0xFF	; 255
    1818:	91 83       	std	Z+1, r25	; 0x01
    181a:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    181c:	de 01       	movw	r26, r28
    181e:	a1 56       	subi	r26, 0x61	; 97
    1820:	bf 4f       	sbci	r27, 0xFF	; 255
    1822:	fe 01       	movw	r30, r28
    1824:	e1 56       	subi	r30, 0x61	; 97
    1826:	ff 4f       	sbci	r31, 0xFF	; 255
    1828:	80 81       	ld	r24, Z
    182a:	91 81       	ldd	r25, Z+1	; 0x01
    182c:	01 97       	sbiw	r24, 0x01	; 1
    182e:	11 96       	adiw	r26, 0x01	; 1
    1830:	9c 93       	st	X, r25
    1832:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1834:	fe 01       	movw	r30, r28
    1836:	e1 56       	subi	r30, 0x61	; 97
    1838:	ff 4f       	sbci	r31, 0xFF	; 255
    183a:	80 81       	ld	r24, Z
    183c:	91 81       	ldd	r25, Z+1	; 0x01
    183e:	00 97       	sbiw	r24, 0x00	; 0
    1840:	d1 f6       	brne	.-76     	; 0x17f6 <main+0x198>
    1842:	27 c0       	rjmp	.+78     	; 0x1892 <main+0x234>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1844:	8e 01       	movw	r16, r28
    1846:	01 56       	subi	r16, 0x61	; 97
    1848:	1f 4f       	sbci	r17, 0xFF	; 255
    184a:	fe 01       	movw	r30, r28
    184c:	ef 55       	subi	r30, 0x5F	; 95
    184e:	ff 4f       	sbci	r31, 0xFF	; 255
    1850:	60 81       	ld	r22, Z
    1852:	71 81       	ldd	r23, Z+1	; 0x01
    1854:	82 81       	ldd	r24, Z+2	; 0x02
    1856:	93 81       	ldd	r25, Z+3	; 0x03
    1858:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    185c:	dc 01       	movw	r26, r24
    185e:	cb 01       	movw	r24, r22
    1860:	f8 01       	movw	r30, r16
    1862:	91 83       	std	Z+1, r25	; 0x01
    1864:	80 83       	st	Z, r24
    1866:	de 01       	movw	r26, r28
    1868:	a5 56       	subi	r26, 0x65	; 101
    186a:	bf 4f       	sbci	r27, 0xFF	; 255
    186c:	fe 01       	movw	r30, r28
    186e:	e1 56       	subi	r30, 0x61	; 97
    1870:	ff 4f       	sbci	r31, 0xFF	; 255
    1872:	80 81       	ld	r24, Z
    1874:	91 81       	ldd	r25, Z+1	; 0x01
    1876:	8d 93       	st	X+, r24
    1878:	9c 93       	st	X, r25
    187a:	fe 01       	movw	r30, r28
    187c:	e5 56       	subi	r30, 0x65	; 101
    187e:	ff 4f       	sbci	r31, 0xFF	; 255
    1880:	80 81       	ld	r24, Z
    1882:	91 81       	ldd	r25, Z+1	; 0x01
    1884:	01 97       	sbiw	r24, 0x01	; 1
    1886:	f1 f7       	brne	.-4      	; 0x1884 <main+0x226>
    1888:	fe 01       	movw	r30, r28
    188a:	e5 56       	subi	r30, 0x65	; 101
    188c:	ff 4f       	sbci	r31, 0xFF	; 255
    188e:	91 83       	std	Z+1, r25	; 0x01
    1890:	80 83       	st	Z, r24
		LEDOUT_PORT &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1892:	a8 e2       	ldi	r26, 0x28	; 40
    1894:	b0 e0       	ldi	r27, 0x00	; 0
    1896:	e8 e2       	ldi	r30, 0x28	; 40
    1898:	f0 e0       	ldi	r31, 0x00	; 0
    189a:	80 81       	ld	r24, Z
    189c:	8f 7d       	andi	r24, 0xDF	; 223
    189e:	8c 93       	st	X, r24
    18a0:	fe 01       	movw	r30, r28
    18a2:	e9 56       	subi	r30, 0x69	; 105
    18a4:	ff 4f       	sbci	r31, 0xFF	; 255
    18a6:	80 e0       	ldi	r24, 0x00	; 0
    18a8:	90 e0       	ldi	r25, 0x00	; 0
    18aa:	a6 e9       	ldi	r26, 0x96	; 150
    18ac:	b3 e4       	ldi	r27, 0x43	; 67
    18ae:	80 83       	st	Z, r24
    18b0:	91 83       	std	Z+1, r25	; 0x01
    18b2:	a2 83       	std	Z+2, r26	; 0x02
    18b4:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    18b6:	8e 01       	movw	r16, r28
    18b8:	0d 56       	subi	r16, 0x6D	; 109
    18ba:	1f 4f       	sbci	r17, 0xFF	; 255
    18bc:	fe 01       	movw	r30, r28
    18be:	e9 56       	subi	r30, 0x69	; 105
    18c0:	ff 4f       	sbci	r31, 0xFF	; 255
    18c2:	60 81       	ld	r22, Z
    18c4:	71 81       	ldd	r23, Z+1	; 0x01
    18c6:	82 81       	ldd	r24, Z+2	; 0x02
    18c8:	93 81       	ldd	r25, Z+3	; 0x03
    18ca:	20 e0       	ldi	r18, 0x00	; 0
    18cc:	30 e0       	ldi	r19, 0x00	; 0
    18ce:	4a ef       	ldi	r20, 0xFA	; 250
    18d0:	54 e4       	ldi	r21, 0x44	; 68
    18d2:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    18d6:	dc 01       	movw	r26, r24
    18d8:	cb 01       	movw	r24, r22
    18da:	f8 01       	movw	r30, r16
    18dc:	80 83       	st	Z, r24
    18de:	91 83       	std	Z+1, r25	; 0x01
    18e0:	a2 83       	std	Z+2, r26	; 0x02
    18e2:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    18e4:	fe 01       	movw	r30, r28
    18e6:	ed 56       	subi	r30, 0x6D	; 109
    18e8:	ff 4f       	sbci	r31, 0xFF	; 255
    18ea:	60 81       	ld	r22, Z
    18ec:	71 81       	ldd	r23, Z+1	; 0x01
    18ee:	82 81       	ldd	r24, Z+2	; 0x02
    18f0:	93 81       	ldd	r25, Z+3	; 0x03
    18f2:	20 e0       	ldi	r18, 0x00	; 0
    18f4:	30 e0       	ldi	r19, 0x00	; 0
    18f6:	40 e8       	ldi	r20, 0x80	; 128
    18f8:	5f e3       	ldi	r21, 0x3F	; 63
    18fa:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    18fe:	88 23       	and	r24, r24
    1900:	44 f4       	brge	.+16     	; 0x1912 <main+0x2b4>
		__ticks = 1;
    1902:	fe 01       	movw	r30, r28
    1904:	ef 56       	subi	r30, 0x6F	; 111
    1906:	ff 4f       	sbci	r31, 0xFF	; 255
    1908:	81 e0       	ldi	r24, 0x01	; 1
    190a:	90 e0       	ldi	r25, 0x00	; 0
    190c:	91 83       	std	Z+1, r25	; 0x01
    190e:	80 83       	st	Z, r24
    1910:	64 c0       	rjmp	.+200    	; 0x19da <main+0x37c>
	else if (__tmp > 65535)
    1912:	fe 01       	movw	r30, r28
    1914:	ed 56       	subi	r30, 0x6D	; 109
    1916:	ff 4f       	sbci	r31, 0xFF	; 255
    1918:	60 81       	ld	r22, Z
    191a:	71 81       	ldd	r23, Z+1	; 0x01
    191c:	82 81       	ldd	r24, Z+2	; 0x02
    191e:	93 81       	ldd	r25, Z+3	; 0x03
    1920:	20 e0       	ldi	r18, 0x00	; 0
    1922:	3f ef       	ldi	r19, 0xFF	; 255
    1924:	4f e7       	ldi	r20, 0x7F	; 127
    1926:	57 e4       	ldi	r21, 0x47	; 71
    1928:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    192c:	18 16       	cp	r1, r24
    192e:	0c f0       	brlt	.+2      	; 0x1932 <main+0x2d4>
    1930:	43 c0       	rjmp	.+134    	; 0x19b8 <main+0x35a>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1932:	fe 01       	movw	r30, r28
    1934:	e9 56       	subi	r30, 0x69	; 105
    1936:	ff 4f       	sbci	r31, 0xFF	; 255
    1938:	60 81       	ld	r22, Z
    193a:	71 81       	ldd	r23, Z+1	; 0x01
    193c:	82 81       	ldd	r24, Z+2	; 0x02
    193e:	93 81       	ldd	r25, Z+3	; 0x03
    1940:	20 e0       	ldi	r18, 0x00	; 0
    1942:	30 e0       	ldi	r19, 0x00	; 0
    1944:	40 e2       	ldi	r20, 0x20	; 32
    1946:	51 e4       	ldi	r21, 0x41	; 65
    1948:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    194c:	dc 01       	movw	r26, r24
    194e:	cb 01       	movw	r24, r22
    1950:	8e 01       	movw	r16, r28
    1952:	0f 56       	subi	r16, 0x6F	; 111
    1954:	1f 4f       	sbci	r17, 0xFF	; 255
    1956:	bc 01       	movw	r22, r24
    1958:	cd 01       	movw	r24, r26
    195a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    195e:	dc 01       	movw	r26, r24
    1960:	cb 01       	movw	r24, r22
    1962:	f8 01       	movw	r30, r16
    1964:	91 83       	std	Z+1, r25	; 0x01
    1966:	80 83       	st	Z, r24
    1968:	1f c0       	rjmp	.+62     	; 0x19a8 <main+0x34a>
    196a:	fe 01       	movw	r30, r28
    196c:	e1 57       	subi	r30, 0x71	; 113
    196e:	ff 4f       	sbci	r31, 0xFF	; 255
    1970:	88 ec       	ldi	r24, 0xC8	; 200
    1972:	90 e0       	ldi	r25, 0x00	; 0
    1974:	91 83       	std	Z+1, r25	; 0x01
    1976:	80 83       	st	Z, r24
    1978:	fe 01       	movw	r30, r28
    197a:	e1 57       	subi	r30, 0x71	; 113
    197c:	ff 4f       	sbci	r31, 0xFF	; 255
    197e:	80 81       	ld	r24, Z
    1980:	91 81       	ldd	r25, Z+1	; 0x01
    1982:	01 97       	sbiw	r24, 0x01	; 1
    1984:	f1 f7       	brne	.-4      	; 0x1982 <main+0x324>
    1986:	fe 01       	movw	r30, r28
    1988:	e1 57       	subi	r30, 0x71	; 113
    198a:	ff 4f       	sbci	r31, 0xFF	; 255
    198c:	91 83       	std	Z+1, r25	; 0x01
    198e:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1990:	de 01       	movw	r26, r28
    1992:	af 56       	subi	r26, 0x6F	; 111
    1994:	bf 4f       	sbci	r27, 0xFF	; 255
    1996:	fe 01       	movw	r30, r28
    1998:	ef 56       	subi	r30, 0x6F	; 111
    199a:	ff 4f       	sbci	r31, 0xFF	; 255
    199c:	80 81       	ld	r24, Z
    199e:	91 81       	ldd	r25, Z+1	; 0x01
    19a0:	01 97       	sbiw	r24, 0x01	; 1
    19a2:	11 96       	adiw	r26, 0x01	; 1
    19a4:	9c 93       	st	X, r25
    19a6:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    19a8:	fe 01       	movw	r30, r28
    19aa:	ef 56       	subi	r30, 0x6F	; 111
    19ac:	ff 4f       	sbci	r31, 0xFF	; 255
    19ae:	80 81       	ld	r24, Z
    19b0:	91 81       	ldd	r25, Z+1	; 0x01
    19b2:	00 97       	sbiw	r24, 0x00	; 0
    19b4:	d1 f6       	brne	.-76     	; 0x196a <main+0x30c>
    19b6:	19 c3       	rjmp	.+1586   	; 0x1fea <main+0x98c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    19b8:	8e 01       	movw	r16, r28
    19ba:	0f 56       	subi	r16, 0x6F	; 111
    19bc:	1f 4f       	sbci	r17, 0xFF	; 255
    19be:	fe 01       	movw	r30, r28
    19c0:	ed 56       	subi	r30, 0x6D	; 109
    19c2:	ff 4f       	sbci	r31, 0xFF	; 255
    19c4:	60 81       	ld	r22, Z
    19c6:	71 81       	ldd	r23, Z+1	; 0x01
    19c8:	82 81       	ldd	r24, Z+2	; 0x02
    19ca:	93 81       	ldd	r25, Z+3	; 0x03
    19cc:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    19d0:	dc 01       	movw	r26, r24
    19d2:	cb 01       	movw	r24, r22
    19d4:	f8 01       	movw	r30, r16
    19d6:	91 83       	std	Z+1, r25	; 0x01
    19d8:	80 83       	st	Z, r24
    19da:	de 01       	movw	r26, r28
    19dc:	a3 57       	subi	r26, 0x73	; 115
    19de:	bf 4f       	sbci	r27, 0xFF	; 255
    19e0:	fe 01       	movw	r30, r28
    19e2:	ef 56       	subi	r30, 0x6F	; 111
    19e4:	ff 4f       	sbci	r31, 0xFF	; 255
    19e6:	80 81       	ld	r24, Z
    19e8:	91 81       	ldd	r25, Z+1	; 0x01
    19ea:	11 96       	adiw	r26, 0x01	; 1
    19ec:	9c 93       	st	X, r25
    19ee:	8e 93       	st	-X, r24
    19f0:	fe 01       	movw	r30, r28
    19f2:	e3 57       	subi	r30, 0x73	; 115
    19f4:	ff 4f       	sbci	r31, 0xFF	; 255
    19f6:	80 81       	ld	r24, Z
    19f8:	91 81       	ldd	r25, Z+1	; 0x01
    19fa:	01 97       	sbiw	r24, 0x01	; 1
    19fc:	f1 f7       	brne	.-4      	; 0x19fa <main+0x39c>
    19fe:	fe 01       	movw	r30, r28
    1a00:	e3 57       	subi	r30, 0x73	; 115
    1a02:	ff 4f       	sbci	r31, 0xFF	; 255
    1a04:	91 83       	std	Z+1, r25	; 0x01
    1a06:	80 83       	st	Z, r24
    1a08:	f0 c2       	rjmp	.+1504   	; 0x1fea <main+0x98c>
	} else if(txrxrole == ROLERX) {
    1a0a:	fe 01       	movw	r30, r28
    1a0c:	e3 55       	subi	r30, 0x53	; 83
    1a0e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a10:	80 81       	ld	r24, Z
    1a12:	88 23       	and	r24, r24
    1a14:	09 f0       	breq	.+2      	; 0x1a18 <main+0x3ba>
    1a16:	e9 c2       	rjmp	.+1490   	; 0x1fea <main+0x98c>
		LEDOUT_PORT |= (1 << LEDOUT); _delay_ms(LEDOUTPAUSE);
    1a18:	a8 e2       	ldi	r26, 0x28	; 40
    1a1a:	b0 e0       	ldi	r27, 0x00	; 0
    1a1c:	e8 e2       	ldi	r30, 0x28	; 40
    1a1e:	f0 e0       	ldi	r31, 0x00	; 0
    1a20:	80 81       	ld	r24, Z
    1a22:	80 62       	ori	r24, 0x20	; 32
    1a24:	8c 93       	st	X, r24
    1a26:	fe 01       	movw	r30, r28
    1a28:	e7 57       	subi	r30, 0x77	; 119
    1a2a:	ff 4f       	sbci	r31, 0xFF	; 255
    1a2c:	80 e0       	ldi	r24, 0x00	; 0
    1a2e:	90 e0       	ldi	r25, 0x00	; 0
    1a30:	a6 e9       	ldi	r26, 0x96	; 150
    1a32:	b3 e4       	ldi	r27, 0x43	; 67
    1a34:	80 83       	st	Z, r24
    1a36:	91 83       	std	Z+1, r25	; 0x01
    1a38:	a2 83       	std	Z+2, r26	; 0x02
    1a3a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1a3c:	8e 01       	movw	r16, r28
    1a3e:	0b 57       	subi	r16, 0x7B	; 123
    1a40:	1f 4f       	sbci	r17, 0xFF	; 255
    1a42:	fe 01       	movw	r30, r28
    1a44:	e7 57       	subi	r30, 0x77	; 119
    1a46:	ff 4f       	sbci	r31, 0xFF	; 255
    1a48:	60 81       	ld	r22, Z
    1a4a:	71 81       	ldd	r23, Z+1	; 0x01
    1a4c:	82 81       	ldd	r24, Z+2	; 0x02
    1a4e:	93 81       	ldd	r25, Z+3	; 0x03
    1a50:	20 e0       	ldi	r18, 0x00	; 0
    1a52:	30 e0       	ldi	r19, 0x00	; 0
    1a54:	4a ef       	ldi	r20, 0xFA	; 250
    1a56:	54 e4       	ldi	r21, 0x44	; 68
    1a58:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1a5c:	dc 01       	movw	r26, r24
    1a5e:	cb 01       	movw	r24, r22
    1a60:	f8 01       	movw	r30, r16
    1a62:	80 83       	st	Z, r24
    1a64:	91 83       	std	Z+1, r25	; 0x01
    1a66:	a2 83       	std	Z+2, r26	; 0x02
    1a68:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1a6a:	fe 01       	movw	r30, r28
    1a6c:	eb 57       	subi	r30, 0x7B	; 123
    1a6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1a70:	60 81       	ld	r22, Z
    1a72:	71 81       	ldd	r23, Z+1	; 0x01
    1a74:	82 81       	ldd	r24, Z+2	; 0x02
    1a76:	93 81       	ldd	r25, Z+3	; 0x03
    1a78:	20 e0       	ldi	r18, 0x00	; 0
    1a7a:	30 e0       	ldi	r19, 0x00	; 0
    1a7c:	40 e8       	ldi	r20, 0x80	; 128
    1a7e:	5f e3       	ldi	r21, 0x3F	; 63
    1a80:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    1a84:	88 23       	and	r24, r24
    1a86:	44 f4       	brge	.+16     	; 0x1a98 <main+0x43a>
		__ticks = 1;
    1a88:	fe 01       	movw	r30, r28
    1a8a:	ed 57       	subi	r30, 0x7D	; 125
    1a8c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a8e:	81 e0       	ldi	r24, 0x01	; 1
    1a90:	90 e0       	ldi	r25, 0x00	; 0
    1a92:	91 83       	std	Z+1, r25	; 0x01
    1a94:	80 83       	st	Z, r24
    1a96:	64 c0       	rjmp	.+200    	; 0x1b60 <main+0x502>
	else if (__tmp > 65535)
    1a98:	fe 01       	movw	r30, r28
    1a9a:	eb 57       	subi	r30, 0x7B	; 123
    1a9c:	ff 4f       	sbci	r31, 0xFF	; 255
    1a9e:	60 81       	ld	r22, Z
    1aa0:	71 81       	ldd	r23, Z+1	; 0x01
    1aa2:	82 81       	ldd	r24, Z+2	; 0x02
    1aa4:	93 81       	ldd	r25, Z+3	; 0x03
    1aa6:	20 e0       	ldi	r18, 0x00	; 0
    1aa8:	3f ef       	ldi	r19, 0xFF	; 255
    1aaa:	4f e7       	ldi	r20, 0x7F	; 127
    1aac:	57 e4       	ldi	r21, 0x47	; 71
    1aae:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    1ab2:	18 16       	cp	r1, r24
    1ab4:	0c f0       	brlt	.+2      	; 0x1ab8 <main+0x45a>
    1ab6:	43 c0       	rjmp	.+134    	; 0x1b3e <main+0x4e0>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1ab8:	fe 01       	movw	r30, r28
    1aba:	e7 57       	subi	r30, 0x77	; 119
    1abc:	ff 4f       	sbci	r31, 0xFF	; 255
    1abe:	60 81       	ld	r22, Z
    1ac0:	71 81       	ldd	r23, Z+1	; 0x01
    1ac2:	82 81       	ldd	r24, Z+2	; 0x02
    1ac4:	93 81       	ldd	r25, Z+3	; 0x03
    1ac6:	20 e0       	ldi	r18, 0x00	; 0
    1ac8:	30 e0       	ldi	r19, 0x00	; 0
    1aca:	40 e2       	ldi	r20, 0x20	; 32
    1acc:	51 e4       	ldi	r21, 0x41	; 65
    1ace:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1ad2:	dc 01       	movw	r26, r24
    1ad4:	cb 01       	movw	r24, r22
    1ad6:	8e 01       	movw	r16, r28
    1ad8:	0d 57       	subi	r16, 0x7D	; 125
    1ada:	1f 4f       	sbci	r17, 0xFF	; 255
    1adc:	bc 01       	movw	r22, r24
    1ade:	cd 01       	movw	r24, r26
    1ae0:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1ae4:	dc 01       	movw	r26, r24
    1ae6:	cb 01       	movw	r24, r22
    1ae8:	f8 01       	movw	r30, r16
    1aea:	91 83       	std	Z+1, r25	; 0x01
    1aec:	80 83       	st	Z, r24
    1aee:	1f c0       	rjmp	.+62     	; 0x1b2e <main+0x4d0>
    1af0:	fe 01       	movw	r30, r28
    1af2:	ef 57       	subi	r30, 0x7F	; 127
    1af4:	ff 4f       	sbci	r31, 0xFF	; 255
    1af6:	88 ec       	ldi	r24, 0xC8	; 200
    1af8:	90 e0       	ldi	r25, 0x00	; 0
    1afa:	91 83       	std	Z+1, r25	; 0x01
    1afc:	80 83       	st	Z, r24
    1afe:	fe 01       	movw	r30, r28
    1b00:	ef 57       	subi	r30, 0x7F	; 127
    1b02:	ff 4f       	sbci	r31, 0xFF	; 255
    1b04:	80 81       	ld	r24, Z
    1b06:	91 81       	ldd	r25, Z+1	; 0x01
    1b08:	01 97       	sbiw	r24, 0x01	; 1
    1b0a:	f1 f7       	brne	.-4      	; 0x1b08 <main+0x4aa>
    1b0c:	fe 01       	movw	r30, r28
    1b0e:	ef 57       	subi	r30, 0x7F	; 127
    1b10:	ff 4f       	sbci	r31, 0xFF	; 255
    1b12:	91 83       	std	Z+1, r25	; 0x01
    1b14:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1b16:	de 01       	movw	r26, r28
    1b18:	ad 57       	subi	r26, 0x7D	; 125
    1b1a:	bf 4f       	sbci	r27, 0xFF	; 255
    1b1c:	fe 01       	movw	r30, r28
    1b1e:	ed 57       	subi	r30, 0x7D	; 125
    1b20:	ff 4f       	sbci	r31, 0xFF	; 255
    1b22:	80 81       	ld	r24, Z
    1b24:	91 81       	ldd	r25, Z+1	; 0x01
    1b26:	01 97       	sbiw	r24, 0x01	; 1
    1b28:	11 96       	adiw	r26, 0x01	; 1
    1b2a:	9c 93       	st	X, r25
    1b2c:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1b2e:	fe 01       	movw	r30, r28
    1b30:	ed 57       	subi	r30, 0x7D	; 125
    1b32:	ff 4f       	sbci	r31, 0xFF	; 255
    1b34:	80 81       	ld	r24, Z
    1b36:	91 81       	ldd	r25, Z+1	; 0x01
    1b38:	00 97       	sbiw	r24, 0x00	; 0
    1b3a:	d1 f6       	brne	.-76     	; 0x1af0 <main+0x492>
    1b3c:	27 c0       	rjmp	.+78     	; 0x1b8c <main+0x52e>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1b3e:	8e 01       	movw	r16, r28
    1b40:	0d 57       	subi	r16, 0x7D	; 125
    1b42:	1f 4f       	sbci	r17, 0xFF	; 255
    1b44:	fe 01       	movw	r30, r28
    1b46:	eb 57       	subi	r30, 0x7B	; 123
    1b48:	ff 4f       	sbci	r31, 0xFF	; 255
    1b4a:	60 81       	ld	r22, Z
    1b4c:	71 81       	ldd	r23, Z+1	; 0x01
    1b4e:	82 81       	ldd	r24, Z+2	; 0x02
    1b50:	93 81       	ldd	r25, Z+3	; 0x03
    1b52:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1b56:	dc 01       	movw	r26, r24
    1b58:	cb 01       	movw	r24, r22
    1b5a:	f8 01       	movw	r30, r16
    1b5c:	91 83       	std	Z+1, r25	; 0x01
    1b5e:	80 83       	st	Z, r24
    1b60:	de 01       	movw	r26, r28
    1b62:	a1 58       	subi	r26, 0x81	; 129
    1b64:	bf 4f       	sbci	r27, 0xFF	; 255
    1b66:	fe 01       	movw	r30, r28
    1b68:	ed 57       	subi	r30, 0x7D	; 125
    1b6a:	ff 4f       	sbci	r31, 0xFF	; 255
    1b6c:	80 81       	ld	r24, Z
    1b6e:	91 81       	ldd	r25, Z+1	; 0x01
    1b70:	8d 93       	st	X+, r24
    1b72:	9c 93       	st	X, r25
    1b74:	fe 01       	movw	r30, r28
    1b76:	e1 58       	subi	r30, 0x81	; 129
    1b78:	ff 4f       	sbci	r31, 0xFF	; 255
    1b7a:	80 81       	ld	r24, Z
    1b7c:	91 81       	ldd	r25, Z+1	; 0x01
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	f1 f7       	brne	.-4      	; 0x1b7e <main+0x520>
    1b82:	fe 01       	movw	r30, r28
    1b84:	e1 58       	subi	r30, 0x81	; 129
    1b86:	ff 4f       	sbci	r31, 0xFF	; 255
    1b88:	91 83       	std	Z+1, r25	; 0x01
    1b8a:	80 83       	st	Z, r24
		LEDOUT_PORT &= ~(1 << LEDOUT); _delay_ms(LEDOUTPAUSE);
    1b8c:	a8 e2       	ldi	r26, 0x28	; 40
    1b8e:	b0 e0       	ldi	r27, 0x00	; 0
    1b90:	e8 e2       	ldi	r30, 0x28	; 40
    1b92:	f0 e0       	ldi	r31, 0x00	; 0
    1b94:	80 81       	ld	r24, Z
    1b96:	8f 7d       	andi	r24, 0xDF	; 223
    1b98:	8c 93       	st	X, r24
    1b9a:	fe 01       	movw	r30, r28
    1b9c:	e5 58       	subi	r30, 0x85	; 133
    1b9e:	ff 4f       	sbci	r31, 0xFF	; 255
    1ba0:	80 e0       	ldi	r24, 0x00	; 0
    1ba2:	90 e0       	ldi	r25, 0x00	; 0
    1ba4:	a6 e9       	ldi	r26, 0x96	; 150
    1ba6:	b3 e4       	ldi	r27, 0x43	; 67
    1ba8:	80 83       	st	Z, r24
    1baa:	91 83       	std	Z+1, r25	; 0x01
    1bac:	a2 83       	std	Z+2, r26	; 0x02
    1bae:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1bb0:	8e 01       	movw	r16, r28
    1bb2:	09 58       	subi	r16, 0x89	; 137
    1bb4:	1f 4f       	sbci	r17, 0xFF	; 255
    1bb6:	fe 01       	movw	r30, r28
    1bb8:	e5 58       	subi	r30, 0x85	; 133
    1bba:	ff 4f       	sbci	r31, 0xFF	; 255
    1bbc:	60 81       	ld	r22, Z
    1bbe:	71 81       	ldd	r23, Z+1	; 0x01
    1bc0:	82 81       	ldd	r24, Z+2	; 0x02
    1bc2:	93 81       	ldd	r25, Z+3	; 0x03
    1bc4:	20 e0       	ldi	r18, 0x00	; 0
    1bc6:	30 e0       	ldi	r19, 0x00	; 0
    1bc8:	4a ef       	ldi	r20, 0xFA	; 250
    1bca:	54 e4       	ldi	r21, 0x44	; 68
    1bcc:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1bd0:	dc 01       	movw	r26, r24
    1bd2:	cb 01       	movw	r24, r22
    1bd4:	f8 01       	movw	r30, r16
    1bd6:	80 83       	st	Z, r24
    1bd8:	91 83       	std	Z+1, r25	; 0x01
    1bda:	a2 83       	std	Z+2, r26	; 0x02
    1bdc:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1bde:	fe 01       	movw	r30, r28
    1be0:	e9 58       	subi	r30, 0x89	; 137
    1be2:	ff 4f       	sbci	r31, 0xFF	; 255
    1be4:	60 81       	ld	r22, Z
    1be6:	71 81       	ldd	r23, Z+1	; 0x01
    1be8:	82 81       	ldd	r24, Z+2	; 0x02
    1bea:	93 81       	ldd	r25, Z+3	; 0x03
    1bec:	20 e0       	ldi	r18, 0x00	; 0
    1bee:	30 e0       	ldi	r19, 0x00	; 0
    1bf0:	40 e8       	ldi	r20, 0x80	; 128
    1bf2:	5f e3       	ldi	r21, 0x3F	; 63
    1bf4:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    1bf8:	88 23       	and	r24, r24
    1bfa:	44 f4       	brge	.+16     	; 0x1c0c <main+0x5ae>
		__ticks = 1;
    1bfc:	fe 01       	movw	r30, r28
    1bfe:	eb 58       	subi	r30, 0x8B	; 139
    1c00:	ff 4f       	sbci	r31, 0xFF	; 255
    1c02:	81 e0       	ldi	r24, 0x01	; 1
    1c04:	90 e0       	ldi	r25, 0x00	; 0
    1c06:	91 83       	std	Z+1, r25	; 0x01
    1c08:	80 83       	st	Z, r24
    1c0a:	64 c0       	rjmp	.+200    	; 0x1cd4 <main+0x676>
	else if (__tmp > 65535)
    1c0c:	fe 01       	movw	r30, r28
    1c0e:	e9 58       	subi	r30, 0x89	; 137
    1c10:	ff 4f       	sbci	r31, 0xFF	; 255
    1c12:	60 81       	ld	r22, Z
    1c14:	71 81       	ldd	r23, Z+1	; 0x01
    1c16:	82 81       	ldd	r24, Z+2	; 0x02
    1c18:	93 81       	ldd	r25, Z+3	; 0x03
    1c1a:	20 e0       	ldi	r18, 0x00	; 0
    1c1c:	3f ef       	ldi	r19, 0xFF	; 255
    1c1e:	4f e7       	ldi	r20, 0x7F	; 127
    1c20:	57 e4       	ldi	r21, 0x47	; 71
    1c22:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    1c26:	18 16       	cp	r1, r24
    1c28:	0c f0       	brlt	.+2      	; 0x1c2c <main+0x5ce>
    1c2a:	43 c0       	rjmp	.+134    	; 0x1cb2 <main+0x654>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1c2c:	fe 01       	movw	r30, r28
    1c2e:	e5 58       	subi	r30, 0x85	; 133
    1c30:	ff 4f       	sbci	r31, 0xFF	; 255
    1c32:	60 81       	ld	r22, Z
    1c34:	71 81       	ldd	r23, Z+1	; 0x01
    1c36:	82 81       	ldd	r24, Z+2	; 0x02
    1c38:	93 81       	ldd	r25, Z+3	; 0x03
    1c3a:	20 e0       	ldi	r18, 0x00	; 0
    1c3c:	30 e0       	ldi	r19, 0x00	; 0
    1c3e:	40 e2       	ldi	r20, 0x20	; 32
    1c40:	51 e4       	ldi	r21, 0x41	; 65
    1c42:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1c46:	dc 01       	movw	r26, r24
    1c48:	cb 01       	movw	r24, r22
    1c4a:	8e 01       	movw	r16, r28
    1c4c:	0b 58       	subi	r16, 0x8B	; 139
    1c4e:	1f 4f       	sbci	r17, 0xFF	; 255
    1c50:	bc 01       	movw	r22, r24
    1c52:	cd 01       	movw	r24, r26
    1c54:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1c58:	dc 01       	movw	r26, r24
    1c5a:	cb 01       	movw	r24, r22
    1c5c:	f8 01       	movw	r30, r16
    1c5e:	91 83       	std	Z+1, r25	; 0x01
    1c60:	80 83       	st	Z, r24
    1c62:	1f c0       	rjmp	.+62     	; 0x1ca2 <main+0x644>
    1c64:	fe 01       	movw	r30, r28
    1c66:	ed 58       	subi	r30, 0x8D	; 141
    1c68:	ff 4f       	sbci	r31, 0xFF	; 255
    1c6a:	88 ec       	ldi	r24, 0xC8	; 200
    1c6c:	90 e0       	ldi	r25, 0x00	; 0
    1c6e:	91 83       	std	Z+1, r25	; 0x01
    1c70:	80 83       	st	Z, r24
    1c72:	fe 01       	movw	r30, r28
    1c74:	ed 58       	subi	r30, 0x8D	; 141
    1c76:	ff 4f       	sbci	r31, 0xFF	; 255
    1c78:	80 81       	ld	r24, Z
    1c7a:	91 81       	ldd	r25, Z+1	; 0x01
    1c7c:	01 97       	sbiw	r24, 0x01	; 1
    1c7e:	f1 f7       	brne	.-4      	; 0x1c7c <main+0x61e>
    1c80:	fe 01       	movw	r30, r28
    1c82:	ed 58       	subi	r30, 0x8D	; 141
    1c84:	ff 4f       	sbci	r31, 0xFF	; 255
    1c86:	91 83       	std	Z+1, r25	; 0x01
    1c88:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1c8a:	de 01       	movw	r26, r28
    1c8c:	ab 58       	subi	r26, 0x8B	; 139
    1c8e:	bf 4f       	sbci	r27, 0xFF	; 255
    1c90:	fe 01       	movw	r30, r28
    1c92:	eb 58       	subi	r30, 0x8B	; 139
    1c94:	ff 4f       	sbci	r31, 0xFF	; 255
    1c96:	80 81       	ld	r24, Z
    1c98:	91 81       	ldd	r25, Z+1	; 0x01
    1c9a:	01 97       	sbiw	r24, 0x01	; 1
    1c9c:	11 96       	adiw	r26, 0x01	; 1
    1c9e:	9c 93       	st	X, r25
    1ca0:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1ca2:	fe 01       	movw	r30, r28
    1ca4:	eb 58       	subi	r30, 0x8B	; 139
    1ca6:	ff 4f       	sbci	r31, 0xFF	; 255
    1ca8:	80 81       	ld	r24, Z
    1caa:	91 81       	ldd	r25, Z+1	; 0x01
    1cac:	00 97       	sbiw	r24, 0x00	; 0
    1cae:	d1 f6       	brne	.-76     	; 0x1c64 <main+0x606>
    1cb0:	27 c0       	rjmp	.+78     	; 0x1d00 <main+0x6a2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1cb2:	8e 01       	movw	r16, r28
    1cb4:	0b 58       	subi	r16, 0x8B	; 139
    1cb6:	1f 4f       	sbci	r17, 0xFF	; 255
    1cb8:	fe 01       	movw	r30, r28
    1cba:	e9 58       	subi	r30, 0x89	; 137
    1cbc:	ff 4f       	sbci	r31, 0xFF	; 255
    1cbe:	60 81       	ld	r22, Z
    1cc0:	71 81       	ldd	r23, Z+1	; 0x01
    1cc2:	82 81       	ldd	r24, Z+2	; 0x02
    1cc4:	93 81       	ldd	r25, Z+3	; 0x03
    1cc6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1cca:	dc 01       	movw	r26, r24
    1ccc:	cb 01       	movw	r24, r22
    1cce:	f8 01       	movw	r30, r16
    1cd0:	91 83       	std	Z+1, r25	; 0x01
    1cd2:	80 83       	st	Z, r24
    1cd4:	de 01       	movw	r26, r28
    1cd6:	af 58       	subi	r26, 0x8F	; 143
    1cd8:	bf 4f       	sbci	r27, 0xFF	; 255
    1cda:	fe 01       	movw	r30, r28
    1cdc:	eb 58       	subi	r30, 0x8B	; 139
    1cde:	ff 4f       	sbci	r31, 0xFF	; 255
    1ce0:	80 81       	ld	r24, Z
    1ce2:	91 81       	ldd	r25, Z+1	; 0x01
    1ce4:	8d 93       	st	X+, r24
    1ce6:	9c 93       	st	X, r25
    1ce8:	fe 01       	movw	r30, r28
    1cea:	ef 58       	subi	r30, 0x8F	; 143
    1cec:	ff 4f       	sbci	r31, 0xFF	; 255
    1cee:	80 81       	ld	r24, Z
    1cf0:	91 81       	ldd	r25, Z+1	; 0x01
    1cf2:	01 97       	sbiw	r24, 0x01	; 1
    1cf4:	f1 f7       	brne	.-4      	; 0x1cf2 <main+0x694>
    1cf6:	fe 01       	movw	r30, r28
    1cf8:	ef 58       	subi	r30, 0x8F	; 143
    1cfa:	ff 4f       	sbci	r31, 0xFF	; 255
    1cfc:	91 83       	std	Z+1, r25	; 0x01
    1cfe:	80 83       	st	Z, r24
		LEDOUT_PORT |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1d00:	a8 e2       	ldi	r26, 0x28	; 40
    1d02:	b0 e0       	ldi	r27, 0x00	; 0
    1d04:	e8 e2       	ldi	r30, 0x28	; 40
    1d06:	f0 e0       	ldi	r31, 0x00	; 0
    1d08:	80 81       	ld	r24, Z
    1d0a:	80 62       	ori	r24, 0x20	; 32
    1d0c:	8c 93       	st	X, r24
    1d0e:	fe 01       	movw	r30, r28
    1d10:	e3 59       	subi	r30, 0x93	; 147
    1d12:	ff 4f       	sbci	r31, 0xFF	; 255
    1d14:	80 e0       	ldi	r24, 0x00	; 0
    1d16:	90 e0       	ldi	r25, 0x00	; 0
    1d18:	a6 e9       	ldi	r26, 0x96	; 150
    1d1a:	b3 e4       	ldi	r27, 0x43	; 67
    1d1c:	80 83       	st	Z, r24
    1d1e:	91 83       	std	Z+1, r25	; 0x01
    1d20:	a2 83       	std	Z+2, r26	; 0x02
    1d22:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1d24:	8e 01       	movw	r16, r28
    1d26:	07 59       	subi	r16, 0x97	; 151
    1d28:	1f 4f       	sbci	r17, 0xFF	; 255
    1d2a:	fe 01       	movw	r30, r28
    1d2c:	e3 59       	subi	r30, 0x93	; 147
    1d2e:	ff 4f       	sbci	r31, 0xFF	; 255
    1d30:	60 81       	ld	r22, Z
    1d32:	71 81       	ldd	r23, Z+1	; 0x01
    1d34:	82 81       	ldd	r24, Z+2	; 0x02
    1d36:	93 81       	ldd	r25, Z+3	; 0x03
    1d38:	20 e0       	ldi	r18, 0x00	; 0
    1d3a:	30 e0       	ldi	r19, 0x00	; 0
    1d3c:	4a ef       	ldi	r20, 0xFA	; 250
    1d3e:	54 e4       	ldi	r21, 0x44	; 68
    1d40:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1d44:	dc 01       	movw	r26, r24
    1d46:	cb 01       	movw	r24, r22
    1d48:	f8 01       	movw	r30, r16
    1d4a:	80 83       	st	Z, r24
    1d4c:	91 83       	std	Z+1, r25	; 0x01
    1d4e:	a2 83       	std	Z+2, r26	; 0x02
    1d50:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1d52:	fe 01       	movw	r30, r28
    1d54:	e7 59       	subi	r30, 0x97	; 151
    1d56:	ff 4f       	sbci	r31, 0xFF	; 255
    1d58:	60 81       	ld	r22, Z
    1d5a:	71 81       	ldd	r23, Z+1	; 0x01
    1d5c:	82 81       	ldd	r24, Z+2	; 0x02
    1d5e:	93 81       	ldd	r25, Z+3	; 0x03
    1d60:	20 e0       	ldi	r18, 0x00	; 0
    1d62:	30 e0       	ldi	r19, 0x00	; 0
    1d64:	40 e8       	ldi	r20, 0x80	; 128
    1d66:	5f e3       	ldi	r21, 0x3F	; 63
    1d68:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    1d6c:	88 23       	and	r24, r24
    1d6e:	44 f4       	brge	.+16     	; 0x1d80 <main+0x722>
		__ticks = 1;
    1d70:	fe 01       	movw	r30, r28
    1d72:	e9 59       	subi	r30, 0x99	; 153
    1d74:	ff 4f       	sbci	r31, 0xFF	; 255
    1d76:	81 e0       	ldi	r24, 0x01	; 1
    1d78:	90 e0       	ldi	r25, 0x00	; 0
    1d7a:	91 83       	std	Z+1, r25	; 0x01
    1d7c:	80 83       	st	Z, r24
    1d7e:	64 c0       	rjmp	.+200    	; 0x1e48 <main+0x7ea>
	else if (__tmp > 65535)
    1d80:	fe 01       	movw	r30, r28
    1d82:	e7 59       	subi	r30, 0x97	; 151
    1d84:	ff 4f       	sbci	r31, 0xFF	; 255
    1d86:	60 81       	ld	r22, Z
    1d88:	71 81       	ldd	r23, Z+1	; 0x01
    1d8a:	82 81       	ldd	r24, Z+2	; 0x02
    1d8c:	93 81       	ldd	r25, Z+3	; 0x03
    1d8e:	20 e0       	ldi	r18, 0x00	; 0
    1d90:	3f ef       	ldi	r19, 0xFF	; 255
    1d92:	4f e7       	ldi	r20, 0x7F	; 127
    1d94:	57 e4       	ldi	r21, 0x47	; 71
    1d96:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    1d9a:	18 16       	cp	r1, r24
    1d9c:	0c f0       	brlt	.+2      	; 0x1da0 <main+0x742>
    1d9e:	43 c0       	rjmp	.+134    	; 0x1e26 <main+0x7c8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1da0:	fe 01       	movw	r30, r28
    1da2:	e3 59       	subi	r30, 0x93	; 147
    1da4:	ff 4f       	sbci	r31, 0xFF	; 255
    1da6:	60 81       	ld	r22, Z
    1da8:	71 81       	ldd	r23, Z+1	; 0x01
    1daa:	82 81       	ldd	r24, Z+2	; 0x02
    1dac:	93 81       	ldd	r25, Z+3	; 0x03
    1dae:	20 e0       	ldi	r18, 0x00	; 0
    1db0:	30 e0       	ldi	r19, 0x00	; 0
    1db2:	40 e2       	ldi	r20, 0x20	; 32
    1db4:	51 e4       	ldi	r21, 0x41	; 65
    1db6:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1dba:	dc 01       	movw	r26, r24
    1dbc:	cb 01       	movw	r24, r22
    1dbe:	8e 01       	movw	r16, r28
    1dc0:	09 59       	subi	r16, 0x99	; 153
    1dc2:	1f 4f       	sbci	r17, 0xFF	; 255
    1dc4:	bc 01       	movw	r22, r24
    1dc6:	cd 01       	movw	r24, r26
    1dc8:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1dcc:	dc 01       	movw	r26, r24
    1dce:	cb 01       	movw	r24, r22
    1dd0:	f8 01       	movw	r30, r16
    1dd2:	91 83       	std	Z+1, r25	; 0x01
    1dd4:	80 83       	st	Z, r24
    1dd6:	1f c0       	rjmp	.+62     	; 0x1e16 <main+0x7b8>
    1dd8:	fe 01       	movw	r30, r28
    1dda:	eb 59       	subi	r30, 0x9B	; 155
    1ddc:	ff 4f       	sbci	r31, 0xFF	; 255
    1dde:	88 ec       	ldi	r24, 0xC8	; 200
    1de0:	90 e0       	ldi	r25, 0x00	; 0
    1de2:	91 83       	std	Z+1, r25	; 0x01
    1de4:	80 83       	st	Z, r24
    1de6:	fe 01       	movw	r30, r28
    1de8:	eb 59       	subi	r30, 0x9B	; 155
    1dea:	ff 4f       	sbci	r31, 0xFF	; 255
    1dec:	80 81       	ld	r24, Z
    1dee:	91 81       	ldd	r25, Z+1	; 0x01
    1df0:	01 97       	sbiw	r24, 0x01	; 1
    1df2:	f1 f7       	brne	.-4      	; 0x1df0 <main+0x792>
    1df4:	fe 01       	movw	r30, r28
    1df6:	eb 59       	subi	r30, 0x9B	; 155
    1df8:	ff 4f       	sbci	r31, 0xFF	; 255
    1dfa:	91 83       	std	Z+1, r25	; 0x01
    1dfc:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1dfe:	de 01       	movw	r26, r28
    1e00:	a9 59       	subi	r26, 0x99	; 153
    1e02:	bf 4f       	sbci	r27, 0xFF	; 255
    1e04:	fe 01       	movw	r30, r28
    1e06:	e9 59       	subi	r30, 0x99	; 153
    1e08:	ff 4f       	sbci	r31, 0xFF	; 255
    1e0a:	80 81       	ld	r24, Z
    1e0c:	91 81       	ldd	r25, Z+1	; 0x01
    1e0e:	01 97       	sbiw	r24, 0x01	; 1
    1e10:	11 96       	adiw	r26, 0x01	; 1
    1e12:	9c 93       	st	X, r25
    1e14:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1e16:	fe 01       	movw	r30, r28
    1e18:	e9 59       	subi	r30, 0x99	; 153
    1e1a:	ff 4f       	sbci	r31, 0xFF	; 255
    1e1c:	80 81       	ld	r24, Z
    1e1e:	91 81       	ldd	r25, Z+1	; 0x01
    1e20:	00 97       	sbiw	r24, 0x00	; 0
    1e22:	d1 f6       	brne	.-76     	; 0x1dd8 <main+0x77a>
    1e24:	27 c0       	rjmp	.+78     	; 0x1e74 <main+0x816>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1e26:	8e 01       	movw	r16, r28
    1e28:	09 59       	subi	r16, 0x99	; 153
    1e2a:	1f 4f       	sbci	r17, 0xFF	; 255
    1e2c:	fe 01       	movw	r30, r28
    1e2e:	e7 59       	subi	r30, 0x97	; 151
    1e30:	ff 4f       	sbci	r31, 0xFF	; 255
    1e32:	60 81       	ld	r22, Z
    1e34:	71 81       	ldd	r23, Z+1	; 0x01
    1e36:	82 81       	ldd	r24, Z+2	; 0x02
    1e38:	93 81       	ldd	r25, Z+3	; 0x03
    1e3a:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1e3e:	dc 01       	movw	r26, r24
    1e40:	cb 01       	movw	r24, r22
    1e42:	f8 01       	movw	r30, r16
    1e44:	91 83       	std	Z+1, r25	; 0x01
    1e46:	80 83       	st	Z, r24
    1e48:	de 01       	movw	r26, r28
    1e4a:	ad 59       	subi	r26, 0x9D	; 157
    1e4c:	bf 4f       	sbci	r27, 0xFF	; 255
    1e4e:	fe 01       	movw	r30, r28
    1e50:	e9 59       	subi	r30, 0x99	; 153
    1e52:	ff 4f       	sbci	r31, 0xFF	; 255
    1e54:	80 81       	ld	r24, Z
    1e56:	91 81       	ldd	r25, Z+1	; 0x01
    1e58:	8d 93       	st	X+, r24
    1e5a:	9c 93       	st	X, r25
    1e5c:	fe 01       	movw	r30, r28
    1e5e:	ed 59       	subi	r30, 0x9D	; 157
    1e60:	ff 4f       	sbci	r31, 0xFF	; 255
    1e62:	80 81       	ld	r24, Z
    1e64:	91 81       	ldd	r25, Z+1	; 0x01
    1e66:	01 97       	sbiw	r24, 0x01	; 1
    1e68:	f1 f7       	brne	.-4      	; 0x1e66 <main+0x808>
    1e6a:	fe 01       	movw	r30, r28
    1e6c:	ed 59       	subi	r30, 0x9D	; 157
    1e6e:	ff 4f       	sbci	r31, 0xFF	; 255
    1e70:	91 83       	std	Z+1, r25	; 0x01
    1e72:	80 83       	st	Z, r24
		LEDOUT_PORT &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    1e74:	a8 e2       	ldi	r26, 0x28	; 40
    1e76:	b0 e0       	ldi	r27, 0x00	; 0
    1e78:	e8 e2       	ldi	r30, 0x28	; 40
    1e7a:	f0 e0       	ldi	r31, 0x00	; 0
    1e7c:	80 81       	ld	r24, Z
    1e7e:	8f 7d       	andi	r24, 0xDF	; 223
    1e80:	8c 93       	st	X, r24
    1e82:	fe 01       	movw	r30, r28
    1e84:	e1 5a       	subi	r30, 0xA1	; 161
    1e86:	ff 4f       	sbci	r31, 0xFF	; 255
    1e88:	80 e0       	ldi	r24, 0x00	; 0
    1e8a:	90 e0       	ldi	r25, 0x00	; 0
    1e8c:	a6 e9       	ldi	r26, 0x96	; 150
    1e8e:	b3 e4       	ldi	r27, 0x43	; 67
    1e90:	80 83       	st	Z, r24
    1e92:	91 83       	std	Z+1, r25	; 0x01
    1e94:	a2 83       	std	Z+2, r26	; 0x02
    1e96:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    1e98:	8e 01       	movw	r16, r28
    1e9a:	05 5a       	subi	r16, 0xA5	; 165
    1e9c:	1f 4f       	sbci	r17, 0xFF	; 255
    1e9e:	fe 01       	movw	r30, r28
    1ea0:	e1 5a       	subi	r30, 0xA1	; 161
    1ea2:	ff 4f       	sbci	r31, 0xFF	; 255
    1ea4:	60 81       	ld	r22, Z
    1ea6:	71 81       	ldd	r23, Z+1	; 0x01
    1ea8:	82 81       	ldd	r24, Z+2	; 0x02
    1eaa:	93 81       	ldd	r25, Z+3	; 0x03
    1eac:	20 e0       	ldi	r18, 0x00	; 0
    1eae:	30 e0       	ldi	r19, 0x00	; 0
    1eb0:	4a ef       	ldi	r20, 0xFA	; 250
    1eb2:	54 e4       	ldi	r21, 0x44	; 68
    1eb4:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1eb8:	dc 01       	movw	r26, r24
    1eba:	cb 01       	movw	r24, r22
    1ebc:	f8 01       	movw	r30, r16
    1ebe:	80 83       	st	Z, r24
    1ec0:	91 83       	std	Z+1, r25	; 0x01
    1ec2:	a2 83       	std	Z+2, r26	; 0x02
    1ec4:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    1ec6:	fe 01       	movw	r30, r28
    1ec8:	e5 5a       	subi	r30, 0xA5	; 165
    1eca:	ff 4f       	sbci	r31, 0xFF	; 255
    1ecc:	60 81       	ld	r22, Z
    1ece:	71 81       	ldd	r23, Z+1	; 0x01
    1ed0:	82 81       	ldd	r24, Z+2	; 0x02
    1ed2:	93 81       	ldd	r25, Z+3	; 0x03
    1ed4:	20 e0       	ldi	r18, 0x00	; 0
    1ed6:	30 e0       	ldi	r19, 0x00	; 0
    1ed8:	40 e8       	ldi	r20, 0x80	; 128
    1eda:	5f e3       	ldi	r21, 0x3F	; 63
    1edc:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    1ee0:	88 23       	and	r24, r24
    1ee2:	44 f4       	brge	.+16     	; 0x1ef4 <main+0x896>
		__ticks = 1;
    1ee4:	fe 01       	movw	r30, r28
    1ee6:	e7 5a       	subi	r30, 0xA7	; 167
    1ee8:	ff 4f       	sbci	r31, 0xFF	; 255
    1eea:	81 e0       	ldi	r24, 0x01	; 1
    1eec:	90 e0       	ldi	r25, 0x00	; 0
    1eee:	91 83       	std	Z+1, r25	; 0x01
    1ef0:	80 83       	st	Z, r24
    1ef2:	64 c0       	rjmp	.+200    	; 0x1fbc <main+0x95e>
	else if (__tmp > 65535)
    1ef4:	fe 01       	movw	r30, r28
    1ef6:	e5 5a       	subi	r30, 0xA5	; 165
    1ef8:	ff 4f       	sbci	r31, 0xFF	; 255
    1efa:	60 81       	ld	r22, Z
    1efc:	71 81       	ldd	r23, Z+1	; 0x01
    1efe:	82 81       	ldd	r24, Z+2	; 0x02
    1f00:	93 81       	ldd	r25, Z+3	; 0x03
    1f02:	20 e0       	ldi	r18, 0x00	; 0
    1f04:	3f ef       	ldi	r19, 0xFF	; 255
    1f06:	4f e7       	ldi	r20, 0x7F	; 127
    1f08:	57 e4       	ldi	r21, 0x47	; 71
    1f0a:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    1f0e:	18 16       	cp	r1, r24
    1f10:	0c f0       	brlt	.+2      	; 0x1f14 <main+0x8b6>
    1f12:	43 c0       	rjmp	.+134    	; 0x1f9a <main+0x93c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    1f14:	fe 01       	movw	r30, r28
    1f16:	e1 5a       	subi	r30, 0xA1	; 161
    1f18:	ff 4f       	sbci	r31, 0xFF	; 255
    1f1a:	60 81       	ld	r22, Z
    1f1c:	71 81       	ldd	r23, Z+1	; 0x01
    1f1e:	82 81       	ldd	r24, Z+2	; 0x02
    1f20:	93 81       	ldd	r25, Z+3	; 0x03
    1f22:	20 e0       	ldi	r18, 0x00	; 0
    1f24:	30 e0       	ldi	r19, 0x00	; 0
    1f26:	40 e2       	ldi	r20, 0x20	; 32
    1f28:	51 e4       	ldi	r21, 0x41	; 65
    1f2a:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    1f2e:	dc 01       	movw	r26, r24
    1f30:	cb 01       	movw	r24, r22
    1f32:	8e 01       	movw	r16, r28
    1f34:	07 5a       	subi	r16, 0xA7	; 167
    1f36:	1f 4f       	sbci	r17, 0xFF	; 255
    1f38:	bc 01       	movw	r22, r24
    1f3a:	cd 01       	movw	r24, r26
    1f3c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1f40:	dc 01       	movw	r26, r24
    1f42:	cb 01       	movw	r24, r22
    1f44:	f8 01       	movw	r30, r16
    1f46:	91 83       	std	Z+1, r25	; 0x01
    1f48:	80 83       	st	Z, r24
    1f4a:	1f c0       	rjmp	.+62     	; 0x1f8a <main+0x92c>
    1f4c:	fe 01       	movw	r30, r28
    1f4e:	e9 5a       	subi	r30, 0xA9	; 169
    1f50:	ff 4f       	sbci	r31, 0xFF	; 255
    1f52:	88 ec       	ldi	r24, 0xC8	; 200
    1f54:	90 e0       	ldi	r25, 0x00	; 0
    1f56:	91 83       	std	Z+1, r25	; 0x01
    1f58:	80 83       	st	Z, r24
    1f5a:	fe 01       	movw	r30, r28
    1f5c:	e9 5a       	subi	r30, 0xA9	; 169
    1f5e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f60:	80 81       	ld	r24, Z
    1f62:	91 81       	ldd	r25, Z+1	; 0x01
    1f64:	01 97       	sbiw	r24, 0x01	; 1
    1f66:	f1 f7       	brne	.-4      	; 0x1f64 <main+0x906>
    1f68:	fe 01       	movw	r30, r28
    1f6a:	e9 5a       	subi	r30, 0xA9	; 169
    1f6c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f6e:	91 83       	std	Z+1, r25	; 0x01
    1f70:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    1f72:	de 01       	movw	r26, r28
    1f74:	a7 5a       	subi	r26, 0xA7	; 167
    1f76:	bf 4f       	sbci	r27, 0xFF	; 255
    1f78:	fe 01       	movw	r30, r28
    1f7a:	e7 5a       	subi	r30, 0xA7	; 167
    1f7c:	ff 4f       	sbci	r31, 0xFF	; 255
    1f7e:	80 81       	ld	r24, Z
    1f80:	91 81       	ldd	r25, Z+1	; 0x01
    1f82:	01 97       	sbiw	r24, 0x01	; 1
    1f84:	11 96       	adiw	r26, 0x01	; 1
    1f86:	9c 93       	st	X, r25
    1f88:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    1f8a:	fe 01       	movw	r30, r28
    1f8c:	e7 5a       	subi	r30, 0xA7	; 167
    1f8e:	ff 4f       	sbci	r31, 0xFF	; 255
    1f90:	80 81       	ld	r24, Z
    1f92:	91 81       	ldd	r25, Z+1	; 0x01
    1f94:	00 97       	sbiw	r24, 0x00	; 0
    1f96:	d1 f6       	brne	.-76     	; 0x1f4c <main+0x8ee>
    1f98:	28 c0       	rjmp	.+80     	; 0x1fea <main+0x98c>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    1f9a:	8e 01       	movw	r16, r28
    1f9c:	07 5a       	subi	r16, 0xA7	; 167
    1f9e:	1f 4f       	sbci	r17, 0xFF	; 255
    1fa0:	fe 01       	movw	r30, r28
    1fa2:	e5 5a       	subi	r30, 0xA5	; 165
    1fa4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fa6:	60 81       	ld	r22, Z
    1fa8:	71 81       	ldd	r23, Z+1	; 0x01
    1faa:	82 81       	ldd	r24, Z+2	; 0x02
    1fac:	93 81       	ldd	r25, Z+3	; 0x03
    1fae:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    1fb2:	dc 01       	movw	r26, r24
    1fb4:	cb 01       	movw	r24, r22
    1fb6:	f8 01       	movw	r30, r16
    1fb8:	91 83       	std	Z+1, r25	; 0x01
    1fba:	80 83       	st	Z, r24
    1fbc:	de 01       	movw	r26, r28
    1fbe:	ab 5a       	subi	r26, 0xAB	; 171
    1fc0:	bf 4f       	sbci	r27, 0xFF	; 255
    1fc2:	fe 01       	movw	r30, r28
    1fc4:	e7 5a       	subi	r30, 0xA7	; 167
    1fc6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fc8:	80 81       	ld	r24, Z
    1fca:	91 81       	ldd	r25, Z+1	; 0x01
    1fcc:	11 96       	adiw	r26, 0x01	; 1
    1fce:	9c 93       	st	X, r25
    1fd0:	8e 93       	st	-X, r24
    1fd2:	fe 01       	movw	r30, r28
    1fd4:	eb 5a       	subi	r30, 0xAB	; 171
    1fd6:	ff 4f       	sbci	r31, 0xFF	; 255
    1fd8:	80 81       	ld	r24, Z
    1fda:	91 81       	ldd	r25, Z+1	; 0x01
    1fdc:	01 97       	sbiw	r24, 0x01	; 1
    1fde:	f1 f7       	brne	.-4      	; 0x1fdc <main+0x97e>
    1fe0:	fe 01       	movw	r30, r28
    1fe2:	eb 5a       	subi	r30, 0xAB	; 171
    1fe4:	ff 4f       	sbci	r31, 0xFF	; 255
    1fe6:	91 83       	std	Z+1, r25	; 0x01
    1fe8:	80 83       	st	Z, r24
	}

	#if DEBUGENABLED == 1
	if(txrxrole == ROLETX)
    1fea:	fe 01       	movw	r30, r28
    1fec:	e3 55       	subi	r30, 0x53	; 83
    1fee:	ff 4f       	sbci	r31, 0xFF	; 255
    1ff0:	80 81       	ld	r24, Z
    1ff2:	81 30       	cpi	r24, 0x01	; 1
    1ff4:	29 f4       	brne	.+10     	; 0x2000 <main+0x9a2>
		uart_puts("starting as tx...\r\n");
    1ff6:	8b eb       	ldi	r24, 0xBB	; 187
    1ff8:	91 e0       	ldi	r25, 0x01	; 1
    1ffa:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
    1ffe:	0a c0       	rjmp	.+20     	; 0x2014 <main+0x9b6>
	else if(txrxrole == ROLERX)
    2000:	fe 01       	movw	r30, r28
    2002:	e3 55       	subi	r30, 0x53	; 83
    2004:	ff 4f       	sbci	r31, 0xFF	; 255
    2006:	80 81       	ld	r24, Z
    2008:	88 23       	and	r24, r24
    200a:	21 f4       	brne	.+8      	; 0x2014 <main+0x9b6>
		uart_puts("starting as rx...\r\n");
    200c:	8f ec       	ldi	r24, 0xCF	; 207
    200e:	91 e0       	ldi	r25, 0x01	; 1
    2010:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
	#endif

	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
    2014:	fe 01       	movw	r30, r28
    2016:	e4 55       	subi	r30, 0x54	; 84
    2018:	ff 4f       	sbci	r31, 0xFF	; 255
    201a:	10 82       	st	Z, r1
    201c:	1c c0       	rjmp	.+56     	; 0x2056 <main+0x9f8>
		bufferout[i] = i+'a';
    201e:	fe 01       	movw	r30, r28
    2020:	e4 55       	subi	r30, 0x54	; 84
    2022:	ff 4f       	sbci	r31, 0xFF	; 255
    2024:	80 81       	ld	r24, Z
    2026:	28 2f       	mov	r18, r24
    2028:	30 e0       	ldi	r19, 0x00	; 0
    202a:	fe 01       	movw	r30, r28
    202c:	e4 55       	subi	r30, 0x54	; 84
    202e:	ff 4f       	sbci	r31, 0xFF	; 255
    2030:	80 81       	ld	r24, Z
    2032:	48 2f       	mov	r20, r24
    2034:	4f 59       	subi	r20, 0x9F	; 159
    2036:	ce 01       	movw	r24, r28
    2038:	82 55       	subi	r24, 0x52	; 82
    203a:	9f 4f       	sbci	r25, 0xFF	; 255
    203c:	fc 01       	movw	r30, r24
    203e:	e2 0f       	add	r30, r18
    2040:	f3 1f       	adc	r31, r19
    2042:	40 83       	st	Z, r20
	else if(txrxrole == ROLERX)
		uart_puts("starting as rx...\r\n");
	#endif

	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
    2044:	de 01       	movw	r26, r28
    2046:	a4 55       	subi	r26, 0x54	; 84
    2048:	bf 4f       	sbci	r27, 0xFF	; 255
    204a:	fe 01       	movw	r30, r28
    204c:	e4 55       	subi	r30, 0x54	; 84
    204e:	ff 4f       	sbci	r31, 0xFF	; 255
    2050:	80 81       	ld	r24, Z
    2052:	8f 5f       	subi	r24, 0xFF	; 255
    2054:	8c 93       	st	X, r24
    2056:	fe 01       	movw	r30, r28
    2058:	e4 55       	subi	r30, 0x54	; 84
    205a:	ff 4f       	sbci	r31, 0xFF	; 255
    205c:	80 81       	ld	r24, Z
    205e:	80 31       	cpi	r24, 0x10	; 16
    2060:	f0 f2       	brcs	.-68     	; 0x201e <main+0x9c0>
		bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
    2062:	fe 01       	movw	r30, r28
    2064:	e4 55       	subi	r30, 0x54	; 84
    2066:	ff 4f       	sbci	r31, 0xFF	; 255
    2068:	10 82       	st	Z, r1
    206a:	16 c0       	rjmp	.+44     	; 0x2098 <main+0xa3a>
		bufferin[i] = 0;
    206c:	fe 01       	movw	r30, r28
    206e:	e4 55       	subi	r30, 0x54	; 84
    2070:	ff 4f       	sbci	r31, 0xFF	; 255
    2072:	80 81       	ld	r24, Z
    2074:	28 2f       	mov	r18, r24
    2076:	30 e0       	ldi	r19, 0x00	; 0
    2078:	ce 01       	movw	r24, r28
    207a:	82 54       	subi	r24, 0x42	; 66
    207c:	9f 4f       	sbci	r25, 0xFF	; 255
    207e:	fc 01       	movw	r30, r24
    2080:	e2 0f       	add	r30, r18
    2082:	f3 1f       	adc	r31, r19
    2084:	10 82       	st	Z, r1
	#endif

	//setup buffer
	for(i=0; i<sizeof(bufferout); i++)
		bufferout[i] = i+'a';
	for(i=0; i<sizeof(bufferin); i++)
    2086:	de 01       	movw	r26, r28
    2088:	a4 55       	subi	r26, 0x54	; 84
    208a:	bf 4f       	sbci	r27, 0xFF	; 255
    208c:	fe 01       	movw	r30, r28
    208e:	e4 55       	subi	r30, 0x54	; 84
    2090:	ff 4f       	sbci	r31, 0xFF	; 255
    2092:	80 81       	ld	r24, Z
    2094:	8f 5f       	subi	r24, 0xFF	; 255
    2096:	8c 93       	st	X, r24
    2098:	fe 01       	movw	r30, r28
    209a:	e4 55       	subi	r30, 0x54	; 84
    209c:	ff 4f       	sbci	r31, 0xFF	; 255
    209e:	80 81       	ld	r24, Z
    20a0:	80 31       	cpi	r24, 0x10	; 16
    20a2:	20 f3       	brcs	.-56     	; 0x206c <main+0xa0e>
		bufferin[i] = 0;

	//sending buffer addresses
	uint8_t sendpipe = 0;
    20a4:	fe 01       	movw	r30, r28
    20a6:	e5 55       	subi	r30, 0x55	; 85
    20a8:	ff 4f       	sbci	r31, 0xFF	; 255
    20aa:	10 82       	st	Z, r1
	uint8_t addrtx0[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP0;
    20ac:	ce 01       	movw	r24, r28
    20ae:	82 53       	subi	r24, 0x32	; 50
    20b0:	9f 4f       	sbci	r25, 0xFF	; 255
    20b2:	c9 50       	subi	r28, 0x09	; 9
    20b4:	df 4f       	sbci	r29, 0xFF	; 255
    20b6:	99 83       	std	Y+1, r25	; 0x01
    20b8:	88 83       	st	Y, r24
    20ba:	c7 5f       	subi	r28, 0xF7	; 247
    20bc:	d0 40       	sbci	r29, 0x00	; 0
    20be:	86 eb       	ldi	r24, 0xB6	; 182
    20c0:	91 e0       	ldi	r25, 0x01	; 1
    20c2:	c7 50       	subi	r28, 0x07	; 7
    20c4:	df 4f       	sbci	r29, 0xFF	; 255
    20c6:	99 83       	std	Y+1, r25	; 0x01
    20c8:	88 83       	st	Y, r24
    20ca:	c9 5f       	subi	r28, 0xF9	; 249
    20cc:	d0 40       	sbci	r29, 0x00	; 0
    20ce:	95 e0       	ldi	r25, 0x05	; 5
    20d0:	c5 50       	subi	r28, 0x05	; 5
    20d2:	df 4f       	sbci	r29, 0xFF	; 255
    20d4:	98 83       	st	Y, r25
    20d6:	cb 5f       	subi	r28, 0xFB	; 251
    20d8:	d0 40       	sbci	r29, 0x00	; 0
    20da:	c7 50       	subi	r28, 0x07	; 7
    20dc:	df 4f       	sbci	r29, 0xFF	; 255
    20de:	e8 81       	ld	r30, Y
    20e0:	f9 81       	ldd	r31, Y+1	; 0x01
    20e2:	c9 5f       	subi	r28, 0xF9	; 249
    20e4:	d0 40       	sbci	r29, 0x00	; 0
    20e6:	00 80       	ld	r0, Z
    20e8:	c7 50       	subi	r28, 0x07	; 7
    20ea:	df 4f       	sbci	r29, 0xFF	; 255
    20ec:	88 81       	ld	r24, Y
    20ee:	99 81       	ldd	r25, Y+1	; 0x01
    20f0:	c9 5f       	subi	r28, 0xF9	; 249
    20f2:	d0 40       	sbci	r29, 0x00	; 0
    20f4:	01 96       	adiw	r24, 0x01	; 1
    20f6:	c7 50       	subi	r28, 0x07	; 7
    20f8:	df 4f       	sbci	r29, 0xFF	; 255
    20fa:	99 83       	std	Y+1, r25	; 0x01
    20fc:	88 83       	st	Y, r24
    20fe:	c9 5f       	subi	r28, 0xF9	; 249
    2100:	d0 40       	sbci	r29, 0x00	; 0
    2102:	c9 50       	subi	r28, 0x09	; 9
    2104:	df 4f       	sbci	r29, 0xFF	; 255
    2106:	e8 81       	ld	r30, Y
    2108:	f9 81       	ldd	r31, Y+1	; 0x01
    210a:	c7 5f       	subi	r28, 0xF7	; 247
    210c:	d0 40       	sbci	r29, 0x00	; 0
    210e:	00 82       	st	Z, r0
    2110:	c9 50       	subi	r28, 0x09	; 9
    2112:	df 4f       	sbci	r29, 0xFF	; 255
    2114:	88 81       	ld	r24, Y
    2116:	99 81       	ldd	r25, Y+1	; 0x01
    2118:	c7 5f       	subi	r28, 0xF7	; 247
    211a:	d0 40       	sbci	r29, 0x00	; 0
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	c9 50       	subi	r28, 0x09	; 9
    2120:	df 4f       	sbci	r29, 0xFF	; 255
    2122:	99 83       	std	Y+1, r25	; 0x01
    2124:	88 83       	st	Y, r24
    2126:	c7 5f       	subi	r28, 0xF7	; 247
    2128:	d0 40       	sbci	r29, 0x00	; 0
    212a:	c5 50       	subi	r28, 0x05	; 5
    212c:	df 4f       	sbci	r29, 0xFF	; 255
    212e:	98 81       	ld	r25, Y
    2130:	cb 5f       	subi	r28, 0xFB	; 251
    2132:	d0 40       	sbci	r29, 0x00	; 0
    2134:	91 50       	subi	r25, 0x01	; 1
    2136:	c5 50       	subi	r28, 0x05	; 5
    2138:	df 4f       	sbci	r29, 0xFF	; 255
    213a:	98 83       	st	Y, r25
    213c:	cb 5f       	subi	r28, 0xFB	; 251
    213e:	d0 40       	sbci	r29, 0x00	; 0
    2140:	c5 50       	subi	r28, 0x05	; 5
    2142:	df 4f       	sbci	r29, 0xFF	; 255
    2144:	e8 81       	ld	r30, Y
    2146:	cb 5f       	subi	r28, 0xFB	; 251
    2148:	d0 40       	sbci	r29, 0x00	; 0
    214a:	ee 23       	and	r30, r30
    214c:	31 f6       	brne	.-116    	; 0x20da <main+0xa7c>
	uint8_t addrtx1[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP1;
    214e:	ce 01       	movw	r24, r28
    2150:	8d 52       	subi	r24, 0x2D	; 45
    2152:	9f 4f       	sbci	r25, 0xFF	; 255
    2154:	c4 50       	subi	r28, 0x04	; 4
    2156:	df 4f       	sbci	r29, 0xFF	; 255
    2158:	99 83       	std	Y+1, r25	; 0x01
    215a:	88 83       	st	Y, r24
    215c:	cc 5f       	subi	r28, 0xFC	; 252
    215e:	d0 40       	sbci	r29, 0x00	; 0
    2160:	81 eb       	ldi	r24, 0xB1	; 177
    2162:	91 e0       	ldi	r25, 0x01	; 1
    2164:	c2 50       	subi	r28, 0x02	; 2
    2166:	df 4f       	sbci	r29, 0xFF	; 255
    2168:	99 83       	std	Y+1, r25	; 0x01
    216a:	88 83       	st	Y, r24
    216c:	ce 5f       	subi	r28, 0xFE	; 254
    216e:	d0 40       	sbci	r29, 0x00	; 0
    2170:	95 e0       	ldi	r25, 0x05	; 5
    2172:	c0 50       	subi	r28, 0x00	; 0
    2174:	df 4f       	sbci	r29, 0xFF	; 255
    2176:	98 83       	st	Y, r25
    2178:	c0 50       	subi	r28, 0x00	; 0
    217a:	d1 40       	sbci	r29, 0x01	; 1
    217c:	c2 50       	subi	r28, 0x02	; 2
    217e:	df 4f       	sbci	r29, 0xFF	; 255
    2180:	e8 81       	ld	r30, Y
    2182:	f9 81       	ldd	r31, Y+1	; 0x01
    2184:	ce 5f       	subi	r28, 0xFE	; 254
    2186:	d0 40       	sbci	r29, 0x00	; 0
    2188:	00 80       	ld	r0, Z
    218a:	c2 50       	subi	r28, 0x02	; 2
    218c:	df 4f       	sbci	r29, 0xFF	; 255
    218e:	88 81       	ld	r24, Y
    2190:	99 81       	ldd	r25, Y+1	; 0x01
    2192:	ce 5f       	subi	r28, 0xFE	; 254
    2194:	d0 40       	sbci	r29, 0x00	; 0
    2196:	01 96       	adiw	r24, 0x01	; 1
    2198:	c2 50       	subi	r28, 0x02	; 2
    219a:	df 4f       	sbci	r29, 0xFF	; 255
    219c:	99 83       	std	Y+1, r25	; 0x01
    219e:	88 83       	st	Y, r24
    21a0:	ce 5f       	subi	r28, 0xFE	; 254
    21a2:	d0 40       	sbci	r29, 0x00	; 0
    21a4:	c4 50       	subi	r28, 0x04	; 4
    21a6:	df 4f       	sbci	r29, 0xFF	; 255
    21a8:	e8 81       	ld	r30, Y
    21aa:	f9 81       	ldd	r31, Y+1	; 0x01
    21ac:	cc 5f       	subi	r28, 0xFC	; 252
    21ae:	d0 40       	sbci	r29, 0x00	; 0
    21b0:	00 82       	st	Z, r0
    21b2:	c4 50       	subi	r28, 0x04	; 4
    21b4:	df 4f       	sbci	r29, 0xFF	; 255
    21b6:	88 81       	ld	r24, Y
    21b8:	99 81       	ldd	r25, Y+1	; 0x01
    21ba:	cc 5f       	subi	r28, 0xFC	; 252
    21bc:	d0 40       	sbci	r29, 0x00	; 0
    21be:	01 96       	adiw	r24, 0x01	; 1
    21c0:	c4 50       	subi	r28, 0x04	; 4
    21c2:	df 4f       	sbci	r29, 0xFF	; 255
    21c4:	99 83       	std	Y+1, r25	; 0x01
    21c6:	88 83       	st	Y, r24
    21c8:	cc 5f       	subi	r28, 0xFC	; 252
    21ca:	d0 40       	sbci	r29, 0x00	; 0
    21cc:	c0 50       	subi	r28, 0x00	; 0
    21ce:	df 4f       	sbci	r29, 0xFF	; 255
    21d0:	98 81       	ld	r25, Y
    21d2:	c0 50       	subi	r28, 0x00	; 0
    21d4:	d1 40       	sbci	r29, 0x01	; 1
    21d6:	91 50       	subi	r25, 0x01	; 1
    21d8:	c0 50       	subi	r28, 0x00	; 0
    21da:	df 4f       	sbci	r29, 0xFF	; 255
    21dc:	98 83       	st	Y, r25
    21de:	c0 50       	subi	r28, 0x00	; 0
    21e0:	d1 40       	sbci	r29, 0x01	; 1
    21e2:	c0 50       	subi	r28, 0x00	; 0
    21e4:	df 4f       	sbci	r29, 0xFF	; 255
    21e6:	e8 81       	ld	r30, Y
    21e8:	c0 50       	subi	r28, 0x00	; 0
    21ea:	d1 40       	sbci	r29, 0x01	; 1
    21ec:	ee 23       	and	r30, r30
    21ee:	31 f6       	brne	.-116    	; 0x217c <main+0xb1e>
	uint8_t addrtx2[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP2;
    21f0:	ce 01       	movw	r24, r28
    21f2:	88 52       	subi	r24, 0x28	; 40
    21f4:	9f 4f       	sbci	r25, 0xFF	; 255
    21f6:	cf 5f       	subi	r28, 0xFF	; 255
    21f8:	de 4f       	sbci	r29, 0xFE	; 254
    21fa:	99 83       	std	Y+1, r25	; 0x01
    21fc:	88 83       	st	Y, r24
    21fe:	c1 50       	subi	r28, 0x01	; 1
    2200:	d1 40       	sbci	r29, 0x01	; 1
    2202:	8c ea       	ldi	r24, 0xAC	; 172
    2204:	91 e0       	ldi	r25, 0x01	; 1
    2206:	cd 5f       	subi	r28, 0xFD	; 253
    2208:	de 4f       	sbci	r29, 0xFE	; 254
    220a:	99 83       	std	Y+1, r25	; 0x01
    220c:	88 83       	st	Y, r24
    220e:	c3 50       	subi	r28, 0x03	; 3
    2210:	d1 40       	sbci	r29, 0x01	; 1
    2212:	95 e0       	ldi	r25, 0x05	; 5
    2214:	cb 5f       	subi	r28, 0xFB	; 251
    2216:	de 4f       	sbci	r29, 0xFE	; 254
    2218:	98 83       	st	Y, r25
    221a:	c5 50       	subi	r28, 0x05	; 5
    221c:	d1 40       	sbci	r29, 0x01	; 1
    221e:	cd 5f       	subi	r28, 0xFD	; 253
    2220:	de 4f       	sbci	r29, 0xFE	; 254
    2222:	e8 81       	ld	r30, Y
    2224:	f9 81       	ldd	r31, Y+1	; 0x01
    2226:	c3 50       	subi	r28, 0x03	; 3
    2228:	d1 40       	sbci	r29, 0x01	; 1
    222a:	00 80       	ld	r0, Z
    222c:	cd 5f       	subi	r28, 0xFD	; 253
    222e:	de 4f       	sbci	r29, 0xFE	; 254
    2230:	88 81       	ld	r24, Y
    2232:	99 81       	ldd	r25, Y+1	; 0x01
    2234:	c3 50       	subi	r28, 0x03	; 3
    2236:	d1 40       	sbci	r29, 0x01	; 1
    2238:	01 96       	adiw	r24, 0x01	; 1
    223a:	cd 5f       	subi	r28, 0xFD	; 253
    223c:	de 4f       	sbci	r29, 0xFE	; 254
    223e:	99 83       	std	Y+1, r25	; 0x01
    2240:	88 83       	st	Y, r24
    2242:	c3 50       	subi	r28, 0x03	; 3
    2244:	d1 40       	sbci	r29, 0x01	; 1
    2246:	cf 5f       	subi	r28, 0xFF	; 255
    2248:	de 4f       	sbci	r29, 0xFE	; 254
    224a:	e8 81       	ld	r30, Y
    224c:	f9 81       	ldd	r31, Y+1	; 0x01
    224e:	c1 50       	subi	r28, 0x01	; 1
    2250:	d1 40       	sbci	r29, 0x01	; 1
    2252:	00 82       	st	Z, r0
    2254:	cf 5f       	subi	r28, 0xFF	; 255
    2256:	de 4f       	sbci	r29, 0xFE	; 254
    2258:	88 81       	ld	r24, Y
    225a:	99 81       	ldd	r25, Y+1	; 0x01
    225c:	c1 50       	subi	r28, 0x01	; 1
    225e:	d1 40       	sbci	r29, 0x01	; 1
    2260:	01 96       	adiw	r24, 0x01	; 1
    2262:	cf 5f       	subi	r28, 0xFF	; 255
    2264:	de 4f       	sbci	r29, 0xFE	; 254
    2266:	99 83       	std	Y+1, r25	; 0x01
    2268:	88 83       	st	Y, r24
    226a:	c1 50       	subi	r28, 0x01	; 1
    226c:	d1 40       	sbci	r29, 0x01	; 1
    226e:	cb 5f       	subi	r28, 0xFB	; 251
    2270:	de 4f       	sbci	r29, 0xFE	; 254
    2272:	98 81       	ld	r25, Y
    2274:	c5 50       	subi	r28, 0x05	; 5
    2276:	d1 40       	sbci	r29, 0x01	; 1
    2278:	91 50       	subi	r25, 0x01	; 1
    227a:	cb 5f       	subi	r28, 0xFB	; 251
    227c:	de 4f       	sbci	r29, 0xFE	; 254
    227e:	98 83       	st	Y, r25
    2280:	c5 50       	subi	r28, 0x05	; 5
    2282:	d1 40       	sbci	r29, 0x01	; 1
    2284:	cb 5f       	subi	r28, 0xFB	; 251
    2286:	de 4f       	sbci	r29, 0xFE	; 254
    2288:	e8 81       	ld	r30, Y
    228a:	c5 50       	subi	r28, 0x05	; 5
    228c:	d1 40       	sbci	r29, 0x01	; 1
    228e:	ee 23       	and	r30, r30
    2290:	31 f6       	brne	.-116    	; 0x221e <main+0xbc0>
	uint8_t addrtx3[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP3;
    2292:	ce 01       	movw	r24, r28
    2294:	83 52       	subi	r24, 0x23	; 35
    2296:	9f 4f       	sbci	r25, 0xFF	; 255
    2298:	ca 5f       	subi	r28, 0xFA	; 250
    229a:	de 4f       	sbci	r29, 0xFE	; 254
    229c:	99 83       	std	Y+1, r25	; 0x01
    229e:	88 83       	st	Y, r24
    22a0:	c6 50       	subi	r28, 0x06	; 6
    22a2:	d1 40       	sbci	r29, 0x01	; 1
    22a4:	87 ea       	ldi	r24, 0xA7	; 167
    22a6:	91 e0       	ldi	r25, 0x01	; 1
    22a8:	c8 5f       	subi	r28, 0xF8	; 248
    22aa:	de 4f       	sbci	r29, 0xFE	; 254
    22ac:	99 83       	std	Y+1, r25	; 0x01
    22ae:	88 83       	st	Y, r24
    22b0:	c8 50       	subi	r28, 0x08	; 8
    22b2:	d1 40       	sbci	r29, 0x01	; 1
    22b4:	95 e0       	ldi	r25, 0x05	; 5
    22b6:	c6 5f       	subi	r28, 0xF6	; 246
    22b8:	de 4f       	sbci	r29, 0xFE	; 254
    22ba:	98 83       	st	Y, r25
    22bc:	ca 50       	subi	r28, 0x0A	; 10
    22be:	d1 40       	sbci	r29, 0x01	; 1
    22c0:	c8 5f       	subi	r28, 0xF8	; 248
    22c2:	de 4f       	sbci	r29, 0xFE	; 254
    22c4:	e8 81       	ld	r30, Y
    22c6:	f9 81       	ldd	r31, Y+1	; 0x01
    22c8:	c8 50       	subi	r28, 0x08	; 8
    22ca:	d1 40       	sbci	r29, 0x01	; 1
    22cc:	00 80       	ld	r0, Z
    22ce:	c8 5f       	subi	r28, 0xF8	; 248
    22d0:	de 4f       	sbci	r29, 0xFE	; 254
    22d2:	88 81       	ld	r24, Y
    22d4:	99 81       	ldd	r25, Y+1	; 0x01
    22d6:	c8 50       	subi	r28, 0x08	; 8
    22d8:	d1 40       	sbci	r29, 0x01	; 1
    22da:	01 96       	adiw	r24, 0x01	; 1
    22dc:	c8 5f       	subi	r28, 0xF8	; 248
    22de:	de 4f       	sbci	r29, 0xFE	; 254
    22e0:	99 83       	std	Y+1, r25	; 0x01
    22e2:	88 83       	st	Y, r24
    22e4:	c8 50       	subi	r28, 0x08	; 8
    22e6:	d1 40       	sbci	r29, 0x01	; 1
    22e8:	ca 5f       	subi	r28, 0xFA	; 250
    22ea:	de 4f       	sbci	r29, 0xFE	; 254
    22ec:	e8 81       	ld	r30, Y
    22ee:	f9 81       	ldd	r31, Y+1	; 0x01
    22f0:	c6 50       	subi	r28, 0x06	; 6
    22f2:	d1 40       	sbci	r29, 0x01	; 1
    22f4:	00 82       	st	Z, r0
    22f6:	ca 5f       	subi	r28, 0xFA	; 250
    22f8:	de 4f       	sbci	r29, 0xFE	; 254
    22fa:	88 81       	ld	r24, Y
    22fc:	99 81       	ldd	r25, Y+1	; 0x01
    22fe:	c6 50       	subi	r28, 0x06	; 6
    2300:	d1 40       	sbci	r29, 0x01	; 1
    2302:	01 96       	adiw	r24, 0x01	; 1
    2304:	ca 5f       	subi	r28, 0xFA	; 250
    2306:	de 4f       	sbci	r29, 0xFE	; 254
    2308:	99 83       	std	Y+1, r25	; 0x01
    230a:	88 83       	st	Y, r24
    230c:	c6 50       	subi	r28, 0x06	; 6
    230e:	d1 40       	sbci	r29, 0x01	; 1
    2310:	c6 5f       	subi	r28, 0xF6	; 246
    2312:	de 4f       	sbci	r29, 0xFE	; 254
    2314:	98 81       	ld	r25, Y
    2316:	ca 50       	subi	r28, 0x0A	; 10
    2318:	d1 40       	sbci	r29, 0x01	; 1
    231a:	91 50       	subi	r25, 0x01	; 1
    231c:	c6 5f       	subi	r28, 0xF6	; 246
    231e:	de 4f       	sbci	r29, 0xFE	; 254
    2320:	98 83       	st	Y, r25
    2322:	ca 50       	subi	r28, 0x0A	; 10
    2324:	d1 40       	sbci	r29, 0x01	; 1
    2326:	c6 5f       	subi	r28, 0xF6	; 246
    2328:	de 4f       	sbci	r29, 0xFE	; 254
    232a:	e8 81       	ld	r30, Y
    232c:	ca 50       	subi	r28, 0x0A	; 10
    232e:	d1 40       	sbci	r29, 0x01	; 1
    2330:	ee 23       	and	r30, r30
    2332:	31 f6       	brne	.-116    	; 0x22c0 <main+0xc62>
	uint8_t addrtx4[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP4;
    2334:	ce 01       	movw	r24, r28
    2336:	8e 51       	subi	r24, 0x1E	; 30
    2338:	9f 4f       	sbci	r25, 0xFF	; 255
    233a:	c5 5f       	subi	r28, 0xF5	; 245
    233c:	de 4f       	sbci	r29, 0xFE	; 254
    233e:	99 83       	std	Y+1, r25	; 0x01
    2340:	88 83       	st	Y, r24
    2342:	cb 50       	subi	r28, 0x0B	; 11
    2344:	d1 40       	sbci	r29, 0x01	; 1
    2346:	82 ea       	ldi	r24, 0xA2	; 162
    2348:	91 e0       	ldi	r25, 0x01	; 1
    234a:	c3 5f       	subi	r28, 0xF3	; 243
    234c:	de 4f       	sbci	r29, 0xFE	; 254
    234e:	99 83       	std	Y+1, r25	; 0x01
    2350:	88 83       	st	Y, r24
    2352:	cd 50       	subi	r28, 0x0D	; 13
    2354:	d1 40       	sbci	r29, 0x01	; 1
    2356:	95 e0       	ldi	r25, 0x05	; 5
    2358:	c1 5f       	subi	r28, 0xF1	; 241
    235a:	de 4f       	sbci	r29, 0xFE	; 254
    235c:	98 83       	st	Y, r25
    235e:	cf 50       	subi	r28, 0x0F	; 15
    2360:	d1 40       	sbci	r29, 0x01	; 1
    2362:	c3 5f       	subi	r28, 0xF3	; 243
    2364:	de 4f       	sbci	r29, 0xFE	; 254
    2366:	e8 81       	ld	r30, Y
    2368:	f9 81       	ldd	r31, Y+1	; 0x01
    236a:	cd 50       	subi	r28, 0x0D	; 13
    236c:	d1 40       	sbci	r29, 0x01	; 1
    236e:	00 80       	ld	r0, Z
    2370:	c3 5f       	subi	r28, 0xF3	; 243
    2372:	de 4f       	sbci	r29, 0xFE	; 254
    2374:	88 81       	ld	r24, Y
    2376:	99 81       	ldd	r25, Y+1	; 0x01
    2378:	cd 50       	subi	r28, 0x0D	; 13
    237a:	d1 40       	sbci	r29, 0x01	; 1
    237c:	01 96       	adiw	r24, 0x01	; 1
    237e:	c3 5f       	subi	r28, 0xF3	; 243
    2380:	de 4f       	sbci	r29, 0xFE	; 254
    2382:	99 83       	std	Y+1, r25	; 0x01
    2384:	88 83       	st	Y, r24
    2386:	cd 50       	subi	r28, 0x0D	; 13
    2388:	d1 40       	sbci	r29, 0x01	; 1
    238a:	c5 5f       	subi	r28, 0xF5	; 245
    238c:	de 4f       	sbci	r29, 0xFE	; 254
    238e:	e8 81       	ld	r30, Y
    2390:	f9 81       	ldd	r31, Y+1	; 0x01
    2392:	cb 50       	subi	r28, 0x0B	; 11
    2394:	d1 40       	sbci	r29, 0x01	; 1
    2396:	00 82       	st	Z, r0
    2398:	c5 5f       	subi	r28, 0xF5	; 245
    239a:	de 4f       	sbci	r29, 0xFE	; 254
    239c:	88 81       	ld	r24, Y
    239e:	99 81       	ldd	r25, Y+1	; 0x01
    23a0:	cb 50       	subi	r28, 0x0B	; 11
    23a2:	d1 40       	sbci	r29, 0x01	; 1
    23a4:	01 96       	adiw	r24, 0x01	; 1
    23a6:	c5 5f       	subi	r28, 0xF5	; 245
    23a8:	de 4f       	sbci	r29, 0xFE	; 254
    23aa:	99 83       	std	Y+1, r25	; 0x01
    23ac:	88 83       	st	Y, r24
    23ae:	cb 50       	subi	r28, 0x0B	; 11
    23b0:	d1 40       	sbci	r29, 0x01	; 1
    23b2:	c1 5f       	subi	r28, 0xF1	; 241
    23b4:	de 4f       	sbci	r29, 0xFE	; 254
    23b6:	98 81       	ld	r25, Y
    23b8:	cf 50       	subi	r28, 0x0F	; 15
    23ba:	d1 40       	sbci	r29, 0x01	; 1
    23bc:	91 50       	subi	r25, 0x01	; 1
    23be:	c1 5f       	subi	r28, 0xF1	; 241
    23c0:	de 4f       	sbci	r29, 0xFE	; 254
    23c2:	98 83       	st	Y, r25
    23c4:	cf 50       	subi	r28, 0x0F	; 15
    23c6:	d1 40       	sbci	r29, 0x01	; 1
    23c8:	c1 5f       	subi	r28, 0xF1	; 241
    23ca:	de 4f       	sbci	r29, 0xFE	; 254
    23cc:	e8 81       	ld	r30, Y
    23ce:	cf 50       	subi	r28, 0x0F	; 15
    23d0:	d1 40       	sbci	r29, 0x01	; 1
    23d2:	ee 23       	and	r30, r30
    23d4:	31 f6       	brne	.-116    	; 0x2362 <main+0xd04>
	uint8_t addrtx5[NRF24L01_ADDRSIZE] = NRF24L01_ADDRP5;
    23d6:	ce 01       	movw	r24, r28
    23d8:	89 51       	subi	r24, 0x19	; 25
    23da:	9f 4f       	sbci	r25, 0xFF	; 255
    23dc:	c0 5f       	subi	r28, 0xF0	; 240
    23de:	de 4f       	sbci	r29, 0xFE	; 254
    23e0:	99 83       	std	Y+1, r25	; 0x01
    23e2:	88 83       	st	Y, r24
    23e4:	c0 51       	subi	r28, 0x10	; 16
    23e6:	d1 40       	sbci	r29, 0x01	; 1
    23e8:	8d e9       	ldi	r24, 0x9D	; 157
    23ea:	91 e0       	ldi	r25, 0x01	; 1
    23ec:	ce 5e       	subi	r28, 0xEE	; 238
    23ee:	de 4f       	sbci	r29, 0xFE	; 254
    23f0:	99 83       	std	Y+1, r25	; 0x01
    23f2:	88 83       	st	Y, r24
    23f4:	c2 51       	subi	r28, 0x12	; 18
    23f6:	d1 40       	sbci	r29, 0x01	; 1
    23f8:	95 e0       	ldi	r25, 0x05	; 5
    23fa:	cc 5e       	subi	r28, 0xEC	; 236
    23fc:	de 4f       	sbci	r29, 0xFE	; 254
    23fe:	98 83       	st	Y, r25
    2400:	c4 51       	subi	r28, 0x14	; 20
    2402:	d1 40       	sbci	r29, 0x01	; 1
    2404:	ce 5e       	subi	r28, 0xEE	; 238
    2406:	de 4f       	sbci	r29, 0xFE	; 254
    2408:	e8 81       	ld	r30, Y
    240a:	f9 81       	ldd	r31, Y+1	; 0x01
    240c:	c2 51       	subi	r28, 0x12	; 18
    240e:	d1 40       	sbci	r29, 0x01	; 1
    2410:	00 80       	ld	r0, Z
    2412:	ce 5e       	subi	r28, 0xEE	; 238
    2414:	de 4f       	sbci	r29, 0xFE	; 254
    2416:	88 81       	ld	r24, Y
    2418:	99 81       	ldd	r25, Y+1	; 0x01
    241a:	c2 51       	subi	r28, 0x12	; 18
    241c:	d1 40       	sbci	r29, 0x01	; 1
    241e:	01 96       	adiw	r24, 0x01	; 1
    2420:	ce 5e       	subi	r28, 0xEE	; 238
    2422:	de 4f       	sbci	r29, 0xFE	; 254
    2424:	99 83       	std	Y+1, r25	; 0x01
    2426:	88 83       	st	Y, r24
    2428:	c2 51       	subi	r28, 0x12	; 18
    242a:	d1 40       	sbci	r29, 0x01	; 1
    242c:	c0 5f       	subi	r28, 0xF0	; 240
    242e:	de 4f       	sbci	r29, 0xFE	; 254
    2430:	e8 81       	ld	r30, Y
    2432:	f9 81       	ldd	r31, Y+1	; 0x01
    2434:	c0 51       	subi	r28, 0x10	; 16
    2436:	d1 40       	sbci	r29, 0x01	; 1
    2438:	00 82       	st	Z, r0
    243a:	c0 5f       	subi	r28, 0xF0	; 240
    243c:	de 4f       	sbci	r29, 0xFE	; 254
    243e:	88 81       	ld	r24, Y
    2440:	99 81       	ldd	r25, Y+1	; 0x01
    2442:	c0 51       	subi	r28, 0x10	; 16
    2444:	d1 40       	sbci	r29, 0x01	; 1
    2446:	01 96       	adiw	r24, 0x01	; 1
    2448:	c0 5f       	subi	r28, 0xF0	; 240
    244a:	de 4f       	sbci	r29, 0xFE	; 254
    244c:	99 83       	std	Y+1, r25	; 0x01
    244e:	88 83       	st	Y, r24
    2450:	c0 51       	subi	r28, 0x10	; 16
    2452:	d1 40       	sbci	r29, 0x01	; 1
    2454:	cc 5e       	subi	r28, 0xEC	; 236
    2456:	de 4f       	sbci	r29, 0xFE	; 254
    2458:	98 81       	ld	r25, Y
    245a:	c4 51       	subi	r28, 0x14	; 20
    245c:	d1 40       	sbci	r29, 0x01	; 1
    245e:	91 50       	subi	r25, 0x01	; 1
    2460:	cc 5e       	subi	r28, 0xEC	; 236
    2462:	de 4f       	sbci	r29, 0xFE	; 254
    2464:	98 83       	st	Y, r25
    2466:	c4 51       	subi	r28, 0x14	; 20
    2468:	d1 40       	sbci	r29, 0x01	; 1
    246a:	cc 5e       	subi	r28, 0xEC	; 236
    246c:	de 4f       	sbci	r29, 0xFE	; 254
    246e:	e8 81       	ld	r30, Y
    2470:	c4 51       	subi	r28, 0x14	; 20
    2472:	d1 40       	sbci	r29, 0x01	; 1
    2474:	ee 23       	and	r30, r30
    2476:	31 f6       	brne	.-116    	; 0x2404 <main+0xda6>

	#if DEBUGENABLED == 1 && NRF24L01_PRINTENABLE == 1
		nrf24l01_printinfo(uart_puts, uart_putc);
    2478:	89 ee       	ldi	r24, 0xE9	; 233
    247a:	9a e0       	ldi	r25, 0x0A	; 10
    247c:	22 ec       	ldi	r18, 0xC2	; 194
    247e:	3a e0       	ldi	r19, 0x0A	; 10
    2480:	b9 01       	movw	r22, r18
    2482:	0e 94 3d 04 	call	0x87a	; 0x87a <nrf24l01_printinfo>
	#endif

	//main loop
	for(;;) {
		if(txrxrole == ROLETX) {
    2486:	fe 01       	movw	r30, r28
    2488:	e3 55       	subi	r30, 0x53	; 83
    248a:	ff 4f       	sbci	r31, 0xFF	; 255
    248c:	80 81       	ld	r24, Z
    248e:	81 30       	cpi	r24, 0x01	; 1
    2490:	09 f0       	breq	.+2      	; 0x2494 <main+0xe36>
    2492:	49 c2       	rjmp	.+1170   	; 0x2926 <main+0x12c8>
			if ((BUTTONSEND_PIN & (1<<BUTTONSEND)) != 0) { //if button pressed
			#endif

				#if DEBUGENABLED == 1
				char pipebuffer[5];
				uart_puts("sending data, on pipe ");
    2494:	83 ee       	ldi	r24, 0xE3	; 227
    2496:	91 e0       	ldi	r25, 0x01	; 1
    2498:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				itoa(sendpipe, pipebuffer, 10);
    249c:	fe 01       	movw	r30, r28
    249e:	e5 55       	subi	r30, 0x55	; 85
    24a0:	ff 4f       	sbci	r31, 0xFF	; 255
    24a2:	80 81       	ld	r24, Z
    24a4:	88 2f       	mov	r24, r24
    24a6:	90 e0       	ldi	r25, 0x00	; 0
    24a8:	9e 01       	movw	r18, r28
    24aa:	24 51       	subi	r18, 0x14	; 20
    24ac:	3f 4f       	sbci	r19, 0xFF	; 255
    24ae:	b9 01       	movw	r22, r18
    24b0:	4a e0       	ldi	r20, 0x0A	; 10
    24b2:	50 e0       	ldi	r21, 0x00	; 0
    24b4:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <itoa>
				uart_puts(pipebuffer);
    24b8:	ce 01       	movw	r24, r28
    24ba:	84 51       	subi	r24, 0x14	; 20
    24bc:	9f 4f       	sbci	r25, 0xFF	; 255
    24be:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				uart_puts("... ");
    24c2:	8a ef       	ldi	r24, 0xFA	; 250
    24c4:	91 e0       	ldi	r25, 0x01	; 1
    24c6:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				#endif

				if(sendpipe == 0) {
    24ca:	fe 01       	movw	r30, r28
    24cc:	e5 55       	subi	r30, 0x55	; 85
    24ce:	ff 4f       	sbci	r31, 0xFF	; 255
    24d0:	80 81       	ld	r24, Z
    24d2:	88 23       	and	r24, r24
    24d4:	31 f4       	brne	.+12     	; 0x24e2 <main+0xe84>
					//set tx address for pipe 0
					nrf24l01_settxaddr(addrtx0);
    24d6:	ce 01       	movw	r24, r28
    24d8:	82 53       	subi	r24, 0x32	; 50
    24da:	9f 4f       	sbci	r25, 0xFF	; 255
    24dc:	0e 94 ef 01 	call	0x3de	; 0x3de <nrf24l01_settxaddr>
    24e0:	3b c0       	rjmp	.+118    	; 0x2558 <main+0xefa>
				} else if(sendpipe == 1) {
    24e2:	fe 01       	movw	r30, r28
    24e4:	e5 55       	subi	r30, 0x55	; 85
    24e6:	ff 4f       	sbci	r31, 0xFF	; 255
    24e8:	80 81       	ld	r24, Z
    24ea:	81 30       	cpi	r24, 0x01	; 1
    24ec:	31 f4       	brne	.+12     	; 0x24fa <main+0xe9c>
					//set tx address for pipe 1
					nrf24l01_settxaddr(addrtx1);
    24ee:	ce 01       	movw	r24, r28
    24f0:	8d 52       	subi	r24, 0x2D	; 45
    24f2:	9f 4f       	sbci	r25, 0xFF	; 255
    24f4:	0e 94 ef 01 	call	0x3de	; 0x3de <nrf24l01_settxaddr>
    24f8:	2f c0       	rjmp	.+94     	; 0x2558 <main+0xefa>
				} else if(sendpipe == 2) {
    24fa:	fe 01       	movw	r30, r28
    24fc:	e5 55       	subi	r30, 0x55	; 85
    24fe:	ff 4f       	sbci	r31, 0xFF	; 255
    2500:	80 81       	ld	r24, Z
    2502:	82 30       	cpi	r24, 0x02	; 2
    2504:	31 f4       	brne	.+12     	; 0x2512 <main+0xeb4>
					//set tx address for pipe 2
					nrf24l01_settxaddr(addrtx2);
    2506:	ce 01       	movw	r24, r28
    2508:	88 52       	subi	r24, 0x28	; 40
    250a:	9f 4f       	sbci	r25, 0xFF	; 255
    250c:	0e 94 ef 01 	call	0x3de	; 0x3de <nrf24l01_settxaddr>
    2510:	23 c0       	rjmp	.+70     	; 0x2558 <main+0xefa>
				} else if(sendpipe == 3) {
    2512:	fe 01       	movw	r30, r28
    2514:	e5 55       	subi	r30, 0x55	; 85
    2516:	ff 4f       	sbci	r31, 0xFF	; 255
    2518:	80 81       	ld	r24, Z
    251a:	83 30       	cpi	r24, 0x03	; 3
    251c:	31 f4       	brne	.+12     	; 0x252a <main+0xecc>
					//set tx address for pipe 3
					nrf24l01_settxaddr(addrtx3);
    251e:	ce 01       	movw	r24, r28
    2520:	83 52       	subi	r24, 0x23	; 35
    2522:	9f 4f       	sbci	r25, 0xFF	; 255
    2524:	0e 94 ef 01 	call	0x3de	; 0x3de <nrf24l01_settxaddr>
    2528:	17 c0       	rjmp	.+46     	; 0x2558 <main+0xefa>
				} else if(sendpipe == 4) {
    252a:	fe 01       	movw	r30, r28
    252c:	e5 55       	subi	r30, 0x55	; 85
    252e:	ff 4f       	sbci	r31, 0xFF	; 255
    2530:	80 81       	ld	r24, Z
    2532:	84 30       	cpi	r24, 0x04	; 4
    2534:	31 f4       	brne	.+12     	; 0x2542 <main+0xee4>
					//set tx address for pipe 4
					nrf24l01_settxaddr(addrtx4);
    2536:	ce 01       	movw	r24, r28
    2538:	8e 51       	subi	r24, 0x1E	; 30
    253a:	9f 4f       	sbci	r25, 0xFF	; 255
    253c:	0e 94 ef 01 	call	0x3de	; 0x3de <nrf24l01_settxaddr>
    2540:	0b c0       	rjmp	.+22     	; 0x2558 <main+0xefa>
				} else if(sendpipe == 5) {
    2542:	fe 01       	movw	r30, r28
    2544:	e5 55       	subi	r30, 0x55	; 85
    2546:	ff 4f       	sbci	r31, 0xFF	; 255
    2548:	80 81       	ld	r24, Z
    254a:	85 30       	cpi	r24, 0x05	; 5
    254c:	29 f4       	brne	.+10     	; 0x2558 <main+0xefa>
					//set tx address for pipe 5
					nrf24l01_settxaddr(addrtx5);
    254e:	ce 01       	movw	r24, r28
    2550:	89 51       	subi	r24, 0x19	; 25
    2552:	9f 4f       	sbci	r25, 0xFF	; 255
    2554:	0e 94 ef 01 	call	0x3de	; 0x3de <nrf24l01_settxaddr>
				}

				//write buffer
				uint8_t writeret = nrf24l01_write(bufferout);
    2558:	ce 01       	movw	r24, r28
    255a:	82 55       	subi	r24, 0x52	; 82
    255c:	9f 4f       	sbci	r25, 0xFF	; 255
    255e:	0e 94 0e 06 	call	0xc1c	; 0xc1c <nrf24l01_write>
    2562:	fe 01       	movw	r30, r28
    2564:	e6 55       	subi	r30, 0x56	; 86
    2566:	ff 4f       	sbci	r31, 0xFF	; 255
    2568:	80 83       	st	Z, r24

				#if DEBUGENABLED == 1
				if(writeret == 1)
    256a:	fe 01       	movw	r30, r28
    256c:	e6 55       	subi	r30, 0x56	; 86
    256e:	ff 4f       	sbci	r31, 0xFF	; 255
    2570:	80 81       	ld	r24, Z
    2572:	81 30       	cpi	r24, 0x01	; 1
    2574:	29 f4       	brne	.+10     	; 0x2580 <main+0xf22>
					uart_puts("ok\r\n");
    2576:	8f ef       	ldi	r24, 0xFF	; 255
    2578:	91 e0       	ldi	r25, 0x01	; 1
    257a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
    257e:	04 c0       	rjmp	.+8      	; 0x2588 <main+0xf2a>
				else
					uart_puts("failed\r\n");
    2580:	84 e0       	ldi	r24, 0x04	; 4
    2582:	92 e0       	ldi	r25, 0x02	; 2
    2584:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				#endif

				sendpipe++;
    2588:	de 01       	movw	r26, r28
    258a:	a5 55       	subi	r26, 0x55	; 85
    258c:	bf 4f       	sbci	r27, 0xFF	; 255
    258e:	fe 01       	movw	r30, r28
    2590:	e5 55       	subi	r30, 0x55	; 85
    2592:	ff 4f       	sbci	r31, 0xFF	; 255
    2594:	80 81       	ld	r24, Z
    2596:	8f 5f       	subi	r24, 0xFF	; 255
    2598:	8c 93       	st	X, r24
				sendpipe%=6;
    259a:	de 01       	movw	r26, r28
    259c:	a5 55       	subi	r26, 0x55	; 85
    259e:	bf 4f       	sbci	r27, 0xFF	; 255
    25a0:	fe 01       	movw	r30, r28
    25a2:	e5 55       	subi	r30, 0x55	; 85
    25a4:	ff 4f       	sbci	r31, 0xFF	; 255
    25a6:	80 81       	ld	r24, Z
    25a8:	96 e0       	ldi	r25, 0x06	; 6
    25aa:	69 2f       	mov	r22, r25
    25ac:	0e 94 b1 1c 	call	0x3962	; 0x3962 <__udivmodqi4>
    25b0:	89 2f       	mov	r24, r25
    25b2:	8c 93       	st	X, r24

				//blink led for output data
				LEDOUT_PORT |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    25b4:	a8 e2       	ldi	r26, 0x28	; 40
    25b6:	b0 e0       	ldi	r27, 0x00	; 0
    25b8:	e8 e2       	ldi	r30, 0x28	; 40
    25ba:	f0 e0       	ldi	r31, 0x00	; 0
    25bc:	80 81       	ld	r24, Z
    25be:	80 62       	ori	r24, 0x20	; 32
    25c0:	8c 93       	st	X, r24
    25c2:	fe 01       	movw	r30, r28
    25c4:	ef 5a       	subi	r30, 0xAF	; 175
    25c6:	ff 4f       	sbci	r31, 0xFF	; 255
    25c8:	80 e0       	ldi	r24, 0x00	; 0
    25ca:	90 e0       	ldi	r25, 0x00	; 0
    25cc:	a6 e9       	ldi	r26, 0x96	; 150
    25ce:	b3 e4       	ldi	r27, 0x43	; 67
    25d0:	80 83       	st	Z, r24
    25d2:	91 83       	std	Z+1, r25	; 0x01
    25d4:	a2 83       	std	Z+2, r26	; 0x02
    25d6:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    25d8:	8e 01       	movw	r16, r28
    25da:	03 5b       	subi	r16, 0xB3	; 179
    25dc:	1f 4f       	sbci	r17, 0xFF	; 255
    25de:	fe 01       	movw	r30, r28
    25e0:	ef 5a       	subi	r30, 0xAF	; 175
    25e2:	ff 4f       	sbci	r31, 0xFF	; 255
    25e4:	60 81       	ld	r22, Z
    25e6:	71 81       	ldd	r23, Z+1	; 0x01
    25e8:	82 81       	ldd	r24, Z+2	; 0x02
    25ea:	93 81       	ldd	r25, Z+3	; 0x03
    25ec:	20 e0       	ldi	r18, 0x00	; 0
    25ee:	30 e0       	ldi	r19, 0x00	; 0
    25f0:	4a ef       	ldi	r20, 0xFA	; 250
    25f2:	54 e4       	ldi	r21, 0x44	; 68
    25f4:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    25f8:	dc 01       	movw	r26, r24
    25fa:	cb 01       	movw	r24, r22
    25fc:	f8 01       	movw	r30, r16
    25fe:	80 83       	st	Z, r24
    2600:	91 83       	std	Z+1, r25	; 0x01
    2602:	a2 83       	std	Z+2, r26	; 0x02
    2604:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    2606:	fe 01       	movw	r30, r28
    2608:	e3 5b       	subi	r30, 0xB3	; 179
    260a:	ff 4f       	sbci	r31, 0xFF	; 255
    260c:	60 81       	ld	r22, Z
    260e:	71 81       	ldd	r23, Z+1	; 0x01
    2610:	82 81       	ldd	r24, Z+2	; 0x02
    2612:	93 81       	ldd	r25, Z+3	; 0x03
    2614:	20 e0       	ldi	r18, 0x00	; 0
    2616:	30 e0       	ldi	r19, 0x00	; 0
    2618:	40 e8       	ldi	r20, 0x80	; 128
    261a:	5f e3       	ldi	r21, 0x3F	; 63
    261c:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    2620:	88 23       	and	r24, r24
    2622:	44 f4       	brge	.+16     	; 0x2634 <main+0xfd6>
		__ticks = 1;
    2624:	fe 01       	movw	r30, r28
    2626:	e5 5b       	subi	r30, 0xB5	; 181
    2628:	ff 4f       	sbci	r31, 0xFF	; 255
    262a:	81 e0       	ldi	r24, 0x01	; 1
    262c:	90 e0       	ldi	r25, 0x00	; 0
    262e:	91 83       	std	Z+1, r25	; 0x01
    2630:	80 83       	st	Z, r24
    2632:	64 c0       	rjmp	.+200    	; 0x26fc <main+0x109e>
	else if (__tmp > 65535)
    2634:	fe 01       	movw	r30, r28
    2636:	e3 5b       	subi	r30, 0xB3	; 179
    2638:	ff 4f       	sbci	r31, 0xFF	; 255
    263a:	60 81       	ld	r22, Z
    263c:	71 81       	ldd	r23, Z+1	; 0x01
    263e:	82 81       	ldd	r24, Z+2	; 0x02
    2640:	93 81       	ldd	r25, Z+3	; 0x03
    2642:	20 e0       	ldi	r18, 0x00	; 0
    2644:	3f ef       	ldi	r19, 0xFF	; 255
    2646:	4f e7       	ldi	r20, 0x7F	; 127
    2648:	57 e4       	ldi	r21, 0x47	; 71
    264a:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    264e:	18 16       	cp	r1, r24
    2650:	0c f0       	brlt	.+2      	; 0x2654 <main+0xff6>
    2652:	43 c0       	rjmp	.+134    	; 0x26da <main+0x107c>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2654:	fe 01       	movw	r30, r28
    2656:	ef 5a       	subi	r30, 0xAF	; 175
    2658:	ff 4f       	sbci	r31, 0xFF	; 255
    265a:	60 81       	ld	r22, Z
    265c:	71 81       	ldd	r23, Z+1	; 0x01
    265e:	82 81       	ldd	r24, Z+2	; 0x02
    2660:	93 81       	ldd	r25, Z+3	; 0x03
    2662:	20 e0       	ldi	r18, 0x00	; 0
    2664:	30 e0       	ldi	r19, 0x00	; 0
    2666:	40 e2       	ldi	r20, 0x20	; 32
    2668:	51 e4       	ldi	r21, 0x41	; 65
    266a:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    266e:	dc 01       	movw	r26, r24
    2670:	cb 01       	movw	r24, r22
    2672:	8e 01       	movw	r16, r28
    2674:	05 5b       	subi	r16, 0xB5	; 181
    2676:	1f 4f       	sbci	r17, 0xFF	; 255
    2678:	bc 01       	movw	r22, r24
    267a:	cd 01       	movw	r24, r26
    267c:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2680:	dc 01       	movw	r26, r24
    2682:	cb 01       	movw	r24, r22
    2684:	f8 01       	movw	r30, r16
    2686:	91 83       	std	Z+1, r25	; 0x01
    2688:	80 83       	st	Z, r24
    268a:	1f c0       	rjmp	.+62     	; 0x26ca <main+0x106c>
    268c:	fe 01       	movw	r30, r28
    268e:	e7 5b       	subi	r30, 0xB7	; 183
    2690:	ff 4f       	sbci	r31, 0xFF	; 255
    2692:	88 ec       	ldi	r24, 0xC8	; 200
    2694:	90 e0       	ldi	r25, 0x00	; 0
    2696:	91 83       	std	Z+1, r25	; 0x01
    2698:	80 83       	st	Z, r24
    269a:	fe 01       	movw	r30, r28
    269c:	e7 5b       	subi	r30, 0xB7	; 183
    269e:	ff 4f       	sbci	r31, 0xFF	; 255
    26a0:	80 81       	ld	r24, Z
    26a2:	91 81       	ldd	r25, Z+1	; 0x01
    26a4:	01 97       	sbiw	r24, 0x01	; 1
    26a6:	f1 f7       	brne	.-4      	; 0x26a4 <main+0x1046>
    26a8:	fe 01       	movw	r30, r28
    26aa:	e7 5b       	subi	r30, 0xB7	; 183
    26ac:	ff 4f       	sbci	r31, 0xFF	; 255
    26ae:	91 83       	std	Z+1, r25	; 0x01
    26b0:	80 83       	st	Z, r24
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    26b2:	de 01       	movw	r26, r28
    26b4:	a5 5b       	subi	r26, 0xB5	; 181
    26b6:	bf 4f       	sbci	r27, 0xFF	; 255
    26b8:	fe 01       	movw	r30, r28
    26ba:	e5 5b       	subi	r30, 0xB5	; 181
    26bc:	ff 4f       	sbci	r31, 0xFF	; 255
    26be:	80 81       	ld	r24, Z
    26c0:	91 81       	ldd	r25, Z+1	; 0x01
    26c2:	01 97       	sbiw	r24, 0x01	; 1
    26c4:	11 96       	adiw	r26, 0x01	; 1
    26c6:	9c 93       	st	X, r25
    26c8:	8e 93       	st	-X, r24
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    26ca:	fe 01       	movw	r30, r28
    26cc:	e5 5b       	subi	r30, 0xB5	; 181
    26ce:	ff 4f       	sbci	r31, 0xFF	; 255
    26d0:	80 81       	ld	r24, Z
    26d2:	91 81       	ldd	r25, Z+1	; 0x01
    26d4:	00 97       	sbiw	r24, 0x00	; 0
    26d6:	d1 f6       	brne	.-76     	; 0x268c <main+0x102e>
    26d8:	27 c0       	rjmp	.+78     	; 0x2728 <main+0x10ca>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    26da:	8e 01       	movw	r16, r28
    26dc:	05 5b       	subi	r16, 0xB5	; 181
    26de:	1f 4f       	sbci	r17, 0xFF	; 255
    26e0:	fe 01       	movw	r30, r28
    26e2:	e3 5b       	subi	r30, 0xB3	; 179
    26e4:	ff 4f       	sbci	r31, 0xFF	; 255
    26e6:	60 81       	ld	r22, Z
    26e8:	71 81       	ldd	r23, Z+1	; 0x01
    26ea:	82 81       	ldd	r24, Z+2	; 0x02
    26ec:	93 81       	ldd	r25, Z+3	; 0x03
    26ee:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    26f2:	dc 01       	movw	r26, r24
    26f4:	cb 01       	movw	r24, r22
    26f6:	f8 01       	movw	r30, r16
    26f8:	91 83       	std	Z+1, r25	; 0x01
    26fa:	80 83       	st	Z, r24
    26fc:	de 01       	movw	r26, r28
    26fe:	a9 5b       	subi	r26, 0xB9	; 185
    2700:	bf 4f       	sbci	r27, 0xFF	; 255
    2702:	fe 01       	movw	r30, r28
    2704:	e5 5b       	subi	r30, 0xB5	; 181
    2706:	ff 4f       	sbci	r31, 0xFF	; 255
    2708:	80 81       	ld	r24, Z
    270a:	91 81       	ldd	r25, Z+1	; 0x01
    270c:	8d 93       	st	X+, r24
    270e:	9c 93       	st	X, r25
    2710:	fe 01       	movw	r30, r28
    2712:	e9 5b       	subi	r30, 0xB9	; 185
    2714:	ff 4f       	sbci	r31, 0xFF	; 255
    2716:	80 81       	ld	r24, Z
    2718:	91 81       	ldd	r25, Z+1	; 0x01
    271a:	01 97       	sbiw	r24, 0x01	; 1
    271c:	f1 f7       	brne	.-4      	; 0x271a <main+0x10bc>
    271e:	fe 01       	movw	r30, r28
    2720:	e9 5b       	subi	r30, 0xB9	; 185
    2722:	ff 4f       	sbci	r31, 0xFF	; 255
    2724:	91 83       	std	Z+1, r25	; 0x01
    2726:	80 83       	st	Z, r24
				LEDOUT_PORT &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    2728:	a8 e2       	ldi	r26, 0x28	; 40
    272a:	b0 e0       	ldi	r27, 0x00	; 0
    272c:	e8 e2       	ldi	r30, 0x28	; 40
    272e:	f0 e0       	ldi	r31, 0x00	; 0
    2730:	80 81       	ld	r24, Z
    2732:	8f 7d       	andi	r24, 0xDF	; 223
    2734:	8c 93       	st	X, r24
    2736:	fe 01       	movw	r30, r28
    2738:	ed 5b       	subi	r30, 0xBD	; 189
    273a:	ff 4f       	sbci	r31, 0xFF	; 255
    273c:	80 e0       	ldi	r24, 0x00	; 0
    273e:	90 e0       	ldi	r25, 0x00	; 0
    2740:	a6 e9       	ldi	r26, 0x96	; 150
    2742:	b3 e4       	ldi	r27, 0x43	; 67
    2744:	80 83       	st	Z, r24
    2746:	91 83       	std	Z+1, r25	; 0x01
    2748:	a2 83       	std	Z+2, r26	; 0x02
    274a:	b3 83       	std	Z+3, r27	; 0x03
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    274c:	8e 01       	movw	r16, r28
    274e:	01 5c       	subi	r16, 0xC1	; 193
    2750:	1f 4f       	sbci	r17, 0xFF	; 255
    2752:	fe 01       	movw	r30, r28
    2754:	ed 5b       	subi	r30, 0xBD	; 189
    2756:	ff 4f       	sbci	r31, 0xFF	; 255
    2758:	60 81       	ld	r22, Z
    275a:	71 81       	ldd	r23, Z+1	; 0x01
    275c:	82 81       	ldd	r24, Z+2	; 0x02
    275e:	93 81       	ldd	r25, Z+3	; 0x03
    2760:	20 e0       	ldi	r18, 0x00	; 0
    2762:	30 e0       	ldi	r19, 0x00	; 0
    2764:	4a ef       	ldi	r20, 0xFA	; 250
    2766:	54 e4       	ldi	r21, 0x44	; 68
    2768:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    276c:	dc 01       	movw	r26, r24
    276e:	cb 01       	movw	r24, r22
    2770:	f8 01       	movw	r30, r16
    2772:	80 83       	st	Z, r24
    2774:	91 83       	std	Z+1, r25	; 0x01
    2776:	a2 83       	std	Z+2, r26	; 0x02
    2778:	b3 83       	std	Z+3, r27	; 0x03
	if (__tmp < 1.0)
    277a:	fe 01       	movw	r30, r28
    277c:	ff 96       	adiw	r30, 0x3f	; 63
    277e:	60 81       	ld	r22, Z
    2780:	71 81       	ldd	r23, Z+1	; 0x01
    2782:	82 81       	ldd	r24, Z+2	; 0x02
    2784:	93 81       	ldd	r25, Z+3	; 0x03
    2786:	20 e0       	ldi	r18, 0x00	; 0
    2788:	30 e0       	ldi	r19, 0x00	; 0
    278a:	40 e8       	ldi	r20, 0x80	; 128
    278c:	5f e3       	ldi	r21, 0x3F	; 63
    278e:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    2792:	88 23       	and	r24, r24
    2794:	2c f4       	brge	.+10     	; 0x27a0 <main+0x1142>
		__ticks = 1;
    2796:	81 e0       	ldi	r24, 0x01	; 1
    2798:	90 e0       	ldi	r25, 0x00	; 0
    279a:	9e af       	std	Y+62, r25	; 0x3e
    279c:	8d af       	std	Y+61, r24	; 0x3d
    279e:	46 c0       	rjmp	.+140    	; 0x282c <main+0x11ce>
	else if (__tmp > 65535)
    27a0:	fe 01       	movw	r30, r28
    27a2:	ff 96       	adiw	r30, 0x3f	; 63
    27a4:	60 81       	ld	r22, Z
    27a6:	71 81       	ldd	r23, Z+1	; 0x01
    27a8:	82 81       	ldd	r24, Z+2	; 0x02
    27aa:	93 81       	ldd	r25, Z+3	; 0x03
    27ac:	20 e0       	ldi	r18, 0x00	; 0
    27ae:	3f ef       	ldi	r19, 0xFF	; 255
    27b0:	4f e7       	ldi	r20, 0x7F	; 127
    27b2:	57 e4       	ldi	r21, 0x47	; 71
    27b4:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    27b8:	18 16       	cp	r1, r24
    27ba:	64 f5       	brge	.+88     	; 0x2814 <main+0x11b6>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    27bc:	fe 01       	movw	r30, r28
    27be:	ed 5b       	subi	r30, 0xBD	; 189
    27c0:	ff 4f       	sbci	r31, 0xFF	; 255
    27c2:	60 81       	ld	r22, Z
    27c4:	71 81       	ldd	r23, Z+1	; 0x01
    27c6:	82 81       	ldd	r24, Z+2	; 0x02
    27c8:	93 81       	ldd	r25, Z+3	; 0x03
    27ca:	20 e0       	ldi	r18, 0x00	; 0
    27cc:	30 e0       	ldi	r19, 0x00	; 0
    27ce:	40 e2       	ldi	r20, 0x20	; 32
    27d0:	51 e4       	ldi	r21, 0x41	; 65
    27d2:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    27d6:	dc 01       	movw	r26, r24
    27d8:	cb 01       	movw	r24, r22
    27da:	bc 01       	movw	r22, r24
    27dc:	cd 01       	movw	r24, r26
    27de:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    27e2:	dc 01       	movw	r26, r24
    27e4:	cb 01       	movw	r24, r22
    27e6:	9e af       	std	Y+62, r25	; 0x3e
    27e8:	8d af       	std	Y+61, r24	; 0x3d
    27ea:	0f c0       	rjmp	.+30     	; 0x280a <main+0x11ac>
    27ec:	88 ec       	ldi	r24, 0xC8	; 200
    27ee:	90 e0       	ldi	r25, 0x00	; 0
    27f0:	9c af       	std	Y+60, r25	; 0x3c
    27f2:	8b af       	std	Y+59, r24	; 0x3b
    27f4:	8b ad       	ldd	r24, Y+59	; 0x3b
    27f6:	9c ad       	ldd	r25, Y+60	; 0x3c
    27f8:	01 97       	sbiw	r24, 0x01	; 1
    27fa:	f1 f7       	brne	.-4      	; 0x27f8 <main+0x119a>
    27fc:	9c af       	std	Y+60, r25	; 0x3c
    27fe:	8b af       	std	Y+59, r24	; 0x3b
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2800:	8d ad       	ldd	r24, Y+61	; 0x3d
    2802:	9e ad       	ldd	r25, Y+62	; 0x3e
    2804:	01 97       	sbiw	r24, 0x01	; 1
    2806:	9e af       	std	Y+62, r25	; 0x3e
    2808:	8d af       	std	Y+61, r24	; 0x3d
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    280a:	8d ad       	ldd	r24, Y+61	; 0x3d
    280c:	9e ad       	ldd	r25, Y+62	; 0x3e
    280e:	00 97       	sbiw	r24, 0x00	; 0
    2810:	69 f7       	brne	.-38     	; 0x27ec <main+0x118e>
    2812:	16 c0       	rjmp	.+44     	; 0x2840 <main+0x11e2>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2814:	fe 01       	movw	r30, r28
    2816:	ff 96       	adiw	r30, 0x3f	; 63
    2818:	60 81       	ld	r22, Z
    281a:	71 81       	ldd	r23, Z+1	; 0x01
    281c:	82 81       	ldd	r24, Z+2	; 0x02
    281e:	93 81       	ldd	r25, Z+3	; 0x03
    2820:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2824:	dc 01       	movw	r26, r24
    2826:	cb 01       	movw	r24, r22
    2828:	9e af       	std	Y+62, r25	; 0x3e
    282a:	8d af       	std	Y+61, r24	; 0x3d
    282c:	8d ad       	ldd	r24, Y+61	; 0x3d
    282e:	9e ad       	ldd	r25, Y+62	; 0x3e
    2830:	9a af       	std	Y+58, r25	; 0x3a
    2832:	89 af       	std	Y+57, r24	; 0x39
    2834:	89 ad       	ldd	r24, Y+57	; 0x39
    2836:	9a ad       	ldd	r25, Y+58	; 0x3a
    2838:	01 97       	sbiw	r24, 0x01	; 1
    283a:	f1 f7       	brne	.-4      	; 0x2838 <main+0x11da>
    283c:	9a af       	std	Y+58, r25	; 0x3a
    283e:	89 af       	std	Y+57, r24	; 0x39
    2840:	80 e0       	ldi	r24, 0x00	; 0
    2842:	90 e0       	ldi	r25, 0x00	; 0
    2844:	aa e7       	ldi	r26, 0x7A	; 122
    2846:	b4 e4       	ldi	r27, 0x44	; 68
    2848:	8d ab       	std	Y+53, r24	; 0x35
    284a:	9e ab       	std	Y+54, r25	; 0x36
    284c:	af ab       	std	Y+55, r26	; 0x37
    284e:	b8 af       	std	Y+56, r27	; 0x38
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2850:	6d a9       	ldd	r22, Y+53	; 0x35
    2852:	7e a9       	ldd	r23, Y+54	; 0x36
    2854:	8f a9       	ldd	r24, Y+55	; 0x37
    2856:	98 ad       	ldd	r25, Y+56	; 0x38
    2858:	20 e0       	ldi	r18, 0x00	; 0
    285a:	30 e0       	ldi	r19, 0x00	; 0
    285c:	4a ef       	ldi	r20, 0xFA	; 250
    285e:	54 e4       	ldi	r21, 0x44	; 68
    2860:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    2864:	dc 01       	movw	r26, r24
    2866:	cb 01       	movw	r24, r22
    2868:	89 ab       	std	Y+49, r24	; 0x31
    286a:	9a ab       	std	Y+50, r25	; 0x32
    286c:	ab ab       	std	Y+51, r26	; 0x33
    286e:	bc ab       	std	Y+52, r27	; 0x34
	if (__tmp < 1.0)
    2870:	69 a9       	ldd	r22, Y+49	; 0x31
    2872:	7a a9       	ldd	r23, Y+50	; 0x32
    2874:	8b a9       	ldd	r24, Y+51	; 0x33
    2876:	9c a9       	ldd	r25, Y+52	; 0x34
    2878:	20 e0       	ldi	r18, 0x00	; 0
    287a:	30 e0       	ldi	r19, 0x00	; 0
    287c:	40 e8       	ldi	r20, 0x80	; 128
    287e:	5f e3       	ldi	r21, 0x3F	; 63
    2880:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    2884:	88 23       	and	r24, r24
    2886:	2c f4       	brge	.+10     	; 0x2892 <main+0x1234>
		__ticks = 1;
    2888:	81 e0       	ldi	r24, 0x01	; 1
    288a:	90 e0       	ldi	r25, 0x00	; 0
    288c:	98 ab       	std	Y+48, r25	; 0x30
    288e:	8f a7       	std	Y+47, r24	; 0x2f
    2890:	3f c0       	rjmp	.+126    	; 0x2910 <main+0x12b2>
	else if (__tmp > 65535)
    2892:	69 a9       	ldd	r22, Y+49	; 0x31
    2894:	7a a9       	ldd	r23, Y+50	; 0x32
    2896:	8b a9       	ldd	r24, Y+51	; 0x33
    2898:	9c a9       	ldd	r25, Y+52	; 0x34
    289a:	20 e0       	ldi	r18, 0x00	; 0
    289c:	3f ef       	ldi	r19, 0xFF	; 255
    289e:	4f e7       	ldi	r20, 0x7F	; 127
    28a0:	57 e4       	ldi	r21, 0x47	; 71
    28a2:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    28a6:	18 16       	cp	r1, r24
    28a8:	4c f5       	brge	.+82     	; 0x28fc <main+0x129e>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    28aa:	6d a9       	ldd	r22, Y+53	; 0x35
    28ac:	7e a9       	ldd	r23, Y+54	; 0x36
    28ae:	8f a9       	ldd	r24, Y+55	; 0x37
    28b0:	98 ad       	ldd	r25, Y+56	; 0x38
    28b2:	20 e0       	ldi	r18, 0x00	; 0
    28b4:	30 e0       	ldi	r19, 0x00	; 0
    28b6:	40 e2       	ldi	r20, 0x20	; 32
    28b8:	51 e4       	ldi	r21, 0x41	; 65
    28ba:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    28be:	dc 01       	movw	r26, r24
    28c0:	cb 01       	movw	r24, r22
    28c2:	bc 01       	movw	r22, r24
    28c4:	cd 01       	movw	r24, r26
    28c6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    28ca:	dc 01       	movw	r26, r24
    28cc:	cb 01       	movw	r24, r22
    28ce:	98 ab       	std	Y+48, r25	; 0x30
    28d0:	8f a7       	std	Y+47, r24	; 0x2f
    28d2:	0f c0       	rjmp	.+30     	; 0x28f2 <main+0x1294>
    28d4:	88 ec       	ldi	r24, 0xC8	; 200
    28d6:	90 e0       	ldi	r25, 0x00	; 0
    28d8:	9e a7       	std	Y+46, r25	; 0x2e
    28da:	8d a7       	std	Y+45, r24	; 0x2d
    28dc:	8d a5       	ldd	r24, Y+45	; 0x2d
    28de:	9e a5       	ldd	r25, Y+46	; 0x2e
    28e0:	01 97       	sbiw	r24, 0x01	; 1
    28e2:	f1 f7       	brne	.-4      	; 0x28e0 <main+0x1282>
    28e4:	9e a7       	std	Y+46, r25	; 0x2e
    28e6:	8d a7       	std	Y+45, r24	; 0x2d
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    28e8:	8f a5       	ldd	r24, Y+47	; 0x2f
    28ea:	98 a9       	ldd	r25, Y+48	; 0x30
    28ec:	01 97       	sbiw	r24, 0x01	; 1
    28ee:	98 ab       	std	Y+48, r25	; 0x30
    28f0:	8f a7       	std	Y+47, r24	; 0x2f
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    28f2:	8f a5       	ldd	r24, Y+47	; 0x2f
    28f4:	98 a9       	ldd	r25, Y+48	; 0x30
    28f6:	00 97       	sbiw	r24, 0x00	; 0
    28f8:	69 f7       	brne	.-38     	; 0x28d4 <main+0x1276>
    28fa:	c5 cd       	rjmp	.-1142   	; 0x2486 <main+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    28fc:	69 a9       	ldd	r22, Y+49	; 0x31
    28fe:	7a a9       	ldd	r23, Y+50	; 0x32
    2900:	8b a9       	ldd	r24, Y+51	; 0x33
    2902:	9c a9       	ldd	r25, Y+52	; 0x34
    2904:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2908:	dc 01       	movw	r26, r24
    290a:	cb 01       	movw	r24, r22
    290c:	98 ab       	std	Y+48, r25	; 0x30
    290e:	8f a7       	std	Y+47, r24	; 0x2f
    2910:	8f a5       	ldd	r24, Y+47	; 0x2f
    2912:	98 a9       	ldd	r25, Y+48	; 0x30
    2914:	9c a7       	std	Y+44, r25	; 0x2c
    2916:	8b a7       	std	Y+43, r24	; 0x2b
    2918:	8b a5       	ldd	r24, Y+43	; 0x2b
    291a:	9c a5       	ldd	r25, Y+44	; 0x2c
    291c:	01 97       	sbiw	r24, 0x01	; 1
    291e:	f1 f7       	brne	.-4      	; 0x291c <main+0x12be>
    2920:	9c a7       	std	Y+44, r25	; 0x2c
    2922:	8b a7       	std	Y+43, r24	; 0x2b
    2924:	b0 cd       	rjmp	.-1184   	; 0x2486 <main+0xe28>
			}
			#endif
			#if DEBUGENABLED == 1
			_delay_ms(1000);
			#endif
		} else if(txrxrole == ROLERX) {
    2926:	fe 01       	movw	r30, r28
    2928:	e3 55       	subi	r30, 0x53	; 83
    292a:	ff 4f       	sbci	r31, 0xFF	; 255
    292c:	80 81       	ld	r24, Z
    292e:	88 23       	and	r24, r24
    2930:	09 f0       	breq	.+2      	; 0x2934 <main+0x12d6>
    2932:	a9 cd       	rjmp	.-1198   	; 0x2486 <main+0xe28>

			//rx
			uint8_t pipe = 0;
    2934:	fe 01       	movw	r30, r28
    2936:	ef 50       	subi	r30, 0x0F	; 15
    2938:	ff 4f       	sbci	r31, 0xFF	; 255
    293a:	10 82       	st	Z, r1
			if(nrf24l01_readready(&pipe)) { //if data is ready
    293c:	ce 01       	movw	r24, r28
    293e:	8f 50       	subi	r24, 0x0F	; 15
    2940:	9f 4f       	sbci	r25, 0xFF	; 255
    2942:	0e 94 a2 05 	call	0xb44	; 0xb44 <nrf24l01_readready>
    2946:	88 23       	and	r24, r24
    2948:	09 f4       	brne	.+2      	; 0x294c <main+0x12ee>
    294a:	92 c1       	rjmp	.+804    	; 0x2c70 <main+0x1612>

				#if DEBUGENABLED == 1
				char pipebuffer[5];
				uart_puts("getting data, on pipe ");
    294c:	8d e0       	ldi	r24, 0x0D	; 13
    294e:	92 e0       	ldi	r25, 0x02	; 2
    2950:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				itoa(pipe, pipebuffer, 10);
    2954:	fe 01       	movw	r30, r28
    2956:	ef 50       	subi	r30, 0x0F	; 15
    2958:	ff 4f       	sbci	r31, 0xFF	; 255
    295a:	80 81       	ld	r24, Z
    295c:	88 2f       	mov	r24, r24
    295e:	90 e0       	ldi	r25, 0x00	; 0
    2960:	9e 01       	movw	r18, r28
    2962:	2e 50       	subi	r18, 0x0E	; 14
    2964:	3f 4f       	sbci	r19, 0xFF	; 255
    2966:	b9 01       	movw	r22, r18
    2968:	4a e0       	ldi	r20, 0x0A	; 10
    296a:	50 e0       	ldi	r21, 0x00	; 0
    296c:	0e 94 fd 1c 	call	0x39fa	; 0x39fa <itoa>
				uart_puts(pipebuffer);
    2970:	ce 01       	movw	r24, r28
    2972:	8e 50       	subi	r24, 0x0E	; 14
    2974:	9f 4f       	sbci	r25, 0xFF	; 255
    2976:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				uart_puts("\r\n");
    297a:	84 e2       	ldi	r24, 0x24	; 36
    297c:	92 e0       	ldi	r25, 0x02	; 2
    297e:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				#endif

				//read buffer
				nrf24l01_read(bufferin);
    2982:	ce 01       	movw	r24, r28
    2984:	82 54       	subi	r24, 0x42	; 66
    2986:	9f 4f       	sbci	r25, 0xFF	; 255
    2988:	0e 94 c5 05 	call	0xb8a	; 0xb8a <nrf24l01_read>

				#if DEBUGENABLED == 1
				uint8_t samecheck = 1;
    298c:	fe 01       	movw	r30, r28
    298e:	e7 55       	subi	r30, 0x57	; 87
    2990:	ff 4f       	sbci	r31, 0xFF	; 255
    2992:	81 e0       	ldi	r24, 0x01	; 1
    2994:	80 83       	st	Z, r24
				uart_puts("  data: ");
    2996:	87 e2       	ldi	r24, 0x27	; 39
    2998:	92 e0       	ldi	r25, 0x02	; 2
    299a:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				for(i=0; i<sizeof(bufferin); i++) {
    299e:	fe 01       	movw	r30, r28
    29a0:	e4 55       	subi	r30, 0x54	; 84
    29a2:	ff 4f       	sbci	r31, 0xFF	; 255
    29a4:	10 82       	st	Z, r1
    29a6:	38 c0       	rjmp	.+112    	; 0x2a18 <main+0x13ba>
					if(bufferin[i] != bufferout[i])
    29a8:	fe 01       	movw	r30, r28
    29aa:	e4 55       	subi	r30, 0x54	; 84
    29ac:	ff 4f       	sbci	r31, 0xFF	; 255
    29ae:	80 81       	ld	r24, Z
    29b0:	28 2f       	mov	r18, r24
    29b2:	30 e0       	ldi	r19, 0x00	; 0
    29b4:	ce 01       	movw	r24, r28
    29b6:	82 54       	subi	r24, 0x42	; 66
    29b8:	9f 4f       	sbci	r25, 0xFF	; 255
    29ba:	fc 01       	movw	r30, r24
    29bc:	e2 0f       	add	r30, r18
    29be:	f3 1f       	adc	r31, r19
    29c0:	40 81       	ld	r20, Z
    29c2:	fe 01       	movw	r30, r28
    29c4:	e4 55       	subi	r30, 0x54	; 84
    29c6:	ff 4f       	sbci	r31, 0xFF	; 255
    29c8:	80 81       	ld	r24, Z
    29ca:	28 2f       	mov	r18, r24
    29cc:	30 e0       	ldi	r19, 0x00	; 0
    29ce:	ce 01       	movw	r24, r28
    29d0:	82 55       	subi	r24, 0x52	; 82
    29d2:	9f 4f       	sbci	r25, 0xFF	; 255
    29d4:	fc 01       	movw	r30, r24
    29d6:	e2 0f       	add	r30, r18
    29d8:	f3 1f       	adc	r31, r19
    29da:	80 81       	ld	r24, Z
    29dc:	48 17       	cp	r20, r24
    29de:	21 f0       	breq	.+8      	; 0x29e8 <main+0x138a>
						samecheck = 0;
    29e0:	fe 01       	movw	r30, r28
    29e2:	e7 55       	subi	r30, 0x57	; 87
    29e4:	ff 4f       	sbci	r31, 0xFF	; 255
    29e6:	10 82       	st	Z, r1
					uart_putc(bufferin[i]);
    29e8:	fe 01       	movw	r30, r28
    29ea:	e4 55       	subi	r30, 0x54	; 84
    29ec:	ff 4f       	sbci	r31, 0xFF	; 255
    29ee:	80 81       	ld	r24, Z
    29f0:	28 2f       	mov	r18, r24
    29f2:	30 e0       	ldi	r19, 0x00	; 0
    29f4:	ce 01       	movw	r24, r28
    29f6:	82 54       	subi	r24, 0x42	; 66
    29f8:	9f 4f       	sbci	r25, 0xFF	; 255
    29fa:	fc 01       	movw	r30, r24
    29fc:	e2 0f       	add	r30, r18
    29fe:	f3 1f       	adc	r31, r19
    2a00:	80 81       	ld	r24, Z
    2a02:	0e 94 c2 0a 	call	0x1584	; 0x1584 <uart_putc>
				nrf24l01_read(bufferin);

				#if DEBUGENABLED == 1
				uint8_t samecheck = 1;
				uart_puts("  data: ");
				for(i=0; i<sizeof(bufferin); i++) {
    2a06:	de 01       	movw	r26, r28
    2a08:	a4 55       	subi	r26, 0x54	; 84
    2a0a:	bf 4f       	sbci	r27, 0xFF	; 255
    2a0c:	fe 01       	movw	r30, r28
    2a0e:	e4 55       	subi	r30, 0x54	; 84
    2a10:	ff 4f       	sbci	r31, 0xFF	; 255
    2a12:	80 81       	ld	r24, Z
    2a14:	8f 5f       	subi	r24, 0xFF	; 255
    2a16:	8c 93       	st	X, r24
    2a18:	fe 01       	movw	r30, r28
    2a1a:	e4 55       	subi	r30, 0x54	; 84
    2a1c:	ff 4f       	sbci	r31, 0xFF	; 255
    2a1e:	80 81       	ld	r24, Z
    2a20:	80 31       	cpi	r24, 0x10	; 16
    2a22:	10 f2       	brcs	.-124    	; 0x29a8 <main+0x134a>
					if(bufferin[i] != bufferout[i])
						samecheck = 0;
					uart_putc(bufferin[i]);
				}
				uart_puts("\r\n");
    2a24:	84 e2       	ldi	r24, 0x24	; 36
    2a26:	92 e0       	ldi	r25, 0x02	; 2
    2a28:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				if(samecheck)
    2a2c:	fe 01       	movw	r30, r28
    2a2e:	e7 55       	subi	r30, 0x57	; 87
    2a30:	ff 4f       	sbci	r31, 0xFF	; 255
    2a32:	80 81       	ld	r24, Z
    2a34:	88 23       	and	r24, r24
    2a36:	29 f0       	breq	.+10     	; 0x2a42 <main+0x13e4>
					uart_puts("  check ok\r\n");
    2a38:	80 e3       	ldi	r24, 0x30	; 48
    2a3a:	92 e0       	ldi	r25, 0x02	; 2
    2a3c:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
    2a40:	04 c0       	rjmp	.+8      	; 0x2a4a <main+0x13ec>
				else
					uart_puts("  check fails\r\n");
    2a42:	8d e3       	ldi	r24, 0x3D	; 61
    2a44:	92 e0       	ldi	r25, 0x02	; 2
    2a46:	0e 94 e9 0a 	call	0x15d2	; 0x15d2 <uart_puts>
				for(i=0; i<sizeof(bufferin); i++)
    2a4a:	fe 01       	movw	r30, r28
    2a4c:	e4 55       	subi	r30, 0x54	; 84
    2a4e:	ff 4f       	sbci	r31, 0xFF	; 255
    2a50:	10 82       	st	Z, r1
    2a52:	16 c0       	rjmp	.+44     	; 0x2a80 <main+0x1422>
					bufferin[i] = 0;
    2a54:	fe 01       	movw	r30, r28
    2a56:	e4 55       	subi	r30, 0x54	; 84
    2a58:	ff 4f       	sbci	r31, 0xFF	; 255
    2a5a:	80 81       	ld	r24, Z
    2a5c:	28 2f       	mov	r18, r24
    2a5e:	30 e0       	ldi	r19, 0x00	; 0
    2a60:	ce 01       	movw	r24, r28
    2a62:	82 54       	subi	r24, 0x42	; 66
    2a64:	9f 4f       	sbci	r25, 0xFF	; 255
    2a66:	fc 01       	movw	r30, r24
    2a68:	e2 0f       	add	r30, r18
    2a6a:	f3 1f       	adc	r31, r19
    2a6c:	10 82       	st	Z, r1
				uart_puts("\r\n");
				if(samecheck)
					uart_puts("  check ok\r\n");
				else
					uart_puts("  check fails\r\n");
				for(i=0; i<sizeof(bufferin); i++)
    2a6e:	de 01       	movw	r26, r28
    2a70:	a4 55       	subi	r26, 0x54	; 84
    2a72:	bf 4f       	sbci	r27, 0xFF	; 255
    2a74:	fe 01       	movw	r30, r28
    2a76:	e4 55       	subi	r30, 0x54	; 84
    2a78:	ff 4f       	sbci	r31, 0xFF	; 255
    2a7a:	80 81       	ld	r24, Z
    2a7c:	8f 5f       	subi	r24, 0xFF	; 255
    2a7e:	8c 93       	st	X, r24
    2a80:	fe 01       	movw	r30, r28
    2a82:	e4 55       	subi	r30, 0x54	; 84
    2a84:	ff 4f       	sbci	r31, 0xFF	; 255
    2a86:	80 81       	ld	r24, Z
    2a88:	80 31       	cpi	r24, 0x10	; 16
    2a8a:	20 f3       	brcs	.-56     	; 0x2a54 <main+0x13f6>
					bufferin[i] = 0;
				#endif

				//blink led for input data
				LEDOUT_PORT |= (1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    2a8c:	a8 e2       	ldi	r26, 0x28	; 40
    2a8e:	b0 e0       	ldi	r27, 0x00	; 0
    2a90:	e8 e2       	ldi	r30, 0x28	; 40
    2a92:	f0 e0       	ldi	r31, 0x00	; 0
    2a94:	80 81       	ld	r24, Z
    2a96:	80 62       	ori	r24, 0x20	; 32
    2a98:	8c 93       	st	X, r24
    2a9a:	80 e0       	ldi	r24, 0x00	; 0
    2a9c:	90 e0       	ldi	r25, 0x00	; 0
    2a9e:	a6 e9       	ldi	r26, 0x96	; 150
    2aa0:	b3 e4       	ldi	r27, 0x43	; 67
    2aa2:	8f a3       	std	Y+39, r24	; 0x27
    2aa4:	98 a7       	std	Y+40, r25	; 0x28
    2aa6:	a9 a7       	std	Y+41, r26	; 0x29
    2aa8:	ba a7       	std	Y+42, r27	; 0x2a
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2aaa:	6f a1       	ldd	r22, Y+39	; 0x27
    2aac:	78 a5       	ldd	r23, Y+40	; 0x28
    2aae:	89 a5       	ldd	r24, Y+41	; 0x29
    2ab0:	9a a5       	ldd	r25, Y+42	; 0x2a
    2ab2:	20 e0       	ldi	r18, 0x00	; 0
    2ab4:	30 e0       	ldi	r19, 0x00	; 0
    2ab6:	4a ef       	ldi	r20, 0xFA	; 250
    2ab8:	54 e4       	ldi	r21, 0x44	; 68
    2aba:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    2abe:	dc 01       	movw	r26, r24
    2ac0:	cb 01       	movw	r24, r22
    2ac2:	8b a3       	std	Y+35, r24	; 0x23
    2ac4:	9c a3       	std	Y+36, r25	; 0x24
    2ac6:	ad a3       	std	Y+37, r26	; 0x25
    2ac8:	be a3       	std	Y+38, r27	; 0x26
	if (__tmp < 1.0)
    2aca:	6b a1       	ldd	r22, Y+35	; 0x23
    2acc:	7c a1       	ldd	r23, Y+36	; 0x24
    2ace:	8d a1       	ldd	r24, Y+37	; 0x25
    2ad0:	9e a1       	ldd	r25, Y+38	; 0x26
    2ad2:	20 e0       	ldi	r18, 0x00	; 0
    2ad4:	30 e0       	ldi	r19, 0x00	; 0
    2ad6:	40 e8       	ldi	r20, 0x80	; 128
    2ad8:	5f e3       	ldi	r21, 0x3F	; 63
    2ada:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    2ade:	88 23       	and	r24, r24
    2ae0:	2c f4       	brge	.+10     	; 0x2aec <main+0x148e>
		__ticks = 1;
    2ae2:	81 e0       	ldi	r24, 0x01	; 1
    2ae4:	90 e0       	ldi	r25, 0x00	; 0
    2ae6:	9a a3       	std	Y+34, r25	; 0x22
    2ae8:	89 a3       	std	Y+33, r24	; 0x21
    2aea:	3f c0       	rjmp	.+126    	; 0x2b6a <main+0x150c>
	else if (__tmp > 65535)
    2aec:	6b a1       	ldd	r22, Y+35	; 0x23
    2aee:	7c a1       	ldd	r23, Y+36	; 0x24
    2af0:	8d a1       	ldd	r24, Y+37	; 0x25
    2af2:	9e a1       	ldd	r25, Y+38	; 0x26
    2af4:	20 e0       	ldi	r18, 0x00	; 0
    2af6:	3f ef       	ldi	r19, 0xFF	; 255
    2af8:	4f e7       	ldi	r20, 0x7F	; 127
    2afa:	57 e4       	ldi	r21, 0x47	; 71
    2afc:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    2b00:	18 16       	cp	r1, r24
    2b02:	4c f5       	brge	.+82     	; 0x2b56 <main+0x14f8>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2b04:	6f a1       	ldd	r22, Y+39	; 0x27
    2b06:	78 a5       	ldd	r23, Y+40	; 0x28
    2b08:	89 a5       	ldd	r24, Y+41	; 0x29
    2b0a:	9a a5       	ldd	r25, Y+42	; 0x2a
    2b0c:	20 e0       	ldi	r18, 0x00	; 0
    2b0e:	30 e0       	ldi	r19, 0x00	; 0
    2b10:	40 e2       	ldi	r20, 0x20	; 32
    2b12:	51 e4       	ldi	r21, 0x41	; 65
    2b14:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    2b18:	dc 01       	movw	r26, r24
    2b1a:	cb 01       	movw	r24, r22
    2b1c:	bc 01       	movw	r22, r24
    2b1e:	cd 01       	movw	r24, r26
    2b20:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2b24:	dc 01       	movw	r26, r24
    2b26:	cb 01       	movw	r24, r22
    2b28:	9a a3       	std	Y+34, r25	; 0x22
    2b2a:	89 a3       	std	Y+33, r24	; 0x21
    2b2c:	0f c0       	rjmp	.+30     	; 0x2b4c <main+0x14ee>
    2b2e:	88 ec       	ldi	r24, 0xC8	; 200
    2b30:	90 e0       	ldi	r25, 0x00	; 0
    2b32:	98 a3       	std	Y+32, r25	; 0x20
    2b34:	8f 8f       	std	Y+31, r24	; 0x1f
    2b36:	8f 8d       	ldd	r24, Y+31	; 0x1f
    2b38:	98 a1       	ldd	r25, Y+32	; 0x20
    2b3a:	01 97       	sbiw	r24, 0x01	; 1
    2b3c:	f1 f7       	brne	.-4      	; 0x2b3a <main+0x14dc>
    2b3e:	98 a3       	std	Y+32, r25	; 0x20
    2b40:	8f 8f       	std	Y+31, r24	; 0x1f
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2b42:	89 a1       	ldd	r24, Y+33	; 0x21
    2b44:	9a a1       	ldd	r25, Y+34	; 0x22
    2b46:	01 97       	sbiw	r24, 0x01	; 1
    2b48:	9a a3       	std	Y+34, r25	; 0x22
    2b4a:	89 a3       	std	Y+33, r24	; 0x21
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2b4c:	89 a1       	ldd	r24, Y+33	; 0x21
    2b4e:	9a a1       	ldd	r25, Y+34	; 0x22
    2b50:	00 97       	sbiw	r24, 0x00	; 0
    2b52:	69 f7       	brne	.-38     	; 0x2b2e <main+0x14d0>
    2b54:	14 c0       	rjmp	.+40     	; 0x2b7e <main+0x1520>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2b56:	6b a1       	ldd	r22, Y+35	; 0x23
    2b58:	7c a1       	ldd	r23, Y+36	; 0x24
    2b5a:	8d a1       	ldd	r24, Y+37	; 0x25
    2b5c:	9e a1       	ldd	r25, Y+38	; 0x26
    2b5e:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2b62:	dc 01       	movw	r26, r24
    2b64:	cb 01       	movw	r24, r22
    2b66:	9a a3       	std	Y+34, r25	; 0x22
    2b68:	89 a3       	std	Y+33, r24	; 0x21
    2b6a:	89 a1       	ldd	r24, Y+33	; 0x21
    2b6c:	9a a1       	ldd	r25, Y+34	; 0x22
    2b6e:	9e 8f       	std	Y+30, r25	; 0x1e
    2b70:	8d 8f       	std	Y+29, r24	; 0x1d
    2b72:	8d 8d       	ldd	r24, Y+29	; 0x1d
    2b74:	9e 8d       	ldd	r25, Y+30	; 0x1e
    2b76:	01 97       	sbiw	r24, 0x01	; 1
    2b78:	f1 f7       	brne	.-4      	; 0x2b76 <main+0x1518>
    2b7a:	9e 8f       	std	Y+30, r25	; 0x1e
    2b7c:	8d 8f       	std	Y+29, r24	; 0x1d
				LEDOUT_PORT &= ~(1<<LEDOUT); _delay_ms(LEDOUTPAUSE);
    2b7e:	a8 e2       	ldi	r26, 0x28	; 40
    2b80:	b0 e0       	ldi	r27, 0x00	; 0
    2b82:	e8 e2       	ldi	r30, 0x28	; 40
    2b84:	f0 e0       	ldi	r31, 0x00	; 0
    2b86:	80 81       	ld	r24, Z
    2b88:	8f 7d       	andi	r24, 0xDF	; 223
    2b8a:	8c 93       	st	X, r24
    2b8c:	80 e0       	ldi	r24, 0x00	; 0
    2b8e:	90 e0       	ldi	r25, 0x00	; 0
    2b90:	a6 e9       	ldi	r26, 0x96	; 150
    2b92:	b3 e4       	ldi	r27, 0x43	; 67
    2b94:	89 8f       	std	Y+25, r24	; 0x19
    2b96:	9a 8f       	std	Y+26, r25	; 0x1a
    2b98:	ab 8f       	std	Y+27, r26	; 0x1b
    2b9a:	bc 8f       	std	Y+28, r27	; 0x1c
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2b9c:	69 8d       	ldd	r22, Y+25	; 0x19
    2b9e:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2ba0:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2ba2:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2ba4:	20 e0       	ldi	r18, 0x00	; 0
    2ba6:	30 e0       	ldi	r19, 0x00	; 0
    2ba8:	4a ef       	ldi	r20, 0xFA	; 250
    2baa:	54 e4       	ldi	r21, 0x44	; 68
    2bac:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    2bb0:	dc 01       	movw	r26, r24
    2bb2:	cb 01       	movw	r24, r22
    2bb4:	8d 8b       	std	Y+21, r24	; 0x15
    2bb6:	9e 8b       	std	Y+22, r25	; 0x16
    2bb8:	af 8b       	std	Y+23, r26	; 0x17
    2bba:	b8 8f       	std	Y+24, r27	; 0x18
	if (__tmp < 1.0)
    2bbc:	6d 89       	ldd	r22, Y+21	; 0x15
    2bbe:	7e 89       	ldd	r23, Y+22	; 0x16
    2bc0:	8f 89       	ldd	r24, Y+23	; 0x17
    2bc2:	98 8d       	ldd	r25, Y+24	; 0x18
    2bc4:	20 e0       	ldi	r18, 0x00	; 0
    2bc6:	30 e0       	ldi	r19, 0x00	; 0
    2bc8:	40 e8       	ldi	r20, 0x80	; 128
    2bca:	5f e3       	ldi	r21, 0x3F	; 63
    2bcc:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    2bd0:	88 23       	and	r24, r24
    2bd2:	2c f4       	brge	.+10     	; 0x2bde <main+0x1580>
		__ticks = 1;
    2bd4:	81 e0       	ldi	r24, 0x01	; 1
    2bd6:	90 e0       	ldi	r25, 0x00	; 0
    2bd8:	9c 8b       	std	Y+20, r25	; 0x14
    2bda:	8b 8b       	std	Y+19, r24	; 0x13
    2bdc:	3f c0       	rjmp	.+126    	; 0x2c5c <main+0x15fe>
	else if (__tmp > 65535)
    2bde:	6d 89       	ldd	r22, Y+21	; 0x15
    2be0:	7e 89       	ldd	r23, Y+22	; 0x16
    2be2:	8f 89       	ldd	r24, Y+23	; 0x17
    2be4:	98 8d       	ldd	r25, Y+24	; 0x18
    2be6:	20 e0       	ldi	r18, 0x00	; 0
    2be8:	3f ef       	ldi	r19, 0xFF	; 255
    2bea:	4f e7       	ldi	r20, 0x7F	; 127
    2bec:	57 e4       	ldi	r21, 0x47	; 71
    2bee:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    2bf2:	18 16       	cp	r1, r24
    2bf4:	4c f5       	brge	.+82     	; 0x2c48 <main+0x15ea>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2bf6:	69 8d       	ldd	r22, Y+25	; 0x19
    2bf8:	7a 8d       	ldd	r23, Y+26	; 0x1a
    2bfa:	8b 8d       	ldd	r24, Y+27	; 0x1b
    2bfc:	9c 8d       	ldd	r25, Y+28	; 0x1c
    2bfe:	20 e0       	ldi	r18, 0x00	; 0
    2c00:	30 e0       	ldi	r19, 0x00	; 0
    2c02:	40 e2       	ldi	r20, 0x20	; 32
    2c04:	51 e4       	ldi	r21, 0x41	; 65
    2c06:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    2c0a:	dc 01       	movw	r26, r24
    2c0c:	cb 01       	movw	r24, r22
    2c0e:	bc 01       	movw	r22, r24
    2c10:	cd 01       	movw	r24, r26
    2c12:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2c16:	dc 01       	movw	r26, r24
    2c18:	cb 01       	movw	r24, r22
    2c1a:	9c 8b       	std	Y+20, r25	; 0x14
    2c1c:	8b 8b       	std	Y+19, r24	; 0x13
    2c1e:	0f c0       	rjmp	.+30     	; 0x2c3e <main+0x15e0>
    2c20:	88 ec       	ldi	r24, 0xC8	; 200
    2c22:	90 e0       	ldi	r25, 0x00	; 0
    2c24:	9a 8b       	std	Y+18, r25	; 0x12
    2c26:	89 8b       	std	Y+17, r24	; 0x11
    2c28:	89 89       	ldd	r24, Y+17	; 0x11
    2c2a:	9a 89       	ldd	r25, Y+18	; 0x12
    2c2c:	01 97       	sbiw	r24, 0x01	; 1
    2c2e:	f1 f7       	brne	.-4      	; 0x2c2c <main+0x15ce>
    2c30:	9a 8b       	std	Y+18, r25	; 0x12
    2c32:	89 8b       	std	Y+17, r24	; 0x11
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2c34:	8b 89       	ldd	r24, Y+19	; 0x13
    2c36:	9c 89       	ldd	r25, Y+20	; 0x14
    2c38:	01 97       	sbiw	r24, 0x01	; 1
    2c3a:	9c 8b       	std	Y+20, r25	; 0x14
    2c3c:	8b 8b       	std	Y+19, r24	; 0x13
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2c3e:	8b 89       	ldd	r24, Y+19	; 0x13
    2c40:	9c 89       	ldd	r25, Y+20	; 0x14
    2c42:	00 97       	sbiw	r24, 0x00	; 0
    2c44:	69 f7       	brne	.-38     	; 0x2c20 <main+0x15c2>
    2c46:	14 c0       	rjmp	.+40     	; 0x2c70 <main+0x1612>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2c48:	6d 89       	ldd	r22, Y+21	; 0x15
    2c4a:	7e 89       	ldd	r23, Y+22	; 0x16
    2c4c:	8f 89       	ldd	r24, Y+23	; 0x17
    2c4e:	98 8d       	ldd	r25, Y+24	; 0x18
    2c50:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2c54:	dc 01       	movw	r26, r24
    2c56:	cb 01       	movw	r24, r22
    2c58:	9c 8b       	std	Y+20, r25	; 0x14
    2c5a:	8b 8b       	std	Y+19, r24	; 0x13
    2c5c:	8b 89       	ldd	r24, Y+19	; 0x13
    2c5e:	9c 89       	ldd	r25, Y+20	; 0x14
    2c60:	98 8b       	std	Y+16, r25	; 0x10
    2c62:	8f 87       	std	Y+15, r24	; 0x0f
    2c64:	8f 85       	ldd	r24, Y+15	; 0x0f
    2c66:	98 89       	ldd	r25, Y+16	; 0x10
    2c68:	01 97       	sbiw	r24, 0x01	; 1
    2c6a:	f1 f7       	brne	.-4      	; 0x2c68 <main+0x160a>
    2c6c:	98 8b       	std	Y+16, r25	; 0x10
    2c6e:	8f 87       	std	Y+15, r24	; 0x0f
    2c70:	80 e0       	ldi	r24, 0x00	; 0
    2c72:	90 e0       	ldi	r25, 0x00	; 0
    2c74:	a0 e2       	ldi	r26, 0x20	; 32
    2c76:	b1 e4       	ldi	r27, 0x41	; 65
    2c78:	8b 87       	std	Y+11, r24	; 0x0b
    2c7a:	9c 87       	std	Y+12, r25	; 0x0c
    2c7c:	ad 87       	std	Y+13, r26	; 0x0d
    2c7e:	be 87       	std	Y+14, r27	; 0x0e
 */
void
_delay_ms(double __ms)
{
	uint16_t __ticks;
	double __tmp = ((F_CPU) / 4e3) * __ms;
    2c80:	6b 85       	ldd	r22, Y+11	; 0x0b
    2c82:	7c 85       	ldd	r23, Y+12	; 0x0c
    2c84:	8d 85       	ldd	r24, Y+13	; 0x0d
    2c86:	9e 85       	ldd	r25, Y+14	; 0x0e
    2c88:	20 e0       	ldi	r18, 0x00	; 0
    2c8a:	30 e0       	ldi	r19, 0x00	; 0
    2c8c:	4a ef       	ldi	r20, 0xFA	; 250
    2c8e:	54 e4       	ldi	r21, 0x44	; 68
    2c90:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    2c94:	dc 01       	movw	r26, r24
    2c96:	cb 01       	movw	r24, r22
    2c98:	8f 83       	std	Y+7, r24	; 0x07
    2c9a:	98 87       	std	Y+8, r25	; 0x08
    2c9c:	a9 87       	std	Y+9, r26	; 0x09
    2c9e:	ba 87       	std	Y+10, r27	; 0x0a
	if (__tmp < 1.0)
    2ca0:	6f 81       	ldd	r22, Y+7	; 0x07
    2ca2:	78 85       	ldd	r23, Y+8	; 0x08
    2ca4:	89 85       	ldd	r24, Y+9	; 0x09
    2ca6:	9a 85       	ldd	r25, Y+10	; 0x0a
    2ca8:	20 e0       	ldi	r18, 0x00	; 0
    2caa:	30 e0       	ldi	r19, 0x00	; 0
    2cac:	40 e8       	ldi	r20, 0x80	; 128
    2cae:	5f e3       	ldi	r21, 0x3F	; 63
    2cb0:	0e 94 87 1a 	call	0x350e	; 0x350e <__ltsf2>
    2cb4:	88 23       	and	r24, r24
    2cb6:	2c f4       	brge	.+10     	; 0x2cc2 <main+0x1664>
		__ticks = 1;
    2cb8:	81 e0       	ldi	r24, 0x01	; 1
    2cba:	90 e0       	ldi	r25, 0x00	; 0
    2cbc:	9e 83       	std	Y+6, r25	; 0x06
    2cbe:	8d 83       	std	Y+5, r24	; 0x05
    2cc0:	3f c0       	rjmp	.+126    	; 0x2d40 <main+0x16e2>
	else if (__tmp > 65535)
    2cc2:	6f 81       	ldd	r22, Y+7	; 0x07
    2cc4:	78 85       	ldd	r23, Y+8	; 0x08
    2cc6:	89 85       	ldd	r24, Y+9	; 0x09
    2cc8:	9a 85       	ldd	r25, Y+10	; 0x0a
    2cca:	20 e0       	ldi	r18, 0x00	; 0
    2ccc:	3f ef       	ldi	r19, 0xFF	; 255
    2cce:	4f e7       	ldi	r20, 0x7F	; 127
    2cd0:	57 e4       	ldi	r21, 0x47	; 71
    2cd2:	0e 94 27 1a 	call	0x344e	; 0x344e <__gtsf2>
    2cd6:	18 16       	cp	r1, r24
    2cd8:	4c f5       	brge	.+82     	; 0x2d2c <main+0x16ce>
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
    2cda:	6b 85       	ldd	r22, Y+11	; 0x0b
    2cdc:	7c 85       	ldd	r23, Y+12	; 0x0c
    2cde:	8d 85       	ldd	r24, Y+13	; 0x0d
    2ce0:	9e 85       	ldd	r25, Y+14	; 0x0e
    2ce2:	20 e0       	ldi	r18, 0x00	; 0
    2ce4:	30 e0       	ldi	r19, 0x00	; 0
    2ce6:	40 e2       	ldi	r20, 0x20	; 32
    2ce8:	51 e4       	ldi	r21, 0x41	; 65
    2cea:	0e 94 81 18 	call	0x3102	; 0x3102 <__mulsf3>
    2cee:	dc 01       	movw	r26, r24
    2cf0:	cb 01       	movw	r24, r22
    2cf2:	bc 01       	movw	r22, r24
    2cf4:	cd 01       	movw	r24, r26
    2cf6:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2cfa:	dc 01       	movw	r26, r24
    2cfc:	cb 01       	movw	r24, r22
    2cfe:	9e 83       	std	Y+6, r25	; 0x06
    2d00:	8d 83       	std	Y+5, r24	; 0x05
    2d02:	0f c0       	rjmp	.+30     	; 0x2d22 <main+0x16c4>
    2d04:	88 ec       	ldi	r24, 0xC8	; 200
    2d06:	90 e0       	ldi	r25, 0x00	; 0
    2d08:	9c 83       	std	Y+4, r25	; 0x04
    2d0a:	8b 83       	std	Y+3, r24	; 0x03
    2d0c:	8b 81       	ldd	r24, Y+3	; 0x03
    2d0e:	9c 81       	ldd	r25, Y+4	; 0x04
    2d10:	01 97       	sbiw	r24, 0x01	; 1
    2d12:	f1 f7       	brne	.-4      	; 0x2d10 <main+0x16b2>
    2d14:	9c 83       	std	Y+4, r25	; 0x04
    2d16:	8b 83       	std	Y+3, r24	; 0x03
		while(__ticks)
		{
			// wait 1/10 ms
			_delay_loop_2(((F_CPU) / 4e3) / 10);
			__ticks --;
    2d18:	8d 81       	ldd	r24, Y+5	; 0x05
    2d1a:	9e 81       	ldd	r25, Y+6	; 0x06
    2d1c:	01 97       	sbiw	r24, 0x01	; 1
    2d1e:	9e 83       	std	Y+6, r25	; 0x06
    2d20:	8d 83       	std	Y+5, r24	; 0x05
		__ticks = 1;
	else if (__tmp > 65535)
	{
		//	__ticks = requested delay in 1/10 ms
		__ticks = (uint16_t) (__ms * 10.0);
		while(__ticks)
    2d22:	8d 81       	ldd	r24, Y+5	; 0x05
    2d24:	9e 81       	ldd	r25, Y+6	; 0x06
    2d26:	00 97       	sbiw	r24, 0x00	; 0
    2d28:	69 f7       	brne	.-38     	; 0x2d04 <main+0x16a6>
    2d2a:	ad cb       	rjmp	.-2214   	; 0x2486 <main+0xe28>
			__ticks --;
		}
		return;
	}
	else
		__ticks = (uint16_t)__tmp;
    2d2c:	6f 81       	ldd	r22, Y+7	; 0x07
    2d2e:	78 85       	ldd	r23, Y+8	; 0x08
    2d30:	89 85       	ldd	r24, Y+9	; 0x09
    2d32:	9a 85       	ldd	r25, Y+10	; 0x0a
    2d34:	0e 94 ab 16 	call	0x2d56	; 0x2d56 <__fixunssfsi>
    2d38:	dc 01       	movw	r26, r24
    2d3a:	cb 01       	movw	r24, r22
    2d3c:	9e 83       	std	Y+6, r25	; 0x06
    2d3e:	8d 83       	std	Y+5, r24	; 0x05
    2d40:	8d 81       	ldd	r24, Y+5	; 0x05
    2d42:	9e 81       	ldd	r25, Y+6	; 0x06
    2d44:	9a 83       	std	Y+2, r25	; 0x02
    2d46:	89 83       	std	Y+1, r24	; 0x01
    2d48:	89 81       	ldd	r24, Y+1	; 0x01
    2d4a:	9a 81       	ldd	r25, Y+2	; 0x02
    2d4c:	01 97       	sbiw	r24, 0x01	; 1
    2d4e:	f1 f7       	brne	.-4      	; 0x2d4c <main+0x16ee>
    2d50:	9a 83       	std	Y+2, r25	; 0x02
    2d52:	89 83       	std	Y+1, r24	; 0x01
    2d54:	98 cb       	rjmp	.-2256   	; 0x2486 <main+0xe28>

00002d56 <__fixunssfsi>:
    2d56:	ef 92       	push	r14
    2d58:	ff 92       	push	r15
    2d5a:	0f 93       	push	r16
    2d5c:	1f 93       	push	r17
    2d5e:	7b 01       	movw	r14, r22
    2d60:	8c 01       	movw	r16, r24
    2d62:	20 e0       	ldi	r18, 0x00	; 0
    2d64:	30 e0       	ldi	r19, 0x00	; 0
    2d66:	40 e0       	ldi	r20, 0x00	; 0
    2d68:	5f e4       	ldi	r21, 0x4F	; 79
    2d6a:	0e 94 57 1a 	call	0x34ae	; 0x34ae <__gesf2>
    2d6e:	88 23       	and	r24, r24
    2d70:	8c f0       	brlt	.+34     	; 0x2d94 <__fixunssfsi+0x3e>
    2d72:	c8 01       	movw	r24, r16
    2d74:	b7 01       	movw	r22, r14
    2d76:	20 e0       	ldi	r18, 0x00	; 0
    2d78:	30 e0       	ldi	r19, 0x00	; 0
    2d7a:	40 e0       	ldi	r20, 0x00	; 0
    2d7c:	5f e4       	ldi	r21, 0x4F	; 79
    2d7e:	0e 94 23 18 	call	0x3046	; 0x3046 <__subsf3>
    2d82:	0e 94 b7 1a 	call	0x356e	; 0x356e <__fixsfsi>
    2d86:	9b 01       	movw	r18, r22
    2d88:	ac 01       	movw	r20, r24
    2d8a:	20 50       	subi	r18, 0x00	; 0
    2d8c:	30 40       	sbci	r19, 0x00	; 0
    2d8e:	40 40       	sbci	r20, 0x00	; 0
    2d90:	50 48       	sbci	r21, 0x80	; 128
    2d92:	06 c0       	rjmp	.+12     	; 0x2da0 <__fixunssfsi+0x4a>
    2d94:	c8 01       	movw	r24, r16
    2d96:	b7 01       	movw	r22, r14
    2d98:	0e 94 b7 1a 	call	0x356e	; 0x356e <__fixsfsi>
    2d9c:	9b 01       	movw	r18, r22
    2d9e:	ac 01       	movw	r20, r24
    2da0:	b9 01       	movw	r22, r18
    2da2:	ca 01       	movw	r24, r20
    2da4:	1f 91       	pop	r17
    2da6:	0f 91       	pop	r16
    2da8:	ff 90       	pop	r15
    2daa:	ef 90       	pop	r14
    2dac:	08 95       	ret

00002dae <_fpadd_parts>:
    2dae:	a0 e0       	ldi	r26, 0x00	; 0
    2db0:	b0 e0       	ldi	r27, 0x00	; 0
    2db2:	ed ed       	ldi	r30, 0xDD	; 221
    2db4:	f6 e1       	ldi	r31, 0x16	; 22
    2db6:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__prologue_saves__>
    2dba:	dc 01       	movw	r26, r24
    2dbc:	2b 01       	movw	r4, r22
    2dbe:	fa 01       	movw	r30, r20
    2dc0:	9c 91       	ld	r25, X
    2dc2:	92 30       	cpi	r25, 0x02	; 2
    2dc4:	08 f4       	brcc	.+2      	; 0x2dc8 <_fpadd_parts+0x1a>
    2dc6:	39 c1       	rjmp	.+626    	; 0x303a <_fpadd_parts+0x28c>
    2dc8:	eb 01       	movw	r28, r22
    2dca:	88 81       	ld	r24, Y
    2dcc:	82 30       	cpi	r24, 0x02	; 2
    2dce:	08 f4       	brcc	.+2      	; 0x2dd2 <_fpadd_parts+0x24>
    2dd0:	33 c1       	rjmp	.+614    	; 0x3038 <_fpadd_parts+0x28a>
    2dd2:	94 30       	cpi	r25, 0x04	; 4
    2dd4:	69 f4       	brne	.+26     	; 0x2df0 <_fpadd_parts+0x42>
    2dd6:	84 30       	cpi	r24, 0x04	; 4
    2dd8:	09 f0       	breq	.+2      	; 0x2ddc <_fpadd_parts+0x2e>
    2dda:	2f c1       	rjmp	.+606    	; 0x303a <_fpadd_parts+0x28c>
    2ddc:	11 96       	adiw	r26, 0x01	; 1
    2dde:	9c 91       	ld	r25, X
    2de0:	11 97       	sbiw	r26, 0x01	; 1
    2de2:	89 81       	ldd	r24, Y+1	; 0x01
    2de4:	98 17       	cp	r25, r24
    2de6:	09 f4       	brne	.+2      	; 0x2dea <_fpadd_parts+0x3c>
    2de8:	28 c1       	rjmp	.+592    	; 0x303a <_fpadd_parts+0x28c>
    2dea:	ad e4       	ldi	r26, 0x4D	; 77
    2dec:	b2 e0       	ldi	r27, 0x02	; 2
    2dee:	25 c1       	rjmp	.+586    	; 0x303a <_fpadd_parts+0x28c>
    2df0:	84 30       	cpi	r24, 0x04	; 4
    2df2:	09 f4       	brne	.+2      	; 0x2df6 <_fpadd_parts+0x48>
    2df4:	21 c1       	rjmp	.+578    	; 0x3038 <_fpadd_parts+0x28a>
    2df6:	82 30       	cpi	r24, 0x02	; 2
    2df8:	a9 f4       	brne	.+42     	; 0x2e24 <_fpadd_parts+0x76>
    2dfa:	92 30       	cpi	r25, 0x02	; 2
    2dfc:	09 f0       	breq	.+2      	; 0x2e00 <_fpadd_parts+0x52>
    2dfe:	1d c1       	rjmp	.+570    	; 0x303a <_fpadd_parts+0x28c>
    2e00:	9a 01       	movw	r18, r20
    2e02:	ad 01       	movw	r20, r26
    2e04:	88 e0       	ldi	r24, 0x08	; 8
    2e06:	ea 01       	movw	r28, r20
    2e08:	09 90       	ld	r0, Y+
    2e0a:	ae 01       	movw	r20, r28
    2e0c:	e9 01       	movw	r28, r18
    2e0e:	09 92       	st	Y+, r0
    2e10:	9e 01       	movw	r18, r28
    2e12:	81 50       	subi	r24, 0x01	; 1
    2e14:	c1 f7       	brne	.-16     	; 0x2e06 <_fpadd_parts+0x58>
    2e16:	e2 01       	movw	r28, r4
    2e18:	89 81       	ldd	r24, Y+1	; 0x01
    2e1a:	11 96       	adiw	r26, 0x01	; 1
    2e1c:	9c 91       	ld	r25, X
    2e1e:	89 23       	and	r24, r25
    2e20:	81 83       	std	Z+1, r24	; 0x01
    2e22:	08 c1       	rjmp	.+528    	; 0x3034 <_fpadd_parts+0x286>
    2e24:	92 30       	cpi	r25, 0x02	; 2
    2e26:	09 f4       	brne	.+2      	; 0x2e2a <_fpadd_parts+0x7c>
    2e28:	07 c1       	rjmp	.+526    	; 0x3038 <_fpadd_parts+0x28a>
    2e2a:	12 96       	adiw	r26, 0x02	; 2
    2e2c:	2d 90       	ld	r2, X+
    2e2e:	3c 90       	ld	r3, X
    2e30:	13 97       	sbiw	r26, 0x03	; 3
    2e32:	eb 01       	movw	r28, r22
    2e34:	8a 81       	ldd	r24, Y+2	; 0x02
    2e36:	9b 81       	ldd	r25, Y+3	; 0x03
    2e38:	14 96       	adiw	r26, 0x04	; 4
    2e3a:	ad 90       	ld	r10, X+
    2e3c:	bd 90       	ld	r11, X+
    2e3e:	cd 90       	ld	r12, X+
    2e40:	dc 90       	ld	r13, X
    2e42:	17 97       	sbiw	r26, 0x07	; 7
    2e44:	ec 80       	ldd	r14, Y+4	; 0x04
    2e46:	fd 80       	ldd	r15, Y+5	; 0x05
    2e48:	0e 81       	ldd	r16, Y+6	; 0x06
    2e4a:	1f 81       	ldd	r17, Y+7	; 0x07
    2e4c:	91 01       	movw	r18, r2
    2e4e:	28 1b       	sub	r18, r24
    2e50:	39 0b       	sbc	r19, r25
    2e52:	b9 01       	movw	r22, r18
    2e54:	37 ff       	sbrs	r19, 7
    2e56:	04 c0       	rjmp	.+8      	; 0x2e60 <_fpadd_parts+0xb2>
    2e58:	66 27       	eor	r22, r22
    2e5a:	77 27       	eor	r23, r23
    2e5c:	62 1b       	sub	r22, r18
    2e5e:	73 0b       	sbc	r23, r19
    2e60:	60 32       	cpi	r22, 0x20	; 32
    2e62:	71 05       	cpc	r23, r1
    2e64:	0c f0       	brlt	.+2      	; 0x2e68 <_fpadd_parts+0xba>
    2e66:	61 c0       	rjmp	.+194    	; 0x2f2a <_fpadd_parts+0x17c>
    2e68:	12 16       	cp	r1, r18
    2e6a:	13 06       	cpc	r1, r19
    2e6c:	6c f5       	brge	.+90     	; 0x2ec8 <_fpadd_parts+0x11a>
    2e6e:	37 01       	movw	r6, r14
    2e70:	48 01       	movw	r8, r16
    2e72:	06 2e       	mov	r0, r22
    2e74:	04 c0       	rjmp	.+8      	; 0x2e7e <_fpadd_parts+0xd0>
    2e76:	96 94       	lsr	r9
    2e78:	87 94       	ror	r8
    2e7a:	77 94       	ror	r7
    2e7c:	67 94       	ror	r6
    2e7e:	0a 94       	dec	r0
    2e80:	d2 f7       	brpl	.-12     	; 0x2e76 <_fpadd_parts+0xc8>
    2e82:	21 e0       	ldi	r18, 0x01	; 1
    2e84:	30 e0       	ldi	r19, 0x00	; 0
    2e86:	40 e0       	ldi	r20, 0x00	; 0
    2e88:	50 e0       	ldi	r21, 0x00	; 0
    2e8a:	04 c0       	rjmp	.+8      	; 0x2e94 <_fpadd_parts+0xe6>
    2e8c:	22 0f       	add	r18, r18
    2e8e:	33 1f       	adc	r19, r19
    2e90:	44 1f       	adc	r20, r20
    2e92:	55 1f       	adc	r21, r21
    2e94:	6a 95       	dec	r22
    2e96:	d2 f7       	brpl	.-12     	; 0x2e8c <_fpadd_parts+0xde>
    2e98:	21 50       	subi	r18, 0x01	; 1
    2e9a:	30 40       	sbci	r19, 0x00	; 0
    2e9c:	40 40       	sbci	r20, 0x00	; 0
    2e9e:	50 40       	sbci	r21, 0x00	; 0
    2ea0:	2e 21       	and	r18, r14
    2ea2:	3f 21       	and	r19, r15
    2ea4:	40 23       	and	r20, r16
    2ea6:	51 23       	and	r21, r17
    2ea8:	21 15       	cp	r18, r1
    2eaa:	31 05       	cpc	r19, r1
    2eac:	41 05       	cpc	r20, r1
    2eae:	51 05       	cpc	r21, r1
    2eb0:	21 f0       	breq	.+8      	; 0x2eba <_fpadd_parts+0x10c>
    2eb2:	21 e0       	ldi	r18, 0x01	; 1
    2eb4:	30 e0       	ldi	r19, 0x00	; 0
    2eb6:	40 e0       	ldi	r20, 0x00	; 0
    2eb8:	50 e0       	ldi	r21, 0x00	; 0
    2eba:	79 01       	movw	r14, r18
    2ebc:	8a 01       	movw	r16, r20
    2ebe:	e6 28       	or	r14, r6
    2ec0:	f7 28       	or	r15, r7
    2ec2:	08 29       	or	r16, r8
    2ec4:	19 29       	or	r17, r9
    2ec6:	3c c0       	rjmp	.+120    	; 0x2f40 <_fpadd_parts+0x192>
    2ec8:	23 2b       	or	r18, r19
    2eca:	d1 f1       	breq	.+116    	; 0x2f40 <_fpadd_parts+0x192>
    2ecc:	26 0e       	add	r2, r22
    2ece:	37 1e       	adc	r3, r23
    2ed0:	35 01       	movw	r6, r10
    2ed2:	46 01       	movw	r8, r12
    2ed4:	06 2e       	mov	r0, r22
    2ed6:	04 c0       	rjmp	.+8      	; 0x2ee0 <_fpadd_parts+0x132>
    2ed8:	96 94       	lsr	r9
    2eda:	87 94       	ror	r8
    2edc:	77 94       	ror	r7
    2ede:	67 94       	ror	r6
    2ee0:	0a 94       	dec	r0
    2ee2:	d2 f7       	brpl	.-12     	; 0x2ed8 <_fpadd_parts+0x12a>
    2ee4:	21 e0       	ldi	r18, 0x01	; 1
    2ee6:	30 e0       	ldi	r19, 0x00	; 0
    2ee8:	40 e0       	ldi	r20, 0x00	; 0
    2eea:	50 e0       	ldi	r21, 0x00	; 0
    2eec:	04 c0       	rjmp	.+8      	; 0x2ef6 <_fpadd_parts+0x148>
    2eee:	22 0f       	add	r18, r18
    2ef0:	33 1f       	adc	r19, r19
    2ef2:	44 1f       	adc	r20, r20
    2ef4:	55 1f       	adc	r21, r21
    2ef6:	6a 95       	dec	r22
    2ef8:	d2 f7       	brpl	.-12     	; 0x2eee <_fpadd_parts+0x140>
    2efa:	21 50       	subi	r18, 0x01	; 1
    2efc:	30 40       	sbci	r19, 0x00	; 0
    2efe:	40 40       	sbci	r20, 0x00	; 0
    2f00:	50 40       	sbci	r21, 0x00	; 0
    2f02:	2a 21       	and	r18, r10
    2f04:	3b 21       	and	r19, r11
    2f06:	4c 21       	and	r20, r12
    2f08:	5d 21       	and	r21, r13
    2f0a:	21 15       	cp	r18, r1
    2f0c:	31 05       	cpc	r19, r1
    2f0e:	41 05       	cpc	r20, r1
    2f10:	51 05       	cpc	r21, r1
    2f12:	21 f0       	breq	.+8      	; 0x2f1c <_fpadd_parts+0x16e>
    2f14:	21 e0       	ldi	r18, 0x01	; 1
    2f16:	30 e0       	ldi	r19, 0x00	; 0
    2f18:	40 e0       	ldi	r20, 0x00	; 0
    2f1a:	50 e0       	ldi	r21, 0x00	; 0
    2f1c:	59 01       	movw	r10, r18
    2f1e:	6a 01       	movw	r12, r20
    2f20:	a6 28       	or	r10, r6
    2f22:	b7 28       	or	r11, r7
    2f24:	c8 28       	or	r12, r8
    2f26:	d9 28       	or	r13, r9
    2f28:	0b c0       	rjmp	.+22     	; 0x2f40 <_fpadd_parts+0x192>
    2f2a:	82 15       	cp	r24, r2
    2f2c:	93 05       	cpc	r25, r3
    2f2e:	2c f0       	brlt	.+10     	; 0x2f3a <_fpadd_parts+0x18c>
    2f30:	1c 01       	movw	r2, r24
    2f32:	aa 24       	eor	r10, r10
    2f34:	bb 24       	eor	r11, r11
    2f36:	65 01       	movw	r12, r10
    2f38:	03 c0       	rjmp	.+6      	; 0x2f40 <_fpadd_parts+0x192>
    2f3a:	ee 24       	eor	r14, r14
    2f3c:	ff 24       	eor	r15, r15
    2f3e:	87 01       	movw	r16, r14
    2f40:	11 96       	adiw	r26, 0x01	; 1
    2f42:	9c 91       	ld	r25, X
    2f44:	d2 01       	movw	r26, r4
    2f46:	11 96       	adiw	r26, 0x01	; 1
    2f48:	8c 91       	ld	r24, X
    2f4a:	98 17       	cp	r25, r24
    2f4c:	09 f4       	brne	.+2      	; 0x2f50 <_fpadd_parts+0x1a2>
    2f4e:	45 c0       	rjmp	.+138    	; 0x2fda <_fpadd_parts+0x22c>
    2f50:	99 23       	and	r25, r25
    2f52:	39 f0       	breq	.+14     	; 0x2f62 <_fpadd_parts+0x1b4>
    2f54:	a8 01       	movw	r20, r16
    2f56:	97 01       	movw	r18, r14
    2f58:	2a 19       	sub	r18, r10
    2f5a:	3b 09       	sbc	r19, r11
    2f5c:	4c 09       	sbc	r20, r12
    2f5e:	5d 09       	sbc	r21, r13
    2f60:	06 c0       	rjmp	.+12     	; 0x2f6e <_fpadd_parts+0x1c0>
    2f62:	a6 01       	movw	r20, r12
    2f64:	95 01       	movw	r18, r10
    2f66:	2e 19       	sub	r18, r14
    2f68:	3f 09       	sbc	r19, r15
    2f6a:	40 0b       	sbc	r20, r16
    2f6c:	51 0b       	sbc	r21, r17
    2f6e:	57 fd       	sbrc	r21, 7
    2f70:	08 c0       	rjmp	.+16     	; 0x2f82 <_fpadd_parts+0x1d4>
    2f72:	11 82       	std	Z+1, r1	; 0x01
    2f74:	33 82       	std	Z+3, r3	; 0x03
    2f76:	22 82       	std	Z+2, r2	; 0x02
    2f78:	24 83       	std	Z+4, r18	; 0x04
    2f7a:	35 83       	std	Z+5, r19	; 0x05
    2f7c:	46 83       	std	Z+6, r20	; 0x06
    2f7e:	57 83       	std	Z+7, r21	; 0x07
    2f80:	1d c0       	rjmp	.+58     	; 0x2fbc <_fpadd_parts+0x20e>
    2f82:	81 e0       	ldi	r24, 0x01	; 1
    2f84:	81 83       	std	Z+1, r24	; 0x01
    2f86:	33 82       	std	Z+3, r3	; 0x03
    2f88:	22 82       	std	Z+2, r2	; 0x02
    2f8a:	88 27       	eor	r24, r24
    2f8c:	99 27       	eor	r25, r25
    2f8e:	dc 01       	movw	r26, r24
    2f90:	82 1b       	sub	r24, r18
    2f92:	93 0b       	sbc	r25, r19
    2f94:	a4 0b       	sbc	r26, r20
    2f96:	b5 0b       	sbc	r27, r21
    2f98:	84 83       	std	Z+4, r24	; 0x04
    2f9a:	95 83       	std	Z+5, r25	; 0x05
    2f9c:	a6 83       	std	Z+6, r26	; 0x06
    2f9e:	b7 83       	std	Z+7, r27	; 0x07
    2fa0:	0d c0       	rjmp	.+26     	; 0x2fbc <_fpadd_parts+0x20e>
    2fa2:	22 0f       	add	r18, r18
    2fa4:	33 1f       	adc	r19, r19
    2fa6:	44 1f       	adc	r20, r20
    2fa8:	55 1f       	adc	r21, r21
    2faa:	24 83       	std	Z+4, r18	; 0x04
    2fac:	35 83       	std	Z+5, r19	; 0x05
    2fae:	46 83       	std	Z+6, r20	; 0x06
    2fb0:	57 83       	std	Z+7, r21	; 0x07
    2fb2:	82 81       	ldd	r24, Z+2	; 0x02
    2fb4:	93 81       	ldd	r25, Z+3	; 0x03
    2fb6:	01 97       	sbiw	r24, 0x01	; 1
    2fb8:	93 83       	std	Z+3, r25	; 0x03
    2fba:	82 83       	std	Z+2, r24	; 0x02
    2fbc:	24 81       	ldd	r18, Z+4	; 0x04
    2fbe:	35 81       	ldd	r19, Z+5	; 0x05
    2fc0:	46 81       	ldd	r20, Z+6	; 0x06
    2fc2:	57 81       	ldd	r21, Z+7	; 0x07
    2fc4:	da 01       	movw	r26, r20
    2fc6:	c9 01       	movw	r24, r18
    2fc8:	01 97       	sbiw	r24, 0x01	; 1
    2fca:	a1 09       	sbc	r26, r1
    2fcc:	b1 09       	sbc	r27, r1
    2fce:	8f 5f       	subi	r24, 0xFF	; 255
    2fd0:	9f 4f       	sbci	r25, 0xFF	; 255
    2fd2:	af 4f       	sbci	r26, 0xFF	; 255
    2fd4:	bf 43       	sbci	r27, 0x3F	; 63
    2fd6:	28 f3       	brcs	.-54     	; 0x2fa2 <_fpadd_parts+0x1f4>
    2fd8:	0b c0       	rjmp	.+22     	; 0x2ff0 <_fpadd_parts+0x242>
    2fda:	91 83       	std	Z+1, r25	; 0x01
    2fdc:	33 82       	std	Z+3, r3	; 0x03
    2fde:	22 82       	std	Z+2, r2	; 0x02
    2fe0:	ea 0c       	add	r14, r10
    2fe2:	fb 1c       	adc	r15, r11
    2fe4:	0c 1d       	adc	r16, r12
    2fe6:	1d 1d       	adc	r17, r13
    2fe8:	e4 82       	std	Z+4, r14	; 0x04
    2fea:	f5 82       	std	Z+5, r15	; 0x05
    2fec:	06 83       	std	Z+6, r16	; 0x06
    2fee:	17 83       	std	Z+7, r17	; 0x07
    2ff0:	83 e0       	ldi	r24, 0x03	; 3
    2ff2:	80 83       	st	Z, r24
    2ff4:	24 81       	ldd	r18, Z+4	; 0x04
    2ff6:	35 81       	ldd	r19, Z+5	; 0x05
    2ff8:	46 81       	ldd	r20, Z+6	; 0x06
    2ffa:	57 81       	ldd	r21, Z+7	; 0x07
    2ffc:	57 ff       	sbrs	r21, 7
    2ffe:	1a c0       	rjmp	.+52     	; 0x3034 <_fpadd_parts+0x286>
    3000:	c9 01       	movw	r24, r18
    3002:	aa 27       	eor	r26, r26
    3004:	97 fd       	sbrc	r25, 7
    3006:	a0 95       	com	r26
    3008:	ba 2f       	mov	r27, r26
    300a:	81 70       	andi	r24, 0x01	; 1
    300c:	90 70       	andi	r25, 0x00	; 0
    300e:	a0 70       	andi	r26, 0x00	; 0
    3010:	b0 70       	andi	r27, 0x00	; 0
    3012:	56 95       	lsr	r21
    3014:	47 95       	ror	r20
    3016:	37 95       	ror	r19
    3018:	27 95       	ror	r18
    301a:	82 2b       	or	r24, r18
    301c:	93 2b       	or	r25, r19
    301e:	a4 2b       	or	r26, r20
    3020:	b5 2b       	or	r27, r21
    3022:	84 83       	std	Z+4, r24	; 0x04
    3024:	95 83       	std	Z+5, r25	; 0x05
    3026:	a6 83       	std	Z+6, r26	; 0x06
    3028:	b7 83       	std	Z+7, r27	; 0x07
    302a:	82 81       	ldd	r24, Z+2	; 0x02
    302c:	93 81       	ldd	r25, Z+3	; 0x03
    302e:	01 96       	adiw	r24, 0x01	; 1
    3030:	93 83       	std	Z+3, r25	; 0x03
    3032:	82 83       	std	Z+2, r24	; 0x02
    3034:	df 01       	movw	r26, r30
    3036:	01 c0       	rjmp	.+2      	; 0x303a <_fpadd_parts+0x28c>
    3038:	d2 01       	movw	r26, r4
    303a:	cd 01       	movw	r24, r26
    303c:	cd b7       	in	r28, 0x3d	; 61
    303e:	de b7       	in	r29, 0x3e	; 62
    3040:	e2 e1       	ldi	r30, 0x12	; 18
    3042:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__epilogue_restores__>

00003046 <__subsf3>:
    3046:	a0 e2       	ldi	r26, 0x20	; 32
    3048:	b0 e0       	ldi	r27, 0x00	; 0
    304a:	e9 e2       	ldi	r30, 0x29	; 41
    304c:	f8 e1       	ldi	r31, 0x18	; 24
    304e:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__prologue_saves__+0x18>
    3052:	69 83       	std	Y+1, r22	; 0x01
    3054:	7a 83       	std	Y+2, r23	; 0x02
    3056:	8b 83       	std	Y+3, r24	; 0x03
    3058:	9c 83       	std	Y+4, r25	; 0x04
    305a:	2d 83       	std	Y+5, r18	; 0x05
    305c:	3e 83       	std	Y+6, r19	; 0x06
    305e:	4f 83       	std	Y+7, r20	; 0x07
    3060:	58 87       	std	Y+8, r21	; 0x08
    3062:	e9 e0       	ldi	r30, 0x09	; 9
    3064:	ee 2e       	mov	r14, r30
    3066:	f1 2c       	mov	r15, r1
    3068:	ec 0e       	add	r14, r28
    306a:	fd 1e       	adc	r15, r29
    306c:	ce 01       	movw	r24, r28
    306e:	01 96       	adiw	r24, 0x01	; 1
    3070:	b7 01       	movw	r22, r14
    3072:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    3076:	8e 01       	movw	r16, r28
    3078:	0f 5e       	subi	r16, 0xEF	; 239
    307a:	1f 4f       	sbci	r17, 0xFF	; 255
    307c:	ce 01       	movw	r24, r28
    307e:	05 96       	adiw	r24, 0x05	; 5
    3080:	b8 01       	movw	r22, r16
    3082:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    3086:	8a 89       	ldd	r24, Y+18	; 0x12
    3088:	91 e0       	ldi	r25, 0x01	; 1
    308a:	89 27       	eor	r24, r25
    308c:	8a 8b       	std	Y+18, r24	; 0x12
    308e:	c7 01       	movw	r24, r14
    3090:	b8 01       	movw	r22, r16
    3092:	ae 01       	movw	r20, r28
    3094:	47 5e       	subi	r20, 0xE7	; 231
    3096:	5f 4f       	sbci	r21, 0xFF	; 255
    3098:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_fpadd_parts>
    309c:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__pack_f>
    30a0:	a0 96       	adiw	r28, 0x20	; 32
    30a2:	e6 e0       	ldi	r30, 0x06	; 6
    30a4:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__epilogue_restores__+0x18>

000030a8 <__addsf3>:
    30a8:	a0 e2       	ldi	r26, 0x20	; 32
    30aa:	b0 e0       	ldi	r27, 0x00	; 0
    30ac:	ea e5       	ldi	r30, 0x5A	; 90
    30ae:	f8 e1       	ldi	r31, 0x18	; 24
    30b0:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__prologue_saves__+0x18>
    30b4:	69 83       	std	Y+1, r22	; 0x01
    30b6:	7a 83       	std	Y+2, r23	; 0x02
    30b8:	8b 83       	std	Y+3, r24	; 0x03
    30ba:	9c 83       	std	Y+4, r25	; 0x04
    30bc:	2d 83       	std	Y+5, r18	; 0x05
    30be:	3e 83       	std	Y+6, r19	; 0x06
    30c0:	4f 83       	std	Y+7, r20	; 0x07
    30c2:	58 87       	std	Y+8, r21	; 0x08
    30c4:	f9 e0       	ldi	r31, 0x09	; 9
    30c6:	ef 2e       	mov	r14, r31
    30c8:	f1 2c       	mov	r15, r1
    30ca:	ec 0e       	add	r14, r28
    30cc:	fd 1e       	adc	r15, r29
    30ce:	ce 01       	movw	r24, r28
    30d0:	01 96       	adiw	r24, 0x01	; 1
    30d2:	b7 01       	movw	r22, r14
    30d4:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    30d8:	8e 01       	movw	r16, r28
    30da:	0f 5e       	subi	r16, 0xEF	; 239
    30dc:	1f 4f       	sbci	r17, 0xFF	; 255
    30de:	ce 01       	movw	r24, r28
    30e0:	05 96       	adiw	r24, 0x05	; 5
    30e2:	b8 01       	movw	r22, r16
    30e4:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    30e8:	c7 01       	movw	r24, r14
    30ea:	b8 01       	movw	r22, r16
    30ec:	ae 01       	movw	r20, r28
    30ee:	47 5e       	subi	r20, 0xE7	; 231
    30f0:	5f 4f       	sbci	r21, 0xFF	; 255
    30f2:	0e 94 d7 16 	call	0x2dae	; 0x2dae <_fpadd_parts>
    30f6:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__pack_f>
    30fa:	a0 96       	adiw	r28, 0x20	; 32
    30fc:	e6 e0       	ldi	r30, 0x06	; 6
    30fe:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__epilogue_restores__+0x18>

00003102 <__mulsf3>:
    3102:	a0 e2       	ldi	r26, 0x20	; 32
    3104:	b0 e0       	ldi	r27, 0x00	; 0
    3106:	e7 e8       	ldi	r30, 0x87	; 135
    3108:	f8 e1       	ldi	r31, 0x18	; 24
    310a:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__prologue_saves__>
    310e:	69 83       	std	Y+1, r22	; 0x01
    3110:	7a 83       	std	Y+2, r23	; 0x02
    3112:	8b 83       	std	Y+3, r24	; 0x03
    3114:	9c 83       	std	Y+4, r25	; 0x04
    3116:	2d 83       	std	Y+5, r18	; 0x05
    3118:	3e 83       	std	Y+6, r19	; 0x06
    311a:	4f 83       	std	Y+7, r20	; 0x07
    311c:	58 87       	std	Y+8, r21	; 0x08
    311e:	ce 01       	movw	r24, r28
    3120:	01 96       	adiw	r24, 0x01	; 1
    3122:	be 01       	movw	r22, r28
    3124:	67 5f       	subi	r22, 0xF7	; 247
    3126:	7f 4f       	sbci	r23, 0xFF	; 255
    3128:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    312c:	ce 01       	movw	r24, r28
    312e:	05 96       	adiw	r24, 0x05	; 5
    3130:	be 01       	movw	r22, r28
    3132:	6f 5e       	subi	r22, 0xEF	; 239
    3134:	7f 4f       	sbci	r23, 0xFF	; 255
    3136:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    313a:	99 85       	ldd	r25, Y+9	; 0x09
    313c:	92 30       	cpi	r25, 0x02	; 2
    313e:	88 f0       	brcs	.+34     	; 0x3162 <__mulsf3+0x60>
    3140:	89 89       	ldd	r24, Y+17	; 0x11
    3142:	82 30       	cpi	r24, 0x02	; 2
    3144:	c8 f0       	brcs	.+50     	; 0x3178 <__mulsf3+0x76>
    3146:	94 30       	cpi	r25, 0x04	; 4
    3148:	19 f4       	brne	.+6      	; 0x3150 <__mulsf3+0x4e>
    314a:	82 30       	cpi	r24, 0x02	; 2
    314c:	51 f4       	brne	.+20     	; 0x3162 <__mulsf3+0x60>
    314e:	04 c0       	rjmp	.+8      	; 0x3158 <__mulsf3+0x56>
    3150:	84 30       	cpi	r24, 0x04	; 4
    3152:	29 f4       	brne	.+10     	; 0x315e <__mulsf3+0x5c>
    3154:	92 30       	cpi	r25, 0x02	; 2
    3156:	81 f4       	brne	.+32     	; 0x3178 <__mulsf3+0x76>
    3158:	8d e4       	ldi	r24, 0x4D	; 77
    315a:	92 e0       	ldi	r25, 0x02	; 2
    315c:	c6 c0       	rjmp	.+396    	; 0x32ea <__mulsf3+0x1e8>
    315e:	92 30       	cpi	r25, 0x02	; 2
    3160:	49 f4       	brne	.+18     	; 0x3174 <__mulsf3+0x72>
    3162:	20 e0       	ldi	r18, 0x00	; 0
    3164:	9a 85       	ldd	r25, Y+10	; 0x0a
    3166:	8a 89       	ldd	r24, Y+18	; 0x12
    3168:	98 13       	cpse	r25, r24
    316a:	21 e0       	ldi	r18, 0x01	; 1
    316c:	2a 87       	std	Y+10, r18	; 0x0a
    316e:	ce 01       	movw	r24, r28
    3170:	09 96       	adiw	r24, 0x09	; 9
    3172:	bb c0       	rjmp	.+374    	; 0x32ea <__mulsf3+0x1e8>
    3174:	82 30       	cpi	r24, 0x02	; 2
    3176:	49 f4       	brne	.+18     	; 0x318a <__mulsf3+0x88>
    3178:	20 e0       	ldi	r18, 0x00	; 0
    317a:	9a 85       	ldd	r25, Y+10	; 0x0a
    317c:	8a 89       	ldd	r24, Y+18	; 0x12
    317e:	98 13       	cpse	r25, r24
    3180:	21 e0       	ldi	r18, 0x01	; 1
    3182:	2a 8b       	std	Y+18, r18	; 0x12
    3184:	ce 01       	movw	r24, r28
    3186:	41 96       	adiw	r24, 0x11	; 17
    3188:	b0 c0       	rjmp	.+352    	; 0x32ea <__mulsf3+0x1e8>
    318a:	2d 84       	ldd	r2, Y+13	; 0x0d
    318c:	3e 84       	ldd	r3, Y+14	; 0x0e
    318e:	4f 84       	ldd	r4, Y+15	; 0x0f
    3190:	58 88       	ldd	r5, Y+16	; 0x10
    3192:	6d 88       	ldd	r6, Y+21	; 0x15
    3194:	7e 88       	ldd	r7, Y+22	; 0x16
    3196:	8f 88       	ldd	r8, Y+23	; 0x17
    3198:	98 8c       	ldd	r9, Y+24	; 0x18
    319a:	ee 24       	eor	r14, r14
    319c:	ff 24       	eor	r15, r15
    319e:	87 01       	movw	r16, r14
    31a0:	aa 24       	eor	r10, r10
    31a2:	bb 24       	eor	r11, r11
    31a4:	65 01       	movw	r12, r10
    31a6:	40 e0       	ldi	r20, 0x00	; 0
    31a8:	50 e0       	ldi	r21, 0x00	; 0
    31aa:	60 e0       	ldi	r22, 0x00	; 0
    31ac:	70 e0       	ldi	r23, 0x00	; 0
    31ae:	e0 e0       	ldi	r30, 0x00	; 0
    31b0:	f0 e0       	ldi	r31, 0x00	; 0
    31b2:	c1 01       	movw	r24, r2
    31b4:	81 70       	andi	r24, 0x01	; 1
    31b6:	90 70       	andi	r25, 0x00	; 0
    31b8:	89 2b       	or	r24, r25
    31ba:	e9 f0       	breq	.+58     	; 0x31f6 <__mulsf3+0xf4>
    31bc:	e6 0c       	add	r14, r6
    31be:	f7 1c       	adc	r15, r7
    31c0:	08 1d       	adc	r16, r8
    31c2:	19 1d       	adc	r17, r9
    31c4:	9a 01       	movw	r18, r20
    31c6:	ab 01       	movw	r20, r22
    31c8:	2a 0d       	add	r18, r10
    31ca:	3b 1d       	adc	r19, r11
    31cc:	4c 1d       	adc	r20, r12
    31ce:	5d 1d       	adc	r21, r13
    31d0:	80 e0       	ldi	r24, 0x00	; 0
    31d2:	90 e0       	ldi	r25, 0x00	; 0
    31d4:	a0 e0       	ldi	r26, 0x00	; 0
    31d6:	b0 e0       	ldi	r27, 0x00	; 0
    31d8:	e6 14       	cp	r14, r6
    31da:	f7 04       	cpc	r15, r7
    31dc:	08 05       	cpc	r16, r8
    31de:	19 05       	cpc	r17, r9
    31e0:	20 f4       	brcc	.+8      	; 0x31ea <__mulsf3+0xe8>
    31e2:	81 e0       	ldi	r24, 0x01	; 1
    31e4:	90 e0       	ldi	r25, 0x00	; 0
    31e6:	a0 e0       	ldi	r26, 0x00	; 0
    31e8:	b0 e0       	ldi	r27, 0x00	; 0
    31ea:	ba 01       	movw	r22, r20
    31ec:	a9 01       	movw	r20, r18
    31ee:	48 0f       	add	r20, r24
    31f0:	59 1f       	adc	r21, r25
    31f2:	6a 1f       	adc	r22, r26
    31f4:	7b 1f       	adc	r23, r27
    31f6:	aa 0c       	add	r10, r10
    31f8:	bb 1c       	adc	r11, r11
    31fa:	cc 1c       	adc	r12, r12
    31fc:	dd 1c       	adc	r13, r13
    31fe:	97 fe       	sbrs	r9, 7
    3200:	08 c0       	rjmp	.+16     	; 0x3212 <__mulsf3+0x110>
    3202:	81 e0       	ldi	r24, 0x01	; 1
    3204:	90 e0       	ldi	r25, 0x00	; 0
    3206:	a0 e0       	ldi	r26, 0x00	; 0
    3208:	b0 e0       	ldi	r27, 0x00	; 0
    320a:	a8 2a       	or	r10, r24
    320c:	b9 2a       	or	r11, r25
    320e:	ca 2a       	or	r12, r26
    3210:	db 2a       	or	r13, r27
    3212:	31 96       	adiw	r30, 0x01	; 1
    3214:	e0 32       	cpi	r30, 0x20	; 32
    3216:	f1 05       	cpc	r31, r1
    3218:	49 f0       	breq	.+18     	; 0x322c <__mulsf3+0x12a>
    321a:	66 0c       	add	r6, r6
    321c:	77 1c       	adc	r7, r7
    321e:	88 1c       	adc	r8, r8
    3220:	99 1c       	adc	r9, r9
    3222:	56 94       	lsr	r5
    3224:	47 94       	ror	r4
    3226:	37 94       	ror	r3
    3228:	27 94       	ror	r2
    322a:	c3 cf       	rjmp	.-122    	; 0x31b2 <__mulsf3+0xb0>
    322c:	fa 85       	ldd	r31, Y+10	; 0x0a
    322e:	ea 89       	ldd	r30, Y+18	; 0x12
    3230:	2b 89       	ldd	r18, Y+19	; 0x13
    3232:	3c 89       	ldd	r19, Y+20	; 0x14
    3234:	8b 85       	ldd	r24, Y+11	; 0x0b
    3236:	9c 85       	ldd	r25, Y+12	; 0x0c
    3238:	28 0f       	add	r18, r24
    323a:	39 1f       	adc	r19, r25
    323c:	2e 5f       	subi	r18, 0xFE	; 254
    323e:	3f 4f       	sbci	r19, 0xFF	; 255
    3240:	17 c0       	rjmp	.+46     	; 0x3270 <__mulsf3+0x16e>
    3242:	ca 01       	movw	r24, r20
    3244:	81 70       	andi	r24, 0x01	; 1
    3246:	90 70       	andi	r25, 0x00	; 0
    3248:	89 2b       	or	r24, r25
    324a:	61 f0       	breq	.+24     	; 0x3264 <__mulsf3+0x162>
    324c:	16 95       	lsr	r17
    324e:	07 95       	ror	r16
    3250:	f7 94       	ror	r15
    3252:	e7 94       	ror	r14
    3254:	80 e0       	ldi	r24, 0x00	; 0
    3256:	90 e0       	ldi	r25, 0x00	; 0
    3258:	a0 e0       	ldi	r26, 0x00	; 0
    325a:	b0 e8       	ldi	r27, 0x80	; 128
    325c:	e8 2a       	or	r14, r24
    325e:	f9 2a       	or	r15, r25
    3260:	0a 2b       	or	r16, r26
    3262:	1b 2b       	or	r17, r27
    3264:	76 95       	lsr	r23
    3266:	67 95       	ror	r22
    3268:	57 95       	ror	r21
    326a:	47 95       	ror	r20
    326c:	2f 5f       	subi	r18, 0xFF	; 255
    326e:	3f 4f       	sbci	r19, 0xFF	; 255
    3270:	77 fd       	sbrc	r23, 7
    3272:	e7 cf       	rjmp	.-50     	; 0x3242 <__mulsf3+0x140>
    3274:	0c c0       	rjmp	.+24     	; 0x328e <__mulsf3+0x18c>
    3276:	44 0f       	add	r20, r20
    3278:	55 1f       	adc	r21, r21
    327a:	66 1f       	adc	r22, r22
    327c:	77 1f       	adc	r23, r23
    327e:	17 fd       	sbrc	r17, 7
    3280:	41 60       	ori	r20, 0x01	; 1
    3282:	ee 0c       	add	r14, r14
    3284:	ff 1c       	adc	r15, r15
    3286:	00 1f       	adc	r16, r16
    3288:	11 1f       	adc	r17, r17
    328a:	21 50       	subi	r18, 0x01	; 1
    328c:	30 40       	sbci	r19, 0x00	; 0
    328e:	40 30       	cpi	r20, 0x00	; 0
    3290:	90 e0       	ldi	r25, 0x00	; 0
    3292:	59 07       	cpc	r21, r25
    3294:	90 e0       	ldi	r25, 0x00	; 0
    3296:	69 07       	cpc	r22, r25
    3298:	90 e4       	ldi	r25, 0x40	; 64
    329a:	79 07       	cpc	r23, r25
    329c:	60 f3       	brcs	.-40     	; 0x3276 <__mulsf3+0x174>
    329e:	2b 8f       	std	Y+27, r18	; 0x1b
    32a0:	3c 8f       	std	Y+28, r19	; 0x1c
    32a2:	db 01       	movw	r26, r22
    32a4:	ca 01       	movw	r24, r20
    32a6:	8f 77       	andi	r24, 0x7F	; 127
    32a8:	90 70       	andi	r25, 0x00	; 0
    32aa:	a0 70       	andi	r26, 0x00	; 0
    32ac:	b0 70       	andi	r27, 0x00	; 0
    32ae:	80 34       	cpi	r24, 0x40	; 64
    32b0:	91 05       	cpc	r25, r1
    32b2:	a1 05       	cpc	r26, r1
    32b4:	b1 05       	cpc	r27, r1
    32b6:	61 f4       	brne	.+24     	; 0x32d0 <__mulsf3+0x1ce>
    32b8:	47 fd       	sbrc	r20, 7
    32ba:	0a c0       	rjmp	.+20     	; 0x32d0 <__mulsf3+0x1ce>
    32bc:	e1 14       	cp	r14, r1
    32be:	f1 04       	cpc	r15, r1
    32c0:	01 05       	cpc	r16, r1
    32c2:	11 05       	cpc	r17, r1
    32c4:	29 f0       	breq	.+10     	; 0x32d0 <__mulsf3+0x1ce>
    32c6:	40 5c       	subi	r20, 0xC0	; 192
    32c8:	5f 4f       	sbci	r21, 0xFF	; 255
    32ca:	6f 4f       	sbci	r22, 0xFF	; 255
    32cc:	7f 4f       	sbci	r23, 0xFF	; 255
    32ce:	40 78       	andi	r20, 0x80	; 128
    32d0:	1a 8e       	std	Y+26, r1	; 0x1a
    32d2:	fe 17       	cp	r31, r30
    32d4:	11 f0       	breq	.+4      	; 0x32da <__mulsf3+0x1d8>
    32d6:	81 e0       	ldi	r24, 0x01	; 1
    32d8:	8a 8f       	std	Y+26, r24	; 0x1a
    32da:	4d 8f       	std	Y+29, r20	; 0x1d
    32dc:	5e 8f       	std	Y+30, r21	; 0x1e
    32de:	6f 8f       	std	Y+31, r22	; 0x1f
    32e0:	78 a3       	std	Y+32, r23	; 0x20
    32e2:	83 e0       	ldi	r24, 0x03	; 3
    32e4:	89 8f       	std	Y+25, r24	; 0x19
    32e6:	ce 01       	movw	r24, r28
    32e8:	49 96       	adiw	r24, 0x19	; 25
    32ea:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__pack_f>
    32ee:	a0 96       	adiw	r28, 0x20	; 32
    32f0:	e2 e1       	ldi	r30, 0x12	; 18
    32f2:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__epilogue_restores__>

000032f6 <__divsf3>:
    32f6:	a8 e1       	ldi	r26, 0x18	; 24
    32f8:	b0 e0       	ldi	r27, 0x00	; 0
    32fa:	e1 e8       	ldi	r30, 0x81	; 129
    32fc:	f9 e1       	ldi	r31, 0x19	; 25
    32fe:	0c 94 c5 1c 	jmp	0x398a	; 0x398a <__prologue_saves__+0x10>
    3302:	69 83       	std	Y+1, r22	; 0x01
    3304:	7a 83       	std	Y+2, r23	; 0x02
    3306:	8b 83       	std	Y+3, r24	; 0x03
    3308:	9c 83       	std	Y+4, r25	; 0x04
    330a:	2d 83       	std	Y+5, r18	; 0x05
    330c:	3e 83       	std	Y+6, r19	; 0x06
    330e:	4f 83       	std	Y+7, r20	; 0x07
    3310:	58 87       	std	Y+8, r21	; 0x08
    3312:	b9 e0       	ldi	r27, 0x09	; 9
    3314:	eb 2e       	mov	r14, r27
    3316:	f1 2c       	mov	r15, r1
    3318:	ec 0e       	add	r14, r28
    331a:	fd 1e       	adc	r15, r29
    331c:	ce 01       	movw	r24, r28
    331e:	01 96       	adiw	r24, 0x01	; 1
    3320:	b7 01       	movw	r22, r14
    3322:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    3326:	8e 01       	movw	r16, r28
    3328:	0f 5e       	subi	r16, 0xEF	; 239
    332a:	1f 4f       	sbci	r17, 0xFF	; 255
    332c:	ce 01       	movw	r24, r28
    332e:	05 96       	adiw	r24, 0x05	; 5
    3330:	b8 01       	movw	r22, r16
    3332:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    3336:	29 85       	ldd	r18, Y+9	; 0x09
    3338:	22 30       	cpi	r18, 0x02	; 2
    333a:	08 f4       	brcc	.+2      	; 0x333e <__divsf3+0x48>
    333c:	7e c0       	rjmp	.+252    	; 0x343a <__divsf3+0x144>
    333e:	39 89       	ldd	r19, Y+17	; 0x11
    3340:	32 30       	cpi	r19, 0x02	; 2
    3342:	10 f4       	brcc	.+4      	; 0x3348 <__divsf3+0x52>
    3344:	b8 01       	movw	r22, r16
    3346:	7c c0       	rjmp	.+248    	; 0x3440 <__divsf3+0x14a>
    3348:	8a 85       	ldd	r24, Y+10	; 0x0a
    334a:	9a 89       	ldd	r25, Y+18	; 0x12
    334c:	89 27       	eor	r24, r25
    334e:	8a 87       	std	Y+10, r24	; 0x0a
    3350:	24 30       	cpi	r18, 0x04	; 4
    3352:	11 f0       	breq	.+4      	; 0x3358 <__divsf3+0x62>
    3354:	22 30       	cpi	r18, 0x02	; 2
    3356:	31 f4       	brne	.+12     	; 0x3364 <__divsf3+0x6e>
    3358:	23 17       	cp	r18, r19
    335a:	09 f0       	breq	.+2      	; 0x335e <__divsf3+0x68>
    335c:	6e c0       	rjmp	.+220    	; 0x343a <__divsf3+0x144>
    335e:	6d e4       	ldi	r22, 0x4D	; 77
    3360:	72 e0       	ldi	r23, 0x02	; 2
    3362:	6e c0       	rjmp	.+220    	; 0x3440 <__divsf3+0x14a>
    3364:	34 30       	cpi	r19, 0x04	; 4
    3366:	39 f4       	brne	.+14     	; 0x3376 <__divsf3+0x80>
    3368:	1d 86       	std	Y+13, r1	; 0x0d
    336a:	1e 86       	std	Y+14, r1	; 0x0e
    336c:	1f 86       	std	Y+15, r1	; 0x0f
    336e:	18 8a       	std	Y+16, r1	; 0x10
    3370:	1c 86       	std	Y+12, r1	; 0x0c
    3372:	1b 86       	std	Y+11, r1	; 0x0b
    3374:	04 c0       	rjmp	.+8      	; 0x337e <__divsf3+0x88>
    3376:	32 30       	cpi	r19, 0x02	; 2
    3378:	21 f4       	brne	.+8      	; 0x3382 <__divsf3+0x8c>
    337a:	84 e0       	ldi	r24, 0x04	; 4
    337c:	89 87       	std	Y+9, r24	; 0x09
    337e:	b7 01       	movw	r22, r14
    3380:	5f c0       	rjmp	.+190    	; 0x3440 <__divsf3+0x14a>
    3382:	2b 85       	ldd	r18, Y+11	; 0x0b
    3384:	3c 85       	ldd	r19, Y+12	; 0x0c
    3386:	8b 89       	ldd	r24, Y+19	; 0x13
    3388:	9c 89       	ldd	r25, Y+20	; 0x14
    338a:	28 1b       	sub	r18, r24
    338c:	39 0b       	sbc	r19, r25
    338e:	3c 87       	std	Y+12, r19	; 0x0c
    3390:	2b 87       	std	Y+11, r18	; 0x0b
    3392:	ed 84       	ldd	r14, Y+13	; 0x0d
    3394:	fe 84       	ldd	r15, Y+14	; 0x0e
    3396:	0f 85       	ldd	r16, Y+15	; 0x0f
    3398:	18 89       	ldd	r17, Y+16	; 0x10
    339a:	ad 88       	ldd	r10, Y+21	; 0x15
    339c:	be 88       	ldd	r11, Y+22	; 0x16
    339e:	cf 88       	ldd	r12, Y+23	; 0x17
    33a0:	d8 8c       	ldd	r13, Y+24	; 0x18
    33a2:	ea 14       	cp	r14, r10
    33a4:	fb 04       	cpc	r15, r11
    33a6:	0c 05       	cpc	r16, r12
    33a8:	1d 05       	cpc	r17, r13
    33aa:	40 f4       	brcc	.+16     	; 0x33bc <__divsf3+0xc6>
    33ac:	ee 0c       	add	r14, r14
    33ae:	ff 1c       	adc	r15, r15
    33b0:	00 1f       	adc	r16, r16
    33b2:	11 1f       	adc	r17, r17
    33b4:	21 50       	subi	r18, 0x01	; 1
    33b6:	30 40       	sbci	r19, 0x00	; 0
    33b8:	3c 87       	std	Y+12, r19	; 0x0c
    33ba:	2b 87       	std	Y+11, r18	; 0x0b
    33bc:	20 e0       	ldi	r18, 0x00	; 0
    33be:	30 e0       	ldi	r19, 0x00	; 0
    33c0:	40 e0       	ldi	r20, 0x00	; 0
    33c2:	50 e0       	ldi	r21, 0x00	; 0
    33c4:	80 e0       	ldi	r24, 0x00	; 0
    33c6:	90 e0       	ldi	r25, 0x00	; 0
    33c8:	a0 e0       	ldi	r26, 0x00	; 0
    33ca:	b0 e4       	ldi	r27, 0x40	; 64
    33cc:	60 e0       	ldi	r22, 0x00	; 0
    33ce:	70 e0       	ldi	r23, 0x00	; 0
    33d0:	ea 14       	cp	r14, r10
    33d2:	fb 04       	cpc	r15, r11
    33d4:	0c 05       	cpc	r16, r12
    33d6:	1d 05       	cpc	r17, r13
    33d8:	40 f0       	brcs	.+16     	; 0x33ea <__divsf3+0xf4>
    33da:	28 2b       	or	r18, r24
    33dc:	39 2b       	or	r19, r25
    33de:	4a 2b       	or	r20, r26
    33e0:	5b 2b       	or	r21, r27
    33e2:	ea 18       	sub	r14, r10
    33e4:	fb 08       	sbc	r15, r11
    33e6:	0c 09       	sbc	r16, r12
    33e8:	1d 09       	sbc	r17, r13
    33ea:	b6 95       	lsr	r27
    33ec:	a7 95       	ror	r26
    33ee:	97 95       	ror	r25
    33f0:	87 95       	ror	r24
    33f2:	ee 0c       	add	r14, r14
    33f4:	ff 1c       	adc	r15, r15
    33f6:	00 1f       	adc	r16, r16
    33f8:	11 1f       	adc	r17, r17
    33fa:	6f 5f       	subi	r22, 0xFF	; 255
    33fc:	7f 4f       	sbci	r23, 0xFF	; 255
    33fe:	6f 31       	cpi	r22, 0x1F	; 31
    3400:	71 05       	cpc	r23, r1
    3402:	31 f7       	brne	.-52     	; 0x33d0 <__divsf3+0xda>
    3404:	da 01       	movw	r26, r20
    3406:	c9 01       	movw	r24, r18
    3408:	8f 77       	andi	r24, 0x7F	; 127
    340a:	90 70       	andi	r25, 0x00	; 0
    340c:	a0 70       	andi	r26, 0x00	; 0
    340e:	b0 70       	andi	r27, 0x00	; 0
    3410:	80 34       	cpi	r24, 0x40	; 64
    3412:	91 05       	cpc	r25, r1
    3414:	a1 05       	cpc	r26, r1
    3416:	b1 05       	cpc	r27, r1
    3418:	61 f4       	brne	.+24     	; 0x3432 <__divsf3+0x13c>
    341a:	27 fd       	sbrc	r18, 7
    341c:	0a c0       	rjmp	.+20     	; 0x3432 <__divsf3+0x13c>
    341e:	e1 14       	cp	r14, r1
    3420:	f1 04       	cpc	r15, r1
    3422:	01 05       	cpc	r16, r1
    3424:	11 05       	cpc	r17, r1
    3426:	29 f0       	breq	.+10     	; 0x3432 <__divsf3+0x13c>
    3428:	20 5c       	subi	r18, 0xC0	; 192
    342a:	3f 4f       	sbci	r19, 0xFF	; 255
    342c:	4f 4f       	sbci	r20, 0xFF	; 255
    342e:	5f 4f       	sbci	r21, 0xFF	; 255
    3430:	20 78       	andi	r18, 0x80	; 128
    3432:	2d 87       	std	Y+13, r18	; 0x0d
    3434:	3e 87       	std	Y+14, r19	; 0x0e
    3436:	4f 87       	std	Y+15, r20	; 0x0f
    3438:	58 8b       	std	Y+16, r21	; 0x10
    343a:	be 01       	movw	r22, r28
    343c:	67 5f       	subi	r22, 0xF7	; 247
    343e:	7f 4f       	sbci	r23, 0xFF	; 255
    3440:	cb 01       	movw	r24, r22
    3442:	0e 94 0b 1b 	call	0x3616	; 0x3616 <__pack_f>
    3446:	68 96       	adiw	r28, 0x18	; 24
    3448:	ea e0       	ldi	r30, 0x0A	; 10
    344a:	0c 94 e1 1c 	jmp	0x39c2	; 0x39c2 <__epilogue_restores__+0x10>

0000344e <__gtsf2>:
    344e:	a8 e1       	ldi	r26, 0x18	; 24
    3450:	b0 e0       	ldi	r27, 0x00	; 0
    3452:	ed e2       	ldi	r30, 0x2D	; 45
    3454:	fa e1       	ldi	r31, 0x1A	; 26
    3456:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__prologue_saves__+0x18>
    345a:	69 83       	std	Y+1, r22	; 0x01
    345c:	7a 83       	std	Y+2, r23	; 0x02
    345e:	8b 83       	std	Y+3, r24	; 0x03
    3460:	9c 83       	std	Y+4, r25	; 0x04
    3462:	2d 83       	std	Y+5, r18	; 0x05
    3464:	3e 83       	std	Y+6, r19	; 0x06
    3466:	4f 83       	std	Y+7, r20	; 0x07
    3468:	58 87       	std	Y+8, r21	; 0x08
    346a:	89 e0       	ldi	r24, 0x09	; 9
    346c:	e8 2e       	mov	r14, r24
    346e:	f1 2c       	mov	r15, r1
    3470:	ec 0e       	add	r14, r28
    3472:	fd 1e       	adc	r15, r29
    3474:	ce 01       	movw	r24, r28
    3476:	01 96       	adiw	r24, 0x01	; 1
    3478:	b7 01       	movw	r22, r14
    347a:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    347e:	8e 01       	movw	r16, r28
    3480:	0f 5e       	subi	r16, 0xEF	; 239
    3482:	1f 4f       	sbci	r17, 0xFF	; 255
    3484:	ce 01       	movw	r24, r28
    3486:	05 96       	adiw	r24, 0x05	; 5
    3488:	b8 01       	movw	r22, r16
    348a:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    348e:	89 85       	ldd	r24, Y+9	; 0x09
    3490:	82 30       	cpi	r24, 0x02	; 2
    3492:	40 f0       	brcs	.+16     	; 0x34a4 <__gtsf2+0x56>
    3494:	89 89       	ldd	r24, Y+17	; 0x11
    3496:	82 30       	cpi	r24, 0x02	; 2
    3498:	28 f0       	brcs	.+10     	; 0x34a4 <__gtsf2+0x56>
    349a:	c7 01       	movw	r24, r14
    349c:	b8 01       	movw	r22, r16
    349e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__fpcmp_parts_f>
    34a2:	01 c0       	rjmp	.+2      	; 0x34a6 <__gtsf2+0x58>
    34a4:	8f ef       	ldi	r24, 0xFF	; 255
    34a6:	68 96       	adiw	r28, 0x18	; 24
    34a8:	e6 e0       	ldi	r30, 0x06	; 6
    34aa:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__epilogue_restores__+0x18>

000034ae <__gesf2>:
    34ae:	a8 e1       	ldi	r26, 0x18	; 24
    34b0:	b0 e0       	ldi	r27, 0x00	; 0
    34b2:	ed e5       	ldi	r30, 0x5D	; 93
    34b4:	fa e1       	ldi	r31, 0x1A	; 26
    34b6:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__prologue_saves__+0x18>
    34ba:	69 83       	std	Y+1, r22	; 0x01
    34bc:	7a 83       	std	Y+2, r23	; 0x02
    34be:	8b 83       	std	Y+3, r24	; 0x03
    34c0:	9c 83       	std	Y+4, r25	; 0x04
    34c2:	2d 83       	std	Y+5, r18	; 0x05
    34c4:	3e 83       	std	Y+6, r19	; 0x06
    34c6:	4f 83       	std	Y+7, r20	; 0x07
    34c8:	58 87       	std	Y+8, r21	; 0x08
    34ca:	89 e0       	ldi	r24, 0x09	; 9
    34cc:	e8 2e       	mov	r14, r24
    34ce:	f1 2c       	mov	r15, r1
    34d0:	ec 0e       	add	r14, r28
    34d2:	fd 1e       	adc	r15, r29
    34d4:	ce 01       	movw	r24, r28
    34d6:	01 96       	adiw	r24, 0x01	; 1
    34d8:	b7 01       	movw	r22, r14
    34da:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    34de:	8e 01       	movw	r16, r28
    34e0:	0f 5e       	subi	r16, 0xEF	; 239
    34e2:	1f 4f       	sbci	r17, 0xFF	; 255
    34e4:	ce 01       	movw	r24, r28
    34e6:	05 96       	adiw	r24, 0x05	; 5
    34e8:	b8 01       	movw	r22, r16
    34ea:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    34ee:	89 85       	ldd	r24, Y+9	; 0x09
    34f0:	82 30       	cpi	r24, 0x02	; 2
    34f2:	40 f0       	brcs	.+16     	; 0x3504 <__gesf2+0x56>
    34f4:	89 89       	ldd	r24, Y+17	; 0x11
    34f6:	82 30       	cpi	r24, 0x02	; 2
    34f8:	28 f0       	brcs	.+10     	; 0x3504 <__gesf2+0x56>
    34fa:	c7 01       	movw	r24, r14
    34fc:	b8 01       	movw	r22, r16
    34fe:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__fpcmp_parts_f>
    3502:	01 c0       	rjmp	.+2      	; 0x3506 <__gesf2+0x58>
    3504:	8f ef       	ldi	r24, 0xFF	; 255
    3506:	68 96       	adiw	r28, 0x18	; 24
    3508:	e6 e0       	ldi	r30, 0x06	; 6
    350a:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__epilogue_restores__+0x18>

0000350e <__ltsf2>:
    350e:	a8 e1       	ldi	r26, 0x18	; 24
    3510:	b0 e0       	ldi	r27, 0x00	; 0
    3512:	ed e8       	ldi	r30, 0x8D	; 141
    3514:	fa e1       	ldi	r31, 0x1A	; 26
    3516:	0c 94 c9 1c 	jmp	0x3992	; 0x3992 <__prologue_saves__+0x18>
    351a:	69 83       	std	Y+1, r22	; 0x01
    351c:	7a 83       	std	Y+2, r23	; 0x02
    351e:	8b 83       	std	Y+3, r24	; 0x03
    3520:	9c 83       	std	Y+4, r25	; 0x04
    3522:	2d 83       	std	Y+5, r18	; 0x05
    3524:	3e 83       	std	Y+6, r19	; 0x06
    3526:	4f 83       	std	Y+7, r20	; 0x07
    3528:	58 87       	std	Y+8, r21	; 0x08
    352a:	89 e0       	ldi	r24, 0x09	; 9
    352c:	e8 2e       	mov	r14, r24
    352e:	f1 2c       	mov	r15, r1
    3530:	ec 0e       	add	r14, r28
    3532:	fd 1e       	adc	r15, r29
    3534:	ce 01       	movw	r24, r28
    3536:	01 96       	adiw	r24, 0x01	; 1
    3538:	b7 01       	movw	r22, r14
    353a:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    353e:	8e 01       	movw	r16, r28
    3540:	0f 5e       	subi	r16, 0xEF	; 239
    3542:	1f 4f       	sbci	r17, 0xFF	; 255
    3544:	ce 01       	movw	r24, r28
    3546:	05 96       	adiw	r24, 0x05	; 5
    3548:	b8 01       	movw	r22, r16
    354a:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    354e:	89 85       	ldd	r24, Y+9	; 0x09
    3550:	82 30       	cpi	r24, 0x02	; 2
    3552:	40 f0       	brcs	.+16     	; 0x3564 <__ltsf2+0x56>
    3554:	89 89       	ldd	r24, Y+17	; 0x11
    3556:	82 30       	cpi	r24, 0x02	; 2
    3558:	28 f0       	brcs	.+10     	; 0x3564 <__ltsf2+0x56>
    355a:	c7 01       	movw	r24, r14
    355c:	b8 01       	movw	r22, r16
    355e:	0e 94 58 1c 	call	0x38b0	; 0x38b0 <__fpcmp_parts_f>
    3562:	01 c0       	rjmp	.+2      	; 0x3566 <__ltsf2+0x58>
    3564:	81 e0       	ldi	r24, 0x01	; 1
    3566:	68 96       	adiw	r28, 0x18	; 24
    3568:	e6 e0       	ldi	r30, 0x06	; 6
    356a:	0c 94 e5 1c 	jmp	0x39ca	; 0x39ca <__epilogue_restores__+0x18>

0000356e <__fixsfsi>:
    356e:	ac e0       	ldi	r26, 0x0C	; 12
    3570:	b0 e0       	ldi	r27, 0x00	; 0
    3572:	ed eb       	ldi	r30, 0xBD	; 189
    3574:	fa e1       	ldi	r31, 0x1A	; 26
    3576:	0c 94 cd 1c 	jmp	0x399a	; 0x399a <__prologue_saves__+0x20>
    357a:	69 83       	std	Y+1, r22	; 0x01
    357c:	7a 83       	std	Y+2, r23	; 0x02
    357e:	8b 83       	std	Y+3, r24	; 0x03
    3580:	9c 83       	std	Y+4, r25	; 0x04
    3582:	ce 01       	movw	r24, r28
    3584:	01 96       	adiw	r24, 0x01	; 1
    3586:	be 01       	movw	r22, r28
    3588:	6b 5f       	subi	r22, 0xFB	; 251
    358a:	7f 4f       	sbci	r23, 0xFF	; 255
    358c:	0e 94 e0 1b 	call	0x37c0	; 0x37c0 <__unpack_f>
    3590:	8d 81       	ldd	r24, Y+5	; 0x05
    3592:	82 30       	cpi	r24, 0x02	; 2
    3594:	61 f1       	breq	.+88     	; 0x35ee <__fixsfsi+0x80>
    3596:	82 30       	cpi	r24, 0x02	; 2
    3598:	50 f1       	brcs	.+84     	; 0x35ee <__fixsfsi+0x80>
    359a:	84 30       	cpi	r24, 0x04	; 4
    359c:	21 f4       	brne	.+8      	; 0x35a6 <__fixsfsi+0x38>
    359e:	8e 81       	ldd	r24, Y+6	; 0x06
    35a0:	88 23       	and	r24, r24
    35a2:	51 f1       	breq	.+84     	; 0x35f8 <__fixsfsi+0x8a>
    35a4:	2e c0       	rjmp	.+92     	; 0x3602 <__fixsfsi+0x94>
    35a6:	2f 81       	ldd	r18, Y+7	; 0x07
    35a8:	38 85       	ldd	r19, Y+8	; 0x08
    35aa:	37 fd       	sbrc	r19, 7
    35ac:	20 c0       	rjmp	.+64     	; 0x35ee <__fixsfsi+0x80>
    35ae:	6e 81       	ldd	r22, Y+6	; 0x06
    35b0:	2f 31       	cpi	r18, 0x1F	; 31
    35b2:	31 05       	cpc	r19, r1
    35b4:	1c f0       	brlt	.+6      	; 0x35bc <__fixsfsi+0x4e>
    35b6:	66 23       	and	r22, r22
    35b8:	f9 f0       	breq	.+62     	; 0x35f8 <__fixsfsi+0x8a>
    35ba:	23 c0       	rjmp	.+70     	; 0x3602 <__fixsfsi+0x94>
    35bc:	8e e1       	ldi	r24, 0x1E	; 30
    35be:	90 e0       	ldi	r25, 0x00	; 0
    35c0:	82 1b       	sub	r24, r18
    35c2:	93 0b       	sbc	r25, r19
    35c4:	29 85       	ldd	r18, Y+9	; 0x09
    35c6:	3a 85       	ldd	r19, Y+10	; 0x0a
    35c8:	4b 85       	ldd	r20, Y+11	; 0x0b
    35ca:	5c 85       	ldd	r21, Y+12	; 0x0c
    35cc:	04 c0       	rjmp	.+8      	; 0x35d6 <__fixsfsi+0x68>
    35ce:	56 95       	lsr	r21
    35d0:	47 95       	ror	r20
    35d2:	37 95       	ror	r19
    35d4:	27 95       	ror	r18
    35d6:	8a 95       	dec	r24
    35d8:	d2 f7       	brpl	.-12     	; 0x35ce <__fixsfsi+0x60>
    35da:	66 23       	and	r22, r22
    35dc:	b1 f0       	breq	.+44     	; 0x360a <__fixsfsi+0x9c>
    35de:	50 95       	com	r21
    35e0:	40 95       	com	r20
    35e2:	30 95       	com	r19
    35e4:	21 95       	neg	r18
    35e6:	3f 4f       	sbci	r19, 0xFF	; 255
    35e8:	4f 4f       	sbci	r20, 0xFF	; 255
    35ea:	5f 4f       	sbci	r21, 0xFF	; 255
    35ec:	0e c0       	rjmp	.+28     	; 0x360a <__fixsfsi+0x9c>
    35ee:	20 e0       	ldi	r18, 0x00	; 0
    35f0:	30 e0       	ldi	r19, 0x00	; 0
    35f2:	40 e0       	ldi	r20, 0x00	; 0
    35f4:	50 e0       	ldi	r21, 0x00	; 0
    35f6:	09 c0       	rjmp	.+18     	; 0x360a <__fixsfsi+0x9c>
    35f8:	2f ef       	ldi	r18, 0xFF	; 255
    35fa:	3f ef       	ldi	r19, 0xFF	; 255
    35fc:	4f ef       	ldi	r20, 0xFF	; 255
    35fe:	5f e7       	ldi	r21, 0x7F	; 127
    3600:	04 c0       	rjmp	.+8      	; 0x360a <__fixsfsi+0x9c>
    3602:	20 e0       	ldi	r18, 0x00	; 0
    3604:	30 e0       	ldi	r19, 0x00	; 0
    3606:	40 e0       	ldi	r20, 0x00	; 0
    3608:	50 e8       	ldi	r21, 0x80	; 128
    360a:	b9 01       	movw	r22, r18
    360c:	ca 01       	movw	r24, r20
    360e:	2c 96       	adiw	r28, 0x0c	; 12
    3610:	e2 e0       	ldi	r30, 0x02	; 2
    3612:	0c 94 e9 1c 	jmp	0x39d2	; 0x39d2 <__epilogue_restores__+0x20>

00003616 <__pack_f>:
    3616:	df 92       	push	r13
    3618:	ef 92       	push	r14
    361a:	ff 92       	push	r15
    361c:	0f 93       	push	r16
    361e:	1f 93       	push	r17
    3620:	fc 01       	movw	r30, r24
    3622:	e4 80       	ldd	r14, Z+4	; 0x04
    3624:	f5 80       	ldd	r15, Z+5	; 0x05
    3626:	06 81       	ldd	r16, Z+6	; 0x06
    3628:	17 81       	ldd	r17, Z+7	; 0x07
    362a:	d1 80       	ldd	r13, Z+1	; 0x01
    362c:	80 81       	ld	r24, Z
    362e:	82 30       	cpi	r24, 0x02	; 2
    3630:	48 f4       	brcc	.+18     	; 0x3644 <__pack_f+0x2e>
    3632:	80 e0       	ldi	r24, 0x00	; 0
    3634:	90 e0       	ldi	r25, 0x00	; 0
    3636:	a0 e1       	ldi	r26, 0x10	; 16
    3638:	b0 e0       	ldi	r27, 0x00	; 0
    363a:	e8 2a       	or	r14, r24
    363c:	f9 2a       	or	r15, r25
    363e:	0a 2b       	or	r16, r26
    3640:	1b 2b       	or	r17, r27
    3642:	a5 c0       	rjmp	.+330    	; 0x378e <__pack_f+0x178>
    3644:	84 30       	cpi	r24, 0x04	; 4
    3646:	09 f4       	brne	.+2      	; 0x364a <__pack_f+0x34>
    3648:	9f c0       	rjmp	.+318    	; 0x3788 <__pack_f+0x172>
    364a:	82 30       	cpi	r24, 0x02	; 2
    364c:	21 f4       	brne	.+8      	; 0x3656 <__pack_f+0x40>
    364e:	ee 24       	eor	r14, r14
    3650:	ff 24       	eor	r15, r15
    3652:	87 01       	movw	r16, r14
    3654:	05 c0       	rjmp	.+10     	; 0x3660 <__pack_f+0x4a>
    3656:	e1 14       	cp	r14, r1
    3658:	f1 04       	cpc	r15, r1
    365a:	01 05       	cpc	r16, r1
    365c:	11 05       	cpc	r17, r1
    365e:	19 f4       	brne	.+6      	; 0x3666 <__pack_f+0x50>
    3660:	e0 e0       	ldi	r30, 0x00	; 0
    3662:	f0 e0       	ldi	r31, 0x00	; 0
    3664:	96 c0       	rjmp	.+300    	; 0x3792 <__pack_f+0x17c>
    3666:	62 81       	ldd	r22, Z+2	; 0x02
    3668:	73 81       	ldd	r23, Z+3	; 0x03
    366a:	9f ef       	ldi	r25, 0xFF	; 255
    366c:	62 38       	cpi	r22, 0x82	; 130
    366e:	79 07       	cpc	r23, r25
    3670:	0c f0       	brlt	.+2      	; 0x3674 <__pack_f+0x5e>
    3672:	5b c0       	rjmp	.+182    	; 0x372a <__pack_f+0x114>
    3674:	22 e8       	ldi	r18, 0x82	; 130
    3676:	3f ef       	ldi	r19, 0xFF	; 255
    3678:	26 1b       	sub	r18, r22
    367a:	37 0b       	sbc	r19, r23
    367c:	2a 31       	cpi	r18, 0x1A	; 26
    367e:	31 05       	cpc	r19, r1
    3680:	2c f0       	brlt	.+10     	; 0x368c <__pack_f+0x76>
    3682:	20 e0       	ldi	r18, 0x00	; 0
    3684:	30 e0       	ldi	r19, 0x00	; 0
    3686:	40 e0       	ldi	r20, 0x00	; 0
    3688:	50 e0       	ldi	r21, 0x00	; 0
    368a:	2a c0       	rjmp	.+84     	; 0x36e0 <__pack_f+0xca>
    368c:	b8 01       	movw	r22, r16
    368e:	a7 01       	movw	r20, r14
    3690:	02 2e       	mov	r0, r18
    3692:	04 c0       	rjmp	.+8      	; 0x369c <__pack_f+0x86>
    3694:	76 95       	lsr	r23
    3696:	67 95       	ror	r22
    3698:	57 95       	ror	r21
    369a:	47 95       	ror	r20
    369c:	0a 94       	dec	r0
    369e:	d2 f7       	brpl	.-12     	; 0x3694 <__pack_f+0x7e>
    36a0:	81 e0       	ldi	r24, 0x01	; 1
    36a2:	90 e0       	ldi	r25, 0x00	; 0
    36a4:	a0 e0       	ldi	r26, 0x00	; 0
    36a6:	b0 e0       	ldi	r27, 0x00	; 0
    36a8:	04 c0       	rjmp	.+8      	; 0x36b2 <__pack_f+0x9c>
    36aa:	88 0f       	add	r24, r24
    36ac:	99 1f       	adc	r25, r25
    36ae:	aa 1f       	adc	r26, r26
    36b0:	bb 1f       	adc	r27, r27
    36b2:	2a 95       	dec	r18
    36b4:	d2 f7       	brpl	.-12     	; 0x36aa <__pack_f+0x94>
    36b6:	01 97       	sbiw	r24, 0x01	; 1
    36b8:	a1 09       	sbc	r26, r1
    36ba:	b1 09       	sbc	r27, r1
    36bc:	8e 21       	and	r24, r14
    36be:	9f 21       	and	r25, r15
    36c0:	a0 23       	and	r26, r16
    36c2:	b1 23       	and	r27, r17
    36c4:	00 97       	sbiw	r24, 0x00	; 0
    36c6:	a1 05       	cpc	r26, r1
    36c8:	b1 05       	cpc	r27, r1
    36ca:	21 f0       	breq	.+8      	; 0x36d4 <__pack_f+0xbe>
    36cc:	81 e0       	ldi	r24, 0x01	; 1
    36ce:	90 e0       	ldi	r25, 0x00	; 0
    36d0:	a0 e0       	ldi	r26, 0x00	; 0
    36d2:	b0 e0       	ldi	r27, 0x00	; 0
    36d4:	9a 01       	movw	r18, r20
    36d6:	ab 01       	movw	r20, r22
    36d8:	28 2b       	or	r18, r24
    36da:	39 2b       	or	r19, r25
    36dc:	4a 2b       	or	r20, r26
    36de:	5b 2b       	or	r21, r27
    36e0:	da 01       	movw	r26, r20
    36e2:	c9 01       	movw	r24, r18
    36e4:	8f 77       	andi	r24, 0x7F	; 127
    36e6:	90 70       	andi	r25, 0x00	; 0
    36e8:	a0 70       	andi	r26, 0x00	; 0
    36ea:	b0 70       	andi	r27, 0x00	; 0
    36ec:	80 34       	cpi	r24, 0x40	; 64
    36ee:	91 05       	cpc	r25, r1
    36f0:	a1 05       	cpc	r26, r1
    36f2:	b1 05       	cpc	r27, r1
    36f4:	39 f4       	brne	.+14     	; 0x3704 <__pack_f+0xee>
    36f6:	27 ff       	sbrs	r18, 7
    36f8:	09 c0       	rjmp	.+18     	; 0x370c <__pack_f+0xf6>
    36fa:	20 5c       	subi	r18, 0xC0	; 192
    36fc:	3f 4f       	sbci	r19, 0xFF	; 255
    36fe:	4f 4f       	sbci	r20, 0xFF	; 255
    3700:	5f 4f       	sbci	r21, 0xFF	; 255
    3702:	04 c0       	rjmp	.+8      	; 0x370c <__pack_f+0xf6>
    3704:	21 5c       	subi	r18, 0xC1	; 193
    3706:	3f 4f       	sbci	r19, 0xFF	; 255
    3708:	4f 4f       	sbci	r20, 0xFF	; 255
    370a:	5f 4f       	sbci	r21, 0xFF	; 255
    370c:	e0 e0       	ldi	r30, 0x00	; 0
    370e:	f0 e0       	ldi	r31, 0x00	; 0
    3710:	20 30       	cpi	r18, 0x00	; 0
    3712:	a0 e0       	ldi	r26, 0x00	; 0
    3714:	3a 07       	cpc	r19, r26
    3716:	a0 e0       	ldi	r26, 0x00	; 0
    3718:	4a 07       	cpc	r20, r26
    371a:	a0 e4       	ldi	r26, 0x40	; 64
    371c:	5a 07       	cpc	r21, r26
    371e:	10 f0       	brcs	.+4      	; 0x3724 <__pack_f+0x10e>
    3720:	e1 e0       	ldi	r30, 0x01	; 1
    3722:	f0 e0       	ldi	r31, 0x00	; 0
    3724:	79 01       	movw	r14, r18
    3726:	8a 01       	movw	r16, r20
    3728:	27 c0       	rjmp	.+78     	; 0x3778 <__pack_f+0x162>
    372a:	60 38       	cpi	r22, 0x80	; 128
    372c:	71 05       	cpc	r23, r1
    372e:	64 f5       	brge	.+88     	; 0x3788 <__pack_f+0x172>
    3730:	fb 01       	movw	r30, r22
    3732:	e1 58       	subi	r30, 0x81	; 129
    3734:	ff 4f       	sbci	r31, 0xFF	; 255
    3736:	d8 01       	movw	r26, r16
    3738:	c7 01       	movw	r24, r14
    373a:	8f 77       	andi	r24, 0x7F	; 127
    373c:	90 70       	andi	r25, 0x00	; 0
    373e:	a0 70       	andi	r26, 0x00	; 0
    3740:	b0 70       	andi	r27, 0x00	; 0
    3742:	80 34       	cpi	r24, 0x40	; 64
    3744:	91 05       	cpc	r25, r1
    3746:	a1 05       	cpc	r26, r1
    3748:	b1 05       	cpc	r27, r1
    374a:	39 f4       	brne	.+14     	; 0x375a <__pack_f+0x144>
    374c:	e7 fe       	sbrs	r14, 7
    374e:	0d c0       	rjmp	.+26     	; 0x376a <__pack_f+0x154>
    3750:	80 e4       	ldi	r24, 0x40	; 64
    3752:	90 e0       	ldi	r25, 0x00	; 0
    3754:	a0 e0       	ldi	r26, 0x00	; 0
    3756:	b0 e0       	ldi	r27, 0x00	; 0
    3758:	04 c0       	rjmp	.+8      	; 0x3762 <__pack_f+0x14c>
    375a:	8f e3       	ldi	r24, 0x3F	; 63
    375c:	90 e0       	ldi	r25, 0x00	; 0
    375e:	a0 e0       	ldi	r26, 0x00	; 0
    3760:	b0 e0       	ldi	r27, 0x00	; 0
    3762:	e8 0e       	add	r14, r24
    3764:	f9 1e       	adc	r15, r25
    3766:	0a 1f       	adc	r16, r26
    3768:	1b 1f       	adc	r17, r27
    376a:	17 ff       	sbrs	r17, 7
    376c:	05 c0       	rjmp	.+10     	; 0x3778 <__pack_f+0x162>
    376e:	16 95       	lsr	r17
    3770:	07 95       	ror	r16
    3772:	f7 94       	ror	r15
    3774:	e7 94       	ror	r14
    3776:	31 96       	adiw	r30, 0x01	; 1
    3778:	87 e0       	ldi	r24, 0x07	; 7
    377a:	16 95       	lsr	r17
    377c:	07 95       	ror	r16
    377e:	f7 94       	ror	r15
    3780:	e7 94       	ror	r14
    3782:	8a 95       	dec	r24
    3784:	d1 f7       	brne	.-12     	; 0x377a <__pack_f+0x164>
    3786:	05 c0       	rjmp	.+10     	; 0x3792 <__pack_f+0x17c>
    3788:	ee 24       	eor	r14, r14
    378a:	ff 24       	eor	r15, r15
    378c:	87 01       	movw	r16, r14
    378e:	ef ef       	ldi	r30, 0xFF	; 255
    3790:	f0 e0       	ldi	r31, 0x00	; 0
    3792:	6e 2f       	mov	r22, r30
    3794:	67 95       	ror	r22
    3796:	66 27       	eor	r22, r22
    3798:	67 95       	ror	r22
    379a:	90 2f       	mov	r25, r16
    379c:	9f 77       	andi	r25, 0x7F	; 127
    379e:	d7 94       	ror	r13
    37a0:	dd 24       	eor	r13, r13
    37a2:	d7 94       	ror	r13
    37a4:	8e 2f       	mov	r24, r30
    37a6:	86 95       	lsr	r24
    37a8:	49 2f       	mov	r20, r25
    37aa:	46 2b       	or	r20, r22
    37ac:	58 2f       	mov	r21, r24
    37ae:	5d 29       	or	r21, r13
    37b0:	b7 01       	movw	r22, r14
    37b2:	ca 01       	movw	r24, r20
    37b4:	1f 91       	pop	r17
    37b6:	0f 91       	pop	r16
    37b8:	ff 90       	pop	r15
    37ba:	ef 90       	pop	r14
    37bc:	df 90       	pop	r13
    37be:	08 95       	ret

000037c0 <__unpack_f>:
    37c0:	fc 01       	movw	r30, r24
    37c2:	db 01       	movw	r26, r22
    37c4:	40 81       	ld	r20, Z
    37c6:	51 81       	ldd	r21, Z+1	; 0x01
    37c8:	22 81       	ldd	r18, Z+2	; 0x02
    37ca:	62 2f       	mov	r22, r18
    37cc:	6f 77       	andi	r22, 0x7F	; 127
    37ce:	70 e0       	ldi	r23, 0x00	; 0
    37d0:	22 1f       	adc	r18, r18
    37d2:	22 27       	eor	r18, r18
    37d4:	22 1f       	adc	r18, r18
    37d6:	93 81       	ldd	r25, Z+3	; 0x03
    37d8:	89 2f       	mov	r24, r25
    37da:	88 0f       	add	r24, r24
    37dc:	82 2b       	or	r24, r18
    37de:	28 2f       	mov	r18, r24
    37e0:	30 e0       	ldi	r19, 0x00	; 0
    37e2:	99 1f       	adc	r25, r25
    37e4:	99 27       	eor	r25, r25
    37e6:	99 1f       	adc	r25, r25
    37e8:	11 96       	adiw	r26, 0x01	; 1
    37ea:	9c 93       	st	X, r25
    37ec:	11 97       	sbiw	r26, 0x01	; 1
    37ee:	21 15       	cp	r18, r1
    37f0:	31 05       	cpc	r19, r1
    37f2:	a9 f5       	brne	.+106    	; 0x385e <__unpack_f+0x9e>
    37f4:	41 15       	cp	r20, r1
    37f6:	51 05       	cpc	r21, r1
    37f8:	61 05       	cpc	r22, r1
    37fa:	71 05       	cpc	r23, r1
    37fc:	11 f4       	brne	.+4      	; 0x3802 <__unpack_f+0x42>
    37fe:	82 e0       	ldi	r24, 0x02	; 2
    3800:	37 c0       	rjmp	.+110    	; 0x3870 <__unpack_f+0xb0>
    3802:	82 e8       	ldi	r24, 0x82	; 130
    3804:	9f ef       	ldi	r25, 0xFF	; 255
    3806:	13 96       	adiw	r26, 0x03	; 3
    3808:	9c 93       	st	X, r25
    380a:	8e 93       	st	-X, r24
    380c:	12 97       	sbiw	r26, 0x02	; 2
    380e:	9a 01       	movw	r18, r20
    3810:	ab 01       	movw	r20, r22
    3812:	67 e0       	ldi	r22, 0x07	; 7
    3814:	22 0f       	add	r18, r18
    3816:	33 1f       	adc	r19, r19
    3818:	44 1f       	adc	r20, r20
    381a:	55 1f       	adc	r21, r21
    381c:	6a 95       	dec	r22
    381e:	d1 f7       	brne	.-12     	; 0x3814 <__unpack_f+0x54>
    3820:	83 e0       	ldi	r24, 0x03	; 3
    3822:	8c 93       	st	X, r24
    3824:	0d c0       	rjmp	.+26     	; 0x3840 <__unpack_f+0x80>
    3826:	22 0f       	add	r18, r18
    3828:	33 1f       	adc	r19, r19
    382a:	44 1f       	adc	r20, r20
    382c:	55 1f       	adc	r21, r21
    382e:	12 96       	adiw	r26, 0x02	; 2
    3830:	8d 91       	ld	r24, X+
    3832:	9c 91       	ld	r25, X
    3834:	13 97       	sbiw	r26, 0x03	; 3
    3836:	01 97       	sbiw	r24, 0x01	; 1
    3838:	13 96       	adiw	r26, 0x03	; 3
    383a:	9c 93       	st	X, r25
    383c:	8e 93       	st	-X, r24
    383e:	12 97       	sbiw	r26, 0x02	; 2
    3840:	20 30       	cpi	r18, 0x00	; 0
    3842:	80 e0       	ldi	r24, 0x00	; 0
    3844:	38 07       	cpc	r19, r24
    3846:	80 e0       	ldi	r24, 0x00	; 0
    3848:	48 07       	cpc	r20, r24
    384a:	80 e4       	ldi	r24, 0x40	; 64
    384c:	58 07       	cpc	r21, r24
    384e:	58 f3       	brcs	.-42     	; 0x3826 <__unpack_f+0x66>
    3850:	14 96       	adiw	r26, 0x04	; 4
    3852:	2d 93       	st	X+, r18
    3854:	3d 93       	st	X+, r19
    3856:	4d 93       	st	X+, r20
    3858:	5c 93       	st	X, r21
    385a:	17 97       	sbiw	r26, 0x07	; 7
    385c:	08 95       	ret
    385e:	2f 3f       	cpi	r18, 0xFF	; 255
    3860:	31 05       	cpc	r19, r1
    3862:	79 f4       	brne	.+30     	; 0x3882 <__unpack_f+0xc2>
    3864:	41 15       	cp	r20, r1
    3866:	51 05       	cpc	r21, r1
    3868:	61 05       	cpc	r22, r1
    386a:	71 05       	cpc	r23, r1
    386c:	19 f4       	brne	.+6      	; 0x3874 <__unpack_f+0xb4>
    386e:	84 e0       	ldi	r24, 0x04	; 4
    3870:	8c 93       	st	X, r24
    3872:	08 95       	ret
    3874:	64 ff       	sbrs	r22, 4
    3876:	03 c0       	rjmp	.+6      	; 0x387e <__unpack_f+0xbe>
    3878:	81 e0       	ldi	r24, 0x01	; 1
    387a:	8c 93       	st	X, r24
    387c:	12 c0       	rjmp	.+36     	; 0x38a2 <__unpack_f+0xe2>
    387e:	1c 92       	st	X, r1
    3880:	10 c0       	rjmp	.+32     	; 0x38a2 <__unpack_f+0xe2>
    3882:	2f 57       	subi	r18, 0x7F	; 127
    3884:	30 40       	sbci	r19, 0x00	; 0
    3886:	13 96       	adiw	r26, 0x03	; 3
    3888:	3c 93       	st	X, r19
    388a:	2e 93       	st	-X, r18
    388c:	12 97       	sbiw	r26, 0x02	; 2
    388e:	83 e0       	ldi	r24, 0x03	; 3
    3890:	8c 93       	st	X, r24
    3892:	87 e0       	ldi	r24, 0x07	; 7
    3894:	44 0f       	add	r20, r20
    3896:	55 1f       	adc	r21, r21
    3898:	66 1f       	adc	r22, r22
    389a:	77 1f       	adc	r23, r23
    389c:	8a 95       	dec	r24
    389e:	d1 f7       	brne	.-12     	; 0x3894 <__unpack_f+0xd4>
    38a0:	70 64       	ori	r23, 0x40	; 64
    38a2:	14 96       	adiw	r26, 0x04	; 4
    38a4:	4d 93       	st	X+, r20
    38a6:	5d 93       	st	X+, r21
    38a8:	6d 93       	st	X+, r22
    38aa:	7c 93       	st	X, r23
    38ac:	17 97       	sbiw	r26, 0x07	; 7
    38ae:	08 95       	ret

000038b0 <__fpcmp_parts_f>:
    38b0:	1f 93       	push	r17
    38b2:	dc 01       	movw	r26, r24
    38b4:	fb 01       	movw	r30, r22
    38b6:	9c 91       	ld	r25, X
    38b8:	92 30       	cpi	r25, 0x02	; 2
    38ba:	08 f4       	brcc	.+2      	; 0x38be <__fpcmp_parts_f+0xe>
    38bc:	47 c0       	rjmp	.+142    	; 0x394c <__fpcmp_parts_f+0x9c>
    38be:	80 81       	ld	r24, Z
    38c0:	82 30       	cpi	r24, 0x02	; 2
    38c2:	08 f4       	brcc	.+2      	; 0x38c6 <__fpcmp_parts_f+0x16>
    38c4:	43 c0       	rjmp	.+134    	; 0x394c <__fpcmp_parts_f+0x9c>
    38c6:	94 30       	cpi	r25, 0x04	; 4
    38c8:	51 f4       	brne	.+20     	; 0x38de <__fpcmp_parts_f+0x2e>
    38ca:	11 96       	adiw	r26, 0x01	; 1
    38cc:	1c 91       	ld	r17, X
    38ce:	84 30       	cpi	r24, 0x04	; 4
    38d0:	99 f5       	brne	.+102    	; 0x3938 <__fpcmp_parts_f+0x88>
    38d2:	81 81       	ldd	r24, Z+1	; 0x01
    38d4:	68 2f       	mov	r22, r24
    38d6:	70 e0       	ldi	r23, 0x00	; 0
    38d8:	61 1b       	sub	r22, r17
    38da:	71 09       	sbc	r23, r1
    38dc:	3f c0       	rjmp	.+126    	; 0x395c <__fpcmp_parts_f+0xac>
    38de:	84 30       	cpi	r24, 0x04	; 4
    38e0:	21 f0       	breq	.+8      	; 0x38ea <__fpcmp_parts_f+0x3a>
    38e2:	92 30       	cpi	r25, 0x02	; 2
    38e4:	31 f4       	brne	.+12     	; 0x38f2 <__fpcmp_parts_f+0x42>
    38e6:	82 30       	cpi	r24, 0x02	; 2
    38e8:	b9 f1       	breq	.+110    	; 0x3958 <__fpcmp_parts_f+0xa8>
    38ea:	81 81       	ldd	r24, Z+1	; 0x01
    38ec:	88 23       	and	r24, r24
    38ee:	89 f1       	breq	.+98     	; 0x3952 <__fpcmp_parts_f+0xa2>
    38f0:	2d c0       	rjmp	.+90     	; 0x394c <__fpcmp_parts_f+0x9c>
    38f2:	11 96       	adiw	r26, 0x01	; 1
    38f4:	1c 91       	ld	r17, X
    38f6:	11 97       	sbiw	r26, 0x01	; 1
    38f8:	82 30       	cpi	r24, 0x02	; 2
    38fa:	f1 f0       	breq	.+60     	; 0x3938 <__fpcmp_parts_f+0x88>
    38fc:	81 81       	ldd	r24, Z+1	; 0x01
    38fe:	18 17       	cp	r17, r24
    3900:	d9 f4       	brne	.+54     	; 0x3938 <__fpcmp_parts_f+0x88>
    3902:	12 96       	adiw	r26, 0x02	; 2
    3904:	2d 91       	ld	r18, X+
    3906:	3c 91       	ld	r19, X
    3908:	13 97       	sbiw	r26, 0x03	; 3
    390a:	82 81       	ldd	r24, Z+2	; 0x02
    390c:	93 81       	ldd	r25, Z+3	; 0x03
    390e:	82 17       	cp	r24, r18
    3910:	93 07       	cpc	r25, r19
    3912:	94 f0       	brlt	.+36     	; 0x3938 <__fpcmp_parts_f+0x88>
    3914:	28 17       	cp	r18, r24
    3916:	39 07       	cpc	r19, r25
    3918:	bc f0       	brlt	.+46     	; 0x3948 <__fpcmp_parts_f+0x98>
    391a:	14 96       	adiw	r26, 0x04	; 4
    391c:	8d 91       	ld	r24, X+
    391e:	9d 91       	ld	r25, X+
    3920:	0d 90       	ld	r0, X+
    3922:	bc 91       	ld	r27, X
    3924:	a0 2d       	mov	r26, r0
    3926:	24 81       	ldd	r18, Z+4	; 0x04
    3928:	35 81       	ldd	r19, Z+5	; 0x05
    392a:	46 81       	ldd	r20, Z+6	; 0x06
    392c:	57 81       	ldd	r21, Z+7	; 0x07
    392e:	28 17       	cp	r18, r24
    3930:	39 07       	cpc	r19, r25
    3932:	4a 07       	cpc	r20, r26
    3934:	5b 07       	cpc	r21, r27
    3936:	18 f4       	brcc	.+6      	; 0x393e <__fpcmp_parts_f+0x8e>
    3938:	11 23       	and	r17, r17
    393a:	41 f0       	breq	.+16     	; 0x394c <__fpcmp_parts_f+0x9c>
    393c:	0a c0       	rjmp	.+20     	; 0x3952 <__fpcmp_parts_f+0xa2>
    393e:	82 17       	cp	r24, r18
    3940:	93 07       	cpc	r25, r19
    3942:	a4 07       	cpc	r26, r20
    3944:	b5 07       	cpc	r27, r21
    3946:	40 f4       	brcc	.+16     	; 0x3958 <__fpcmp_parts_f+0xa8>
    3948:	11 23       	and	r17, r17
    394a:	19 f0       	breq	.+6      	; 0x3952 <__fpcmp_parts_f+0xa2>
    394c:	61 e0       	ldi	r22, 0x01	; 1
    394e:	70 e0       	ldi	r23, 0x00	; 0
    3950:	05 c0       	rjmp	.+10     	; 0x395c <__fpcmp_parts_f+0xac>
    3952:	6f ef       	ldi	r22, 0xFF	; 255
    3954:	7f ef       	ldi	r23, 0xFF	; 255
    3956:	02 c0       	rjmp	.+4      	; 0x395c <__fpcmp_parts_f+0xac>
    3958:	60 e0       	ldi	r22, 0x00	; 0
    395a:	70 e0       	ldi	r23, 0x00	; 0
    395c:	cb 01       	movw	r24, r22
    395e:	1f 91       	pop	r17
    3960:	08 95       	ret

00003962 <__udivmodqi4>:
    3962:	99 1b       	sub	r25, r25
    3964:	79 e0       	ldi	r23, 0x09	; 9
    3966:	04 c0       	rjmp	.+8      	; 0x3970 <__udivmodqi4_ep>

00003968 <__udivmodqi4_loop>:
    3968:	99 1f       	adc	r25, r25
    396a:	96 17       	cp	r25, r22
    396c:	08 f0       	brcs	.+2      	; 0x3970 <__udivmodqi4_ep>
    396e:	96 1b       	sub	r25, r22

00003970 <__udivmodqi4_ep>:
    3970:	88 1f       	adc	r24, r24
    3972:	7a 95       	dec	r23
    3974:	c9 f7       	brne	.-14     	; 0x3968 <__udivmodqi4_loop>
    3976:	80 95       	com	r24
    3978:	08 95       	ret

0000397a <__prologue_saves__>:
    397a:	2f 92       	push	r2
    397c:	3f 92       	push	r3
    397e:	4f 92       	push	r4
    3980:	5f 92       	push	r5
    3982:	6f 92       	push	r6
    3984:	7f 92       	push	r7
    3986:	8f 92       	push	r8
    3988:	9f 92       	push	r9
    398a:	af 92       	push	r10
    398c:	bf 92       	push	r11
    398e:	cf 92       	push	r12
    3990:	df 92       	push	r13
    3992:	ef 92       	push	r14
    3994:	ff 92       	push	r15
    3996:	0f 93       	push	r16
    3998:	1f 93       	push	r17
    399a:	cf 93       	push	r28
    399c:	df 93       	push	r29
    399e:	cd b7       	in	r28, 0x3d	; 61
    39a0:	de b7       	in	r29, 0x3e	; 62
    39a2:	ca 1b       	sub	r28, r26
    39a4:	db 0b       	sbc	r29, r27
    39a6:	0f b6       	in	r0, 0x3f	; 63
    39a8:	f8 94       	cli
    39aa:	de bf       	out	0x3e, r29	; 62
    39ac:	0f be       	out	0x3f, r0	; 63
    39ae:	cd bf       	out	0x3d, r28	; 61
    39b0:	09 94       	ijmp

000039b2 <__epilogue_restores__>:
    39b2:	2a 88       	ldd	r2, Y+18	; 0x12
    39b4:	39 88       	ldd	r3, Y+17	; 0x11
    39b6:	48 88       	ldd	r4, Y+16	; 0x10
    39b8:	5f 84       	ldd	r5, Y+15	; 0x0f
    39ba:	6e 84       	ldd	r6, Y+14	; 0x0e
    39bc:	7d 84       	ldd	r7, Y+13	; 0x0d
    39be:	8c 84       	ldd	r8, Y+12	; 0x0c
    39c0:	9b 84       	ldd	r9, Y+11	; 0x0b
    39c2:	aa 84       	ldd	r10, Y+10	; 0x0a
    39c4:	b9 84       	ldd	r11, Y+9	; 0x09
    39c6:	c8 84       	ldd	r12, Y+8	; 0x08
    39c8:	df 80       	ldd	r13, Y+7	; 0x07
    39ca:	ee 80       	ldd	r14, Y+6	; 0x06
    39cc:	fd 80       	ldd	r15, Y+5	; 0x05
    39ce:	0c 81       	ldd	r16, Y+4	; 0x04
    39d0:	1b 81       	ldd	r17, Y+3	; 0x03
    39d2:	aa 81       	ldd	r26, Y+2	; 0x02
    39d4:	b9 81       	ldd	r27, Y+1	; 0x01
    39d6:	ce 0f       	add	r28, r30
    39d8:	d1 1d       	adc	r29, r1
    39da:	0f b6       	in	r0, 0x3f	; 63
    39dc:	f8 94       	cli
    39de:	de bf       	out	0x3e, r29	; 62
    39e0:	0f be       	out	0x3f, r0	; 63
    39e2:	cd bf       	out	0x3d, r28	; 61
    39e4:	ed 01       	movw	r28, r26
    39e6:	08 95       	ret

000039e8 <memcpy>:
    39e8:	fb 01       	movw	r30, r22
    39ea:	dc 01       	movw	r26, r24
    39ec:	02 c0       	rjmp	.+4      	; 0x39f2 <memcpy+0xa>
    39ee:	01 90       	ld	r0, Z+
    39f0:	0d 92       	st	X+, r0
    39f2:	41 50       	subi	r20, 0x01	; 1
    39f4:	50 40       	sbci	r21, 0x00	; 0
    39f6:	d8 f7       	brcc	.-10     	; 0x39ee <memcpy+0x6>
    39f8:	08 95       	ret

000039fa <itoa>:
    39fa:	fb 01       	movw	r30, r22
    39fc:	9f 01       	movw	r18, r30
    39fe:	e8 94       	clt
    3a00:	42 30       	cpi	r20, 0x02	; 2
    3a02:	c4 f0       	brlt	.+48     	; 0x3a34 <itoa+0x3a>
    3a04:	45 32       	cpi	r20, 0x25	; 37
    3a06:	b4 f4       	brge	.+44     	; 0x3a34 <itoa+0x3a>
    3a08:	4a 30       	cpi	r20, 0x0A	; 10
    3a0a:	29 f4       	brne	.+10     	; 0x3a16 <itoa+0x1c>
    3a0c:	97 fb       	bst	r25, 7
    3a0e:	1e f4       	brtc	.+6      	; 0x3a16 <itoa+0x1c>
    3a10:	90 95       	com	r25
    3a12:	81 95       	neg	r24
    3a14:	9f 4f       	sbci	r25, 0xFF	; 255
    3a16:	64 2f       	mov	r22, r20
    3a18:	77 27       	eor	r23, r23
    3a1a:	0e 94 cf 1f 	call	0x3f9e	; 0x3f9e <__udivmodhi4>
    3a1e:	80 5d       	subi	r24, 0xD0	; 208
    3a20:	8a 33       	cpi	r24, 0x3A	; 58
    3a22:	0c f0       	brlt	.+2      	; 0x3a26 <itoa+0x2c>
    3a24:	89 5d       	subi	r24, 0xD9	; 217
    3a26:	81 93       	st	Z+, r24
    3a28:	cb 01       	movw	r24, r22
    3a2a:	00 97       	sbiw	r24, 0x00	; 0
    3a2c:	a1 f7       	brne	.-24     	; 0x3a16 <itoa+0x1c>
    3a2e:	16 f4       	brtc	.+4      	; 0x3a34 <itoa+0x3a>
    3a30:	5d e2       	ldi	r21, 0x2D	; 45
    3a32:	51 93       	st	Z+, r21
    3a34:	10 82       	st	Z, r1
    3a36:	c9 01       	movw	r24, r18
    3a38:	0c 94 35 1f 	jmp	0x3e6a	; 0x3e6a <strrev>

00003a3c <sprintf>:
    3a3c:	ae e0       	ldi	r26, 0x0E	; 14
    3a3e:	b0 e0       	ldi	r27, 0x00	; 0
    3a40:	e4 e2       	ldi	r30, 0x24	; 36
    3a42:	fd e1       	ldi	r31, 0x1D	; 29
    3a44:	0c 94 cb 1c 	jmp	0x3996	; 0x3996 <__prologue_saves__+0x1c>
    3a48:	0d 89       	ldd	r16, Y+21	; 0x15
    3a4a:	1e 89       	ldd	r17, Y+22	; 0x16
    3a4c:	86 e0       	ldi	r24, 0x06	; 6
    3a4e:	8c 83       	std	Y+4, r24	; 0x04
    3a50:	1a 83       	std	Y+2, r17	; 0x02
    3a52:	09 83       	std	Y+1, r16	; 0x01
    3a54:	8f ef       	ldi	r24, 0xFF	; 255
    3a56:	9f e7       	ldi	r25, 0x7F	; 127
    3a58:	9e 83       	std	Y+6, r25	; 0x06
    3a5a:	8d 83       	std	Y+5, r24	; 0x05
    3a5c:	9e 01       	movw	r18, r28
    3a5e:	27 5e       	subi	r18, 0xE7	; 231
    3a60:	3f 4f       	sbci	r19, 0xFF	; 255
    3a62:	ce 01       	movw	r24, r28
    3a64:	01 96       	adiw	r24, 0x01	; 1
    3a66:	6f 89       	ldd	r22, Y+23	; 0x17
    3a68:	78 8d       	ldd	r23, Y+24	; 0x18
    3a6a:	a9 01       	movw	r20, r18
    3a6c:	0e 94 42 1d 	call	0x3a84	; 0x3a84 <vfprintf>
    3a70:	2f 81       	ldd	r18, Y+7	; 0x07
    3a72:	38 85       	ldd	r19, Y+8	; 0x08
    3a74:	02 0f       	add	r16, r18
    3a76:	13 1f       	adc	r17, r19
    3a78:	f8 01       	movw	r30, r16
    3a7a:	10 82       	st	Z, r1
    3a7c:	2e 96       	adiw	r28, 0x0e	; 14
    3a7e:	e4 e0       	ldi	r30, 0x04	; 4
    3a80:	0c 94 e7 1c 	jmp	0x39ce	; 0x39ce <__epilogue_restores__+0x1c>

00003a84 <vfprintf>:
    3a84:	ab e0       	ldi	r26, 0x0B	; 11
    3a86:	b0 e0       	ldi	r27, 0x00	; 0
    3a88:	e8 e4       	ldi	r30, 0x48	; 72
    3a8a:	fd e1       	ldi	r31, 0x1D	; 29
    3a8c:	0c 94 bd 1c 	jmp	0x397a	; 0x397a <__prologue_saves__>
    3a90:	3c 01       	movw	r6, r24
    3a92:	2b 01       	movw	r4, r22
    3a94:	5a 01       	movw	r10, r20
    3a96:	fc 01       	movw	r30, r24
    3a98:	17 82       	std	Z+7, r1	; 0x07
    3a9a:	16 82       	std	Z+6, r1	; 0x06
    3a9c:	83 81       	ldd	r24, Z+3	; 0x03
    3a9e:	81 fd       	sbrc	r24, 1
    3aa0:	03 c0       	rjmp	.+6      	; 0x3aa8 <vfprintf+0x24>
    3aa2:	6f ef       	ldi	r22, 0xFF	; 255
    3aa4:	7f ef       	ldi	r23, 0xFF	; 255
    3aa6:	c6 c1       	rjmp	.+908    	; 0x3e34 <vfprintf+0x3b0>
    3aa8:	9a e0       	ldi	r25, 0x0A	; 10
    3aaa:	89 2e       	mov	r8, r25
    3aac:	1e 01       	movw	r2, r28
    3aae:	08 94       	sec
    3ab0:	21 1c       	adc	r2, r1
    3ab2:	31 1c       	adc	r3, r1
    3ab4:	f3 01       	movw	r30, r6
    3ab6:	23 81       	ldd	r18, Z+3	; 0x03
    3ab8:	f2 01       	movw	r30, r4
    3aba:	23 fd       	sbrc	r18, 3
    3abc:	85 91       	lpm	r24, Z+
    3abe:	23 ff       	sbrs	r18, 3
    3ac0:	81 91       	ld	r24, Z+
    3ac2:	2f 01       	movw	r4, r30
    3ac4:	88 23       	and	r24, r24
    3ac6:	09 f4       	brne	.+2      	; 0x3aca <vfprintf+0x46>
    3ac8:	b2 c1       	rjmp	.+868    	; 0x3e2e <vfprintf+0x3aa>
    3aca:	85 32       	cpi	r24, 0x25	; 37
    3acc:	39 f4       	brne	.+14     	; 0x3adc <vfprintf+0x58>
    3ace:	23 fd       	sbrc	r18, 3
    3ad0:	85 91       	lpm	r24, Z+
    3ad2:	23 ff       	sbrs	r18, 3
    3ad4:	81 91       	ld	r24, Z+
    3ad6:	2f 01       	movw	r4, r30
    3ad8:	85 32       	cpi	r24, 0x25	; 37
    3ada:	29 f4       	brne	.+10     	; 0x3ae6 <vfprintf+0x62>
    3adc:	90 e0       	ldi	r25, 0x00	; 0
    3ade:	b3 01       	movw	r22, r6
    3ae0:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3ae4:	e7 cf       	rjmp	.-50     	; 0x3ab4 <vfprintf+0x30>
    3ae6:	98 2f       	mov	r25, r24
    3ae8:	ff 24       	eor	r15, r15
    3aea:	ee 24       	eor	r14, r14
    3aec:	99 24       	eor	r9, r9
    3aee:	ff e1       	ldi	r31, 0x1F	; 31
    3af0:	ff 15       	cp	r31, r15
    3af2:	d0 f0       	brcs	.+52     	; 0x3b28 <vfprintf+0xa4>
    3af4:	9b 32       	cpi	r25, 0x2B	; 43
    3af6:	69 f0       	breq	.+26     	; 0x3b12 <vfprintf+0x8e>
    3af8:	9c 32       	cpi	r25, 0x2C	; 44
    3afa:	28 f4       	brcc	.+10     	; 0x3b06 <vfprintf+0x82>
    3afc:	90 32       	cpi	r25, 0x20	; 32
    3afe:	59 f0       	breq	.+22     	; 0x3b16 <vfprintf+0x92>
    3b00:	93 32       	cpi	r25, 0x23	; 35
    3b02:	91 f4       	brne	.+36     	; 0x3b28 <vfprintf+0xa4>
    3b04:	0e c0       	rjmp	.+28     	; 0x3b22 <vfprintf+0x9e>
    3b06:	9d 32       	cpi	r25, 0x2D	; 45
    3b08:	49 f0       	breq	.+18     	; 0x3b1c <vfprintf+0x98>
    3b0a:	90 33       	cpi	r25, 0x30	; 48
    3b0c:	69 f4       	brne	.+26     	; 0x3b28 <vfprintf+0xa4>
    3b0e:	41 e0       	ldi	r20, 0x01	; 1
    3b10:	24 c0       	rjmp	.+72     	; 0x3b5a <vfprintf+0xd6>
    3b12:	52 e0       	ldi	r21, 0x02	; 2
    3b14:	f5 2a       	or	r15, r21
    3b16:	84 e0       	ldi	r24, 0x04	; 4
    3b18:	f8 2a       	or	r15, r24
    3b1a:	28 c0       	rjmp	.+80     	; 0x3b6c <vfprintf+0xe8>
    3b1c:	98 e0       	ldi	r25, 0x08	; 8
    3b1e:	f9 2a       	or	r15, r25
    3b20:	25 c0       	rjmp	.+74     	; 0x3b6c <vfprintf+0xe8>
    3b22:	e0 e1       	ldi	r30, 0x10	; 16
    3b24:	fe 2a       	or	r15, r30
    3b26:	22 c0       	rjmp	.+68     	; 0x3b6c <vfprintf+0xe8>
    3b28:	f7 fc       	sbrc	r15, 7
    3b2a:	29 c0       	rjmp	.+82     	; 0x3b7e <vfprintf+0xfa>
    3b2c:	89 2f       	mov	r24, r25
    3b2e:	80 53       	subi	r24, 0x30	; 48
    3b30:	8a 30       	cpi	r24, 0x0A	; 10
    3b32:	70 f4       	brcc	.+28     	; 0x3b50 <vfprintf+0xcc>
    3b34:	f6 fe       	sbrs	r15, 6
    3b36:	05 c0       	rjmp	.+10     	; 0x3b42 <vfprintf+0xbe>
    3b38:	98 9c       	mul	r9, r8
    3b3a:	90 2c       	mov	r9, r0
    3b3c:	11 24       	eor	r1, r1
    3b3e:	98 0e       	add	r9, r24
    3b40:	15 c0       	rjmp	.+42     	; 0x3b6c <vfprintf+0xe8>
    3b42:	e8 9c       	mul	r14, r8
    3b44:	e0 2c       	mov	r14, r0
    3b46:	11 24       	eor	r1, r1
    3b48:	e8 0e       	add	r14, r24
    3b4a:	f0 e2       	ldi	r31, 0x20	; 32
    3b4c:	ff 2a       	or	r15, r31
    3b4e:	0e c0       	rjmp	.+28     	; 0x3b6c <vfprintf+0xe8>
    3b50:	9e 32       	cpi	r25, 0x2E	; 46
    3b52:	29 f4       	brne	.+10     	; 0x3b5e <vfprintf+0xda>
    3b54:	f6 fc       	sbrc	r15, 6
    3b56:	6b c1       	rjmp	.+726    	; 0x3e2e <vfprintf+0x3aa>
    3b58:	40 e4       	ldi	r20, 0x40	; 64
    3b5a:	f4 2a       	or	r15, r20
    3b5c:	07 c0       	rjmp	.+14     	; 0x3b6c <vfprintf+0xe8>
    3b5e:	9c 36       	cpi	r25, 0x6C	; 108
    3b60:	19 f4       	brne	.+6      	; 0x3b68 <vfprintf+0xe4>
    3b62:	50 e8       	ldi	r21, 0x80	; 128
    3b64:	f5 2a       	or	r15, r21
    3b66:	02 c0       	rjmp	.+4      	; 0x3b6c <vfprintf+0xe8>
    3b68:	98 36       	cpi	r25, 0x68	; 104
    3b6a:	49 f4       	brne	.+18     	; 0x3b7e <vfprintf+0xfa>
    3b6c:	f2 01       	movw	r30, r4
    3b6e:	23 fd       	sbrc	r18, 3
    3b70:	95 91       	lpm	r25, Z+
    3b72:	23 ff       	sbrs	r18, 3
    3b74:	91 91       	ld	r25, Z+
    3b76:	2f 01       	movw	r4, r30
    3b78:	99 23       	and	r25, r25
    3b7a:	09 f0       	breq	.+2      	; 0x3b7e <vfprintf+0xfa>
    3b7c:	b8 cf       	rjmp	.-144    	; 0x3aee <vfprintf+0x6a>
    3b7e:	89 2f       	mov	r24, r25
    3b80:	85 54       	subi	r24, 0x45	; 69
    3b82:	83 30       	cpi	r24, 0x03	; 3
    3b84:	18 f0       	brcs	.+6      	; 0x3b8c <vfprintf+0x108>
    3b86:	80 52       	subi	r24, 0x20	; 32
    3b88:	83 30       	cpi	r24, 0x03	; 3
    3b8a:	38 f4       	brcc	.+14     	; 0x3b9a <vfprintf+0x116>
    3b8c:	44 e0       	ldi	r20, 0x04	; 4
    3b8e:	50 e0       	ldi	r21, 0x00	; 0
    3b90:	a4 0e       	add	r10, r20
    3b92:	b5 1e       	adc	r11, r21
    3b94:	5f e3       	ldi	r21, 0x3F	; 63
    3b96:	59 83       	std	Y+1, r21	; 0x01
    3b98:	0f c0       	rjmp	.+30     	; 0x3bb8 <vfprintf+0x134>
    3b9a:	93 36       	cpi	r25, 0x63	; 99
    3b9c:	31 f0       	breq	.+12     	; 0x3baa <vfprintf+0x126>
    3b9e:	93 37       	cpi	r25, 0x73	; 115
    3ba0:	79 f0       	breq	.+30     	; 0x3bc0 <vfprintf+0x13c>
    3ba2:	93 35       	cpi	r25, 0x53	; 83
    3ba4:	09 f0       	breq	.+2      	; 0x3ba8 <vfprintf+0x124>
    3ba6:	56 c0       	rjmp	.+172    	; 0x3c54 <vfprintf+0x1d0>
    3ba8:	20 c0       	rjmp	.+64     	; 0x3bea <vfprintf+0x166>
    3baa:	f5 01       	movw	r30, r10
    3bac:	80 81       	ld	r24, Z
    3bae:	89 83       	std	Y+1, r24	; 0x01
    3bb0:	42 e0       	ldi	r20, 0x02	; 2
    3bb2:	50 e0       	ldi	r21, 0x00	; 0
    3bb4:	a4 0e       	add	r10, r20
    3bb6:	b5 1e       	adc	r11, r21
    3bb8:	61 01       	movw	r12, r2
    3bba:	01 e0       	ldi	r16, 0x01	; 1
    3bbc:	10 e0       	ldi	r17, 0x00	; 0
    3bbe:	12 c0       	rjmp	.+36     	; 0x3be4 <vfprintf+0x160>
    3bc0:	f5 01       	movw	r30, r10
    3bc2:	c0 80       	ld	r12, Z
    3bc4:	d1 80       	ldd	r13, Z+1	; 0x01
    3bc6:	f6 fc       	sbrc	r15, 6
    3bc8:	03 c0       	rjmp	.+6      	; 0x3bd0 <vfprintf+0x14c>
    3bca:	6f ef       	ldi	r22, 0xFF	; 255
    3bcc:	7f ef       	ldi	r23, 0xFF	; 255
    3bce:	02 c0       	rjmp	.+4      	; 0x3bd4 <vfprintf+0x150>
    3bd0:	69 2d       	mov	r22, r9
    3bd2:	70 e0       	ldi	r23, 0x00	; 0
    3bd4:	42 e0       	ldi	r20, 0x02	; 2
    3bd6:	50 e0       	ldi	r21, 0x00	; 0
    3bd8:	a4 0e       	add	r10, r20
    3bda:	b5 1e       	adc	r11, r21
    3bdc:	c6 01       	movw	r24, r12
    3bde:	0e 94 2a 1f 	call	0x3e54	; 0x3e54 <strnlen>
    3be2:	8c 01       	movw	r16, r24
    3be4:	5f e7       	ldi	r21, 0x7F	; 127
    3be6:	f5 22       	and	r15, r21
    3be8:	14 c0       	rjmp	.+40     	; 0x3c12 <vfprintf+0x18e>
    3bea:	f5 01       	movw	r30, r10
    3bec:	c0 80       	ld	r12, Z
    3bee:	d1 80       	ldd	r13, Z+1	; 0x01
    3bf0:	f6 fc       	sbrc	r15, 6
    3bf2:	03 c0       	rjmp	.+6      	; 0x3bfa <vfprintf+0x176>
    3bf4:	6f ef       	ldi	r22, 0xFF	; 255
    3bf6:	7f ef       	ldi	r23, 0xFF	; 255
    3bf8:	02 c0       	rjmp	.+4      	; 0x3bfe <vfprintf+0x17a>
    3bfa:	69 2d       	mov	r22, r9
    3bfc:	70 e0       	ldi	r23, 0x00	; 0
    3bfe:	42 e0       	ldi	r20, 0x02	; 2
    3c00:	50 e0       	ldi	r21, 0x00	; 0
    3c02:	a4 0e       	add	r10, r20
    3c04:	b5 1e       	adc	r11, r21
    3c06:	c6 01       	movw	r24, r12
    3c08:	0e 94 1f 1f 	call	0x3e3e	; 0x3e3e <strnlen_P>
    3c0c:	8c 01       	movw	r16, r24
    3c0e:	50 e8       	ldi	r21, 0x80	; 128
    3c10:	f5 2a       	or	r15, r21
    3c12:	f3 fe       	sbrs	r15, 3
    3c14:	07 c0       	rjmp	.+14     	; 0x3c24 <vfprintf+0x1a0>
    3c16:	1a c0       	rjmp	.+52     	; 0x3c4c <vfprintf+0x1c8>
    3c18:	80 e2       	ldi	r24, 0x20	; 32
    3c1a:	90 e0       	ldi	r25, 0x00	; 0
    3c1c:	b3 01       	movw	r22, r6
    3c1e:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3c22:	ea 94       	dec	r14
    3c24:	8e 2d       	mov	r24, r14
    3c26:	90 e0       	ldi	r25, 0x00	; 0
    3c28:	08 17       	cp	r16, r24
    3c2a:	19 07       	cpc	r17, r25
    3c2c:	a8 f3       	brcs	.-22     	; 0x3c18 <vfprintf+0x194>
    3c2e:	0e c0       	rjmp	.+28     	; 0x3c4c <vfprintf+0x1c8>
    3c30:	f6 01       	movw	r30, r12
    3c32:	f7 fc       	sbrc	r15, 7
    3c34:	85 91       	lpm	r24, Z+
    3c36:	f7 fe       	sbrs	r15, 7
    3c38:	81 91       	ld	r24, Z+
    3c3a:	6f 01       	movw	r12, r30
    3c3c:	90 e0       	ldi	r25, 0x00	; 0
    3c3e:	b3 01       	movw	r22, r6
    3c40:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3c44:	e1 10       	cpse	r14, r1
    3c46:	ea 94       	dec	r14
    3c48:	01 50       	subi	r16, 0x01	; 1
    3c4a:	10 40       	sbci	r17, 0x00	; 0
    3c4c:	01 15       	cp	r16, r1
    3c4e:	11 05       	cpc	r17, r1
    3c50:	79 f7       	brne	.-34     	; 0x3c30 <vfprintf+0x1ac>
    3c52:	ea c0       	rjmp	.+468    	; 0x3e28 <vfprintf+0x3a4>
    3c54:	94 36       	cpi	r25, 0x64	; 100
    3c56:	11 f0       	breq	.+4      	; 0x3c5c <vfprintf+0x1d8>
    3c58:	99 36       	cpi	r25, 0x69	; 105
    3c5a:	69 f5       	brne	.+90     	; 0x3cb6 <vfprintf+0x232>
    3c5c:	f7 fe       	sbrs	r15, 7
    3c5e:	08 c0       	rjmp	.+16     	; 0x3c70 <vfprintf+0x1ec>
    3c60:	f5 01       	movw	r30, r10
    3c62:	20 81       	ld	r18, Z
    3c64:	31 81       	ldd	r19, Z+1	; 0x01
    3c66:	42 81       	ldd	r20, Z+2	; 0x02
    3c68:	53 81       	ldd	r21, Z+3	; 0x03
    3c6a:	84 e0       	ldi	r24, 0x04	; 4
    3c6c:	90 e0       	ldi	r25, 0x00	; 0
    3c6e:	0a c0       	rjmp	.+20     	; 0x3c84 <vfprintf+0x200>
    3c70:	f5 01       	movw	r30, r10
    3c72:	80 81       	ld	r24, Z
    3c74:	91 81       	ldd	r25, Z+1	; 0x01
    3c76:	9c 01       	movw	r18, r24
    3c78:	44 27       	eor	r20, r20
    3c7a:	37 fd       	sbrc	r19, 7
    3c7c:	40 95       	com	r20
    3c7e:	54 2f       	mov	r21, r20
    3c80:	82 e0       	ldi	r24, 0x02	; 2
    3c82:	90 e0       	ldi	r25, 0x00	; 0
    3c84:	a8 0e       	add	r10, r24
    3c86:	b9 1e       	adc	r11, r25
    3c88:	9f e6       	ldi	r25, 0x6F	; 111
    3c8a:	f9 22       	and	r15, r25
    3c8c:	57 ff       	sbrs	r21, 7
    3c8e:	09 c0       	rjmp	.+18     	; 0x3ca2 <vfprintf+0x21e>
    3c90:	50 95       	com	r21
    3c92:	40 95       	com	r20
    3c94:	30 95       	com	r19
    3c96:	21 95       	neg	r18
    3c98:	3f 4f       	sbci	r19, 0xFF	; 255
    3c9a:	4f 4f       	sbci	r20, 0xFF	; 255
    3c9c:	5f 4f       	sbci	r21, 0xFF	; 255
    3c9e:	e0 e8       	ldi	r30, 0x80	; 128
    3ca0:	fe 2a       	or	r15, r30
    3ca2:	ca 01       	movw	r24, r20
    3ca4:	b9 01       	movw	r22, r18
    3ca6:	a1 01       	movw	r20, r2
    3ca8:	2a e0       	ldi	r18, 0x0A	; 10
    3caa:	30 e0       	ldi	r19, 0x00	; 0
    3cac:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__ultoa_invert>
    3cb0:	d8 2e       	mov	r13, r24
    3cb2:	d2 18       	sub	r13, r2
    3cb4:	40 c0       	rjmp	.+128    	; 0x3d36 <vfprintf+0x2b2>
    3cb6:	95 37       	cpi	r25, 0x75	; 117
    3cb8:	29 f4       	brne	.+10     	; 0x3cc4 <vfprintf+0x240>
    3cba:	1f 2d       	mov	r17, r15
    3cbc:	1f 7e       	andi	r17, 0xEF	; 239
    3cbe:	2a e0       	ldi	r18, 0x0A	; 10
    3cc0:	30 e0       	ldi	r19, 0x00	; 0
    3cc2:	1d c0       	rjmp	.+58     	; 0x3cfe <vfprintf+0x27a>
    3cc4:	1f 2d       	mov	r17, r15
    3cc6:	19 7f       	andi	r17, 0xF9	; 249
    3cc8:	9f 36       	cpi	r25, 0x6F	; 111
    3cca:	61 f0       	breq	.+24     	; 0x3ce4 <vfprintf+0x260>
    3ccc:	90 37       	cpi	r25, 0x70	; 112
    3cce:	20 f4       	brcc	.+8      	; 0x3cd8 <vfprintf+0x254>
    3cd0:	98 35       	cpi	r25, 0x58	; 88
    3cd2:	09 f0       	breq	.+2      	; 0x3cd6 <vfprintf+0x252>
    3cd4:	ac c0       	rjmp	.+344    	; 0x3e2e <vfprintf+0x3aa>
    3cd6:	0f c0       	rjmp	.+30     	; 0x3cf6 <vfprintf+0x272>
    3cd8:	90 37       	cpi	r25, 0x70	; 112
    3cda:	39 f0       	breq	.+14     	; 0x3cea <vfprintf+0x266>
    3cdc:	98 37       	cpi	r25, 0x78	; 120
    3cde:	09 f0       	breq	.+2      	; 0x3ce2 <vfprintf+0x25e>
    3ce0:	a6 c0       	rjmp	.+332    	; 0x3e2e <vfprintf+0x3aa>
    3ce2:	04 c0       	rjmp	.+8      	; 0x3cec <vfprintf+0x268>
    3ce4:	28 e0       	ldi	r18, 0x08	; 8
    3ce6:	30 e0       	ldi	r19, 0x00	; 0
    3ce8:	0a c0       	rjmp	.+20     	; 0x3cfe <vfprintf+0x27a>
    3cea:	10 61       	ori	r17, 0x10	; 16
    3cec:	14 fd       	sbrc	r17, 4
    3cee:	14 60       	ori	r17, 0x04	; 4
    3cf0:	20 e1       	ldi	r18, 0x10	; 16
    3cf2:	30 e0       	ldi	r19, 0x00	; 0
    3cf4:	04 c0       	rjmp	.+8      	; 0x3cfe <vfprintf+0x27a>
    3cf6:	14 fd       	sbrc	r17, 4
    3cf8:	16 60       	ori	r17, 0x06	; 6
    3cfa:	20 e1       	ldi	r18, 0x10	; 16
    3cfc:	32 e0       	ldi	r19, 0x02	; 2
    3cfe:	17 ff       	sbrs	r17, 7
    3d00:	08 c0       	rjmp	.+16     	; 0x3d12 <vfprintf+0x28e>
    3d02:	f5 01       	movw	r30, r10
    3d04:	60 81       	ld	r22, Z
    3d06:	71 81       	ldd	r23, Z+1	; 0x01
    3d08:	82 81       	ldd	r24, Z+2	; 0x02
    3d0a:	93 81       	ldd	r25, Z+3	; 0x03
    3d0c:	44 e0       	ldi	r20, 0x04	; 4
    3d0e:	50 e0       	ldi	r21, 0x00	; 0
    3d10:	08 c0       	rjmp	.+16     	; 0x3d22 <vfprintf+0x29e>
    3d12:	f5 01       	movw	r30, r10
    3d14:	80 81       	ld	r24, Z
    3d16:	91 81       	ldd	r25, Z+1	; 0x01
    3d18:	bc 01       	movw	r22, r24
    3d1a:	80 e0       	ldi	r24, 0x00	; 0
    3d1c:	90 e0       	ldi	r25, 0x00	; 0
    3d1e:	42 e0       	ldi	r20, 0x02	; 2
    3d20:	50 e0       	ldi	r21, 0x00	; 0
    3d22:	a4 0e       	add	r10, r20
    3d24:	b5 1e       	adc	r11, r21
    3d26:	a1 01       	movw	r20, r2
    3d28:	0e 94 71 1f 	call	0x3ee2	; 0x3ee2 <__ultoa_invert>
    3d2c:	d8 2e       	mov	r13, r24
    3d2e:	d2 18       	sub	r13, r2
    3d30:	8f e7       	ldi	r24, 0x7F	; 127
    3d32:	f8 2e       	mov	r15, r24
    3d34:	f1 22       	and	r15, r17
    3d36:	f6 fe       	sbrs	r15, 6
    3d38:	0b c0       	rjmp	.+22     	; 0x3d50 <vfprintf+0x2cc>
    3d3a:	5e ef       	ldi	r21, 0xFE	; 254
    3d3c:	f5 22       	and	r15, r21
    3d3e:	d9 14       	cp	r13, r9
    3d40:	38 f4       	brcc	.+14     	; 0x3d50 <vfprintf+0x2cc>
    3d42:	f4 fe       	sbrs	r15, 4
    3d44:	07 c0       	rjmp	.+14     	; 0x3d54 <vfprintf+0x2d0>
    3d46:	f2 fc       	sbrc	r15, 2
    3d48:	05 c0       	rjmp	.+10     	; 0x3d54 <vfprintf+0x2d0>
    3d4a:	8f ee       	ldi	r24, 0xEF	; 239
    3d4c:	f8 22       	and	r15, r24
    3d4e:	02 c0       	rjmp	.+4      	; 0x3d54 <vfprintf+0x2d0>
    3d50:	1d 2d       	mov	r17, r13
    3d52:	01 c0       	rjmp	.+2      	; 0x3d56 <vfprintf+0x2d2>
    3d54:	19 2d       	mov	r17, r9
    3d56:	f4 fe       	sbrs	r15, 4
    3d58:	0d c0       	rjmp	.+26     	; 0x3d74 <vfprintf+0x2f0>
    3d5a:	fe 01       	movw	r30, r28
    3d5c:	ed 0d       	add	r30, r13
    3d5e:	f1 1d       	adc	r31, r1
    3d60:	80 81       	ld	r24, Z
    3d62:	80 33       	cpi	r24, 0x30	; 48
    3d64:	19 f4       	brne	.+6      	; 0x3d6c <vfprintf+0x2e8>
    3d66:	99 ee       	ldi	r25, 0xE9	; 233
    3d68:	f9 22       	and	r15, r25
    3d6a:	08 c0       	rjmp	.+16     	; 0x3d7c <vfprintf+0x2f8>
    3d6c:	1f 5f       	subi	r17, 0xFF	; 255
    3d6e:	f2 fe       	sbrs	r15, 2
    3d70:	05 c0       	rjmp	.+10     	; 0x3d7c <vfprintf+0x2f8>
    3d72:	03 c0       	rjmp	.+6      	; 0x3d7a <vfprintf+0x2f6>
    3d74:	8f 2d       	mov	r24, r15
    3d76:	86 78       	andi	r24, 0x86	; 134
    3d78:	09 f0       	breq	.+2      	; 0x3d7c <vfprintf+0x2f8>
    3d7a:	1f 5f       	subi	r17, 0xFF	; 255
    3d7c:	0f 2d       	mov	r16, r15
    3d7e:	f3 fc       	sbrc	r15, 3
    3d80:	14 c0       	rjmp	.+40     	; 0x3daa <vfprintf+0x326>
    3d82:	f0 fe       	sbrs	r15, 0
    3d84:	0f c0       	rjmp	.+30     	; 0x3da4 <vfprintf+0x320>
    3d86:	1e 15       	cp	r17, r14
    3d88:	10 f0       	brcs	.+4      	; 0x3d8e <vfprintf+0x30a>
    3d8a:	9d 2c       	mov	r9, r13
    3d8c:	0b c0       	rjmp	.+22     	; 0x3da4 <vfprintf+0x320>
    3d8e:	9d 2c       	mov	r9, r13
    3d90:	9e 0c       	add	r9, r14
    3d92:	91 1a       	sub	r9, r17
    3d94:	1e 2d       	mov	r17, r14
    3d96:	06 c0       	rjmp	.+12     	; 0x3da4 <vfprintf+0x320>
    3d98:	80 e2       	ldi	r24, 0x20	; 32
    3d9a:	90 e0       	ldi	r25, 0x00	; 0
    3d9c:	b3 01       	movw	r22, r6
    3d9e:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3da2:	1f 5f       	subi	r17, 0xFF	; 255
    3da4:	1e 15       	cp	r17, r14
    3da6:	c0 f3       	brcs	.-16     	; 0x3d98 <vfprintf+0x314>
    3da8:	04 c0       	rjmp	.+8      	; 0x3db2 <vfprintf+0x32e>
    3daa:	1e 15       	cp	r17, r14
    3dac:	10 f4       	brcc	.+4      	; 0x3db2 <vfprintf+0x32e>
    3dae:	e1 1a       	sub	r14, r17
    3db0:	01 c0       	rjmp	.+2      	; 0x3db4 <vfprintf+0x330>
    3db2:	ee 24       	eor	r14, r14
    3db4:	04 ff       	sbrs	r16, 4
    3db6:	0f c0       	rjmp	.+30     	; 0x3dd6 <vfprintf+0x352>
    3db8:	80 e3       	ldi	r24, 0x30	; 48
    3dba:	90 e0       	ldi	r25, 0x00	; 0
    3dbc:	b3 01       	movw	r22, r6
    3dbe:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3dc2:	02 ff       	sbrs	r16, 2
    3dc4:	1d c0       	rjmp	.+58     	; 0x3e00 <vfprintf+0x37c>
    3dc6:	01 fd       	sbrc	r16, 1
    3dc8:	03 c0       	rjmp	.+6      	; 0x3dd0 <vfprintf+0x34c>
    3dca:	88 e7       	ldi	r24, 0x78	; 120
    3dcc:	90 e0       	ldi	r25, 0x00	; 0
    3dce:	0e c0       	rjmp	.+28     	; 0x3dec <vfprintf+0x368>
    3dd0:	88 e5       	ldi	r24, 0x58	; 88
    3dd2:	90 e0       	ldi	r25, 0x00	; 0
    3dd4:	0b c0       	rjmp	.+22     	; 0x3dec <vfprintf+0x368>
    3dd6:	80 2f       	mov	r24, r16
    3dd8:	86 78       	andi	r24, 0x86	; 134
    3dda:	91 f0       	breq	.+36     	; 0x3e00 <vfprintf+0x37c>
    3ddc:	01 ff       	sbrs	r16, 1
    3dde:	02 c0       	rjmp	.+4      	; 0x3de4 <vfprintf+0x360>
    3de0:	8b e2       	ldi	r24, 0x2B	; 43
    3de2:	01 c0       	rjmp	.+2      	; 0x3de6 <vfprintf+0x362>
    3de4:	80 e2       	ldi	r24, 0x20	; 32
    3de6:	f7 fc       	sbrc	r15, 7
    3de8:	8d e2       	ldi	r24, 0x2D	; 45
    3dea:	90 e0       	ldi	r25, 0x00	; 0
    3dec:	b3 01       	movw	r22, r6
    3dee:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3df2:	06 c0       	rjmp	.+12     	; 0x3e00 <vfprintf+0x37c>
    3df4:	80 e3       	ldi	r24, 0x30	; 48
    3df6:	90 e0       	ldi	r25, 0x00	; 0
    3df8:	b3 01       	movw	r22, r6
    3dfa:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3dfe:	9a 94       	dec	r9
    3e00:	d9 14       	cp	r13, r9
    3e02:	c0 f3       	brcs	.-16     	; 0x3df4 <vfprintf+0x370>
    3e04:	da 94       	dec	r13
    3e06:	f1 01       	movw	r30, r2
    3e08:	ed 0d       	add	r30, r13
    3e0a:	f1 1d       	adc	r31, r1
    3e0c:	80 81       	ld	r24, Z
    3e0e:	90 e0       	ldi	r25, 0x00	; 0
    3e10:	b3 01       	movw	r22, r6
    3e12:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3e16:	dd 20       	and	r13, r13
    3e18:	a9 f7       	brne	.-22     	; 0x3e04 <vfprintf+0x380>
    3e1a:	06 c0       	rjmp	.+12     	; 0x3e28 <vfprintf+0x3a4>
    3e1c:	80 e2       	ldi	r24, 0x20	; 32
    3e1e:	90 e0       	ldi	r25, 0x00	; 0
    3e20:	b3 01       	movw	r22, r6
    3e22:	0e 94 45 1f 	call	0x3e8a	; 0x3e8a <fputc>
    3e26:	ea 94       	dec	r14
    3e28:	ee 20       	and	r14, r14
    3e2a:	c1 f7       	brne	.-16     	; 0x3e1c <vfprintf+0x398>
    3e2c:	43 ce       	rjmp	.-890    	; 0x3ab4 <vfprintf+0x30>
    3e2e:	f3 01       	movw	r30, r6
    3e30:	66 81       	ldd	r22, Z+6	; 0x06
    3e32:	77 81       	ldd	r23, Z+7	; 0x07
    3e34:	cb 01       	movw	r24, r22
    3e36:	2b 96       	adiw	r28, 0x0b	; 11
    3e38:	e2 e1       	ldi	r30, 0x12	; 18
    3e3a:	0c 94 d9 1c 	jmp	0x39b2	; 0x39b2 <__epilogue_restores__>

00003e3e <strnlen_P>:
    3e3e:	fc 01       	movw	r30, r24
    3e40:	05 90       	lpm	r0, Z+
    3e42:	61 50       	subi	r22, 0x01	; 1
    3e44:	70 40       	sbci	r23, 0x00	; 0
    3e46:	01 10       	cpse	r0, r1
    3e48:	d8 f7       	brcc	.-10     	; 0x3e40 <strnlen_P+0x2>
    3e4a:	80 95       	com	r24
    3e4c:	90 95       	com	r25
    3e4e:	8e 0f       	add	r24, r30
    3e50:	9f 1f       	adc	r25, r31
    3e52:	08 95       	ret

00003e54 <strnlen>:
    3e54:	fc 01       	movw	r30, r24
    3e56:	61 50       	subi	r22, 0x01	; 1
    3e58:	70 40       	sbci	r23, 0x00	; 0
    3e5a:	01 90       	ld	r0, Z+
    3e5c:	01 10       	cpse	r0, r1
    3e5e:	d8 f7       	brcc	.-10     	; 0x3e56 <strnlen+0x2>
    3e60:	80 95       	com	r24
    3e62:	90 95       	com	r25
    3e64:	8e 0f       	add	r24, r30
    3e66:	9f 1f       	adc	r25, r31
    3e68:	08 95       	ret

00003e6a <strrev>:
    3e6a:	dc 01       	movw	r26, r24
    3e6c:	fc 01       	movw	r30, r24
    3e6e:	67 2f       	mov	r22, r23
    3e70:	71 91       	ld	r23, Z+
    3e72:	77 23       	and	r23, r23
    3e74:	e1 f7       	brne	.-8      	; 0x3e6e <strrev+0x4>
    3e76:	32 97       	sbiw	r30, 0x02	; 2
    3e78:	04 c0       	rjmp	.+8      	; 0x3e82 <strrev+0x18>
    3e7a:	7c 91       	ld	r23, X
    3e7c:	6d 93       	st	X+, r22
    3e7e:	70 83       	st	Z, r23
    3e80:	62 91       	ld	r22, -Z
    3e82:	ae 17       	cp	r26, r30
    3e84:	bf 07       	cpc	r27, r31
    3e86:	c8 f3       	brcs	.-14     	; 0x3e7a <strrev+0x10>
    3e88:	08 95       	ret

00003e8a <fputc>:
    3e8a:	0f 93       	push	r16
    3e8c:	1f 93       	push	r17
    3e8e:	cf 93       	push	r28
    3e90:	df 93       	push	r29
    3e92:	8c 01       	movw	r16, r24
    3e94:	eb 01       	movw	r28, r22
    3e96:	8b 81       	ldd	r24, Y+3	; 0x03
    3e98:	81 ff       	sbrs	r24, 1
    3e9a:	1b c0       	rjmp	.+54     	; 0x3ed2 <fputc+0x48>
    3e9c:	82 ff       	sbrs	r24, 2
    3e9e:	0d c0       	rjmp	.+26     	; 0x3eba <fputc+0x30>
    3ea0:	2e 81       	ldd	r18, Y+6	; 0x06
    3ea2:	3f 81       	ldd	r19, Y+7	; 0x07
    3ea4:	8c 81       	ldd	r24, Y+4	; 0x04
    3ea6:	9d 81       	ldd	r25, Y+5	; 0x05
    3ea8:	28 17       	cp	r18, r24
    3eaa:	39 07       	cpc	r19, r25
    3eac:	64 f4       	brge	.+24     	; 0x3ec6 <fputc+0x3c>
    3eae:	e8 81       	ld	r30, Y
    3eb0:	f9 81       	ldd	r31, Y+1	; 0x01
    3eb2:	01 93       	st	Z+, r16
    3eb4:	f9 83       	std	Y+1, r31	; 0x01
    3eb6:	e8 83       	st	Y, r30
    3eb8:	06 c0       	rjmp	.+12     	; 0x3ec6 <fputc+0x3c>
    3eba:	e8 85       	ldd	r30, Y+8	; 0x08
    3ebc:	f9 85       	ldd	r31, Y+9	; 0x09
    3ebe:	80 2f       	mov	r24, r16
    3ec0:	09 95       	icall
    3ec2:	89 2b       	or	r24, r25
    3ec4:	31 f4       	brne	.+12     	; 0x3ed2 <fputc+0x48>
    3ec6:	8e 81       	ldd	r24, Y+6	; 0x06
    3ec8:	9f 81       	ldd	r25, Y+7	; 0x07
    3eca:	01 96       	adiw	r24, 0x01	; 1
    3ecc:	9f 83       	std	Y+7, r25	; 0x07
    3ece:	8e 83       	std	Y+6, r24	; 0x06
    3ed0:	02 c0       	rjmp	.+4      	; 0x3ed6 <fputc+0x4c>
    3ed2:	0f ef       	ldi	r16, 0xFF	; 255
    3ed4:	1f ef       	ldi	r17, 0xFF	; 255
    3ed6:	c8 01       	movw	r24, r16
    3ed8:	df 91       	pop	r29
    3eda:	cf 91       	pop	r28
    3edc:	1f 91       	pop	r17
    3ede:	0f 91       	pop	r16
    3ee0:	08 95       	ret

00003ee2 <__ultoa_invert>:
    3ee2:	fa 01       	movw	r30, r20
    3ee4:	aa 27       	eor	r26, r26
    3ee6:	28 30       	cpi	r18, 0x08	; 8
    3ee8:	51 f1       	breq	.+84     	; 0x3f3e <__ultoa_invert+0x5c>
    3eea:	20 31       	cpi	r18, 0x10	; 16
    3eec:	81 f1       	breq	.+96     	; 0x3f4e <__ultoa_invert+0x6c>
    3eee:	e8 94       	clt
    3ef0:	6f 93       	push	r22
    3ef2:	6e 7f       	andi	r22, 0xFE	; 254
    3ef4:	6e 5f       	subi	r22, 0xFE	; 254
    3ef6:	7f 4f       	sbci	r23, 0xFF	; 255
    3ef8:	8f 4f       	sbci	r24, 0xFF	; 255
    3efa:	9f 4f       	sbci	r25, 0xFF	; 255
    3efc:	af 4f       	sbci	r26, 0xFF	; 255
    3efe:	b1 e0       	ldi	r27, 0x01	; 1
    3f00:	3e d0       	rcall	.+124    	; 0x3f7e <__ultoa_invert+0x9c>
    3f02:	b4 e0       	ldi	r27, 0x04	; 4
    3f04:	3c d0       	rcall	.+120    	; 0x3f7e <__ultoa_invert+0x9c>
    3f06:	67 0f       	add	r22, r23
    3f08:	78 1f       	adc	r23, r24
    3f0a:	89 1f       	adc	r24, r25
    3f0c:	9a 1f       	adc	r25, r26
    3f0e:	a1 1d       	adc	r26, r1
    3f10:	68 0f       	add	r22, r24
    3f12:	79 1f       	adc	r23, r25
    3f14:	8a 1f       	adc	r24, r26
    3f16:	91 1d       	adc	r25, r1
    3f18:	a1 1d       	adc	r26, r1
    3f1a:	6a 0f       	add	r22, r26
    3f1c:	71 1d       	adc	r23, r1
    3f1e:	81 1d       	adc	r24, r1
    3f20:	91 1d       	adc	r25, r1
    3f22:	a1 1d       	adc	r26, r1
    3f24:	20 d0       	rcall	.+64     	; 0x3f66 <__ultoa_invert+0x84>
    3f26:	09 f4       	brne	.+2      	; 0x3f2a <__ultoa_invert+0x48>
    3f28:	68 94       	set
    3f2a:	3f 91       	pop	r19
    3f2c:	2a e0       	ldi	r18, 0x0A	; 10
    3f2e:	26 9f       	mul	r18, r22
    3f30:	11 24       	eor	r1, r1
    3f32:	30 19       	sub	r19, r0
    3f34:	30 5d       	subi	r19, 0xD0	; 208
    3f36:	31 93       	st	Z+, r19
    3f38:	de f6       	brtc	.-74     	; 0x3ef0 <__ultoa_invert+0xe>
    3f3a:	cf 01       	movw	r24, r30
    3f3c:	08 95       	ret
    3f3e:	46 2f       	mov	r20, r22
    3f40:	47 70       	andi	r20, 0x07	; 7
    3f42:	40 5d       	subi	r20, 0xD0	; 208
    3f44:	41 93       	st	Z+, r20
    3f46:	b3 e0       	ldi	r27, 0x03	; 3
    3f48:	0f d0       	rcall	.+30     	; 0x3f68 <__ultoa_invert+0x86>
    3f4a:	c9 f7       	brne	.-14     	; 0x3f3e <__ultoa_invert+0x5c>
    3f4c:	f6 cf       	rjmp	.-20     	; 0x3f3a <__ultoa_invert+0x58>
    3f4e:	46 2f       	mov	r20, r22
    3f50:	4f 70       	andi	r20, 0x0F	; 15
    3f52:	40 5d       	subi	r20, 0xD0	; 208
    3f54:	4a 33       	cpi	r20, 0x3A	; 58
    3f56:	18 f0       	brcs	.+6      	; 0x3f5e <__ultoa_invert+0x7c>
    3f58:	49 5d       	subi	r20, 0xD9	; 217
    3f5a:	31 fd       	sbrc	r19, 1
    3f5c:	40 52       	subi	r20, 0x20	; 32
    3f5e:	41 93       	st	Z+, r20
    3f60:	02 d0       	rcall	.+4      	; 0x3f66 <__ultoa_invert+0x84>
    3f62:	a9 f7       	brne	.-22     	; 0x3f4e <__ultoa_invert+0x6c>
    3f64:	ea cf       	rjmp	.-44     	; 0x3f3a <__ultoa_invert+0x58>
    3f66:	b4 e0       	ldi	r27, 0x04	; 4
    3f68:	a6 95       	lsr	r26
    3f6a:	97 95       	ror	r25
    3f6c:	87 95       	ror	r24
    3f6e:	77 95       	ror	r23
    3f70:	67 95       	ror	r22
    3f72:	ba 95       	dec	r27
    3f74:	c9 f7       	brne	.-14     	; 0x3f68 <__ultoa_invert+0x86>
    3f76:	00 97       	sbiw	r24, 0x00	; 0
    3f78:	61 05       	cpc	r22, r1
    3f7a:	71 05       	cpc	r23, r1
    3f7c:	08 95       	ret
    3f7e:	9b 01       	movw	r18, r22
    3f80:	ac 01       	movw	r20, r24
    3f82:	0a 2e       	mov	r0, r26
    3f84:	06 94       	lsr	r0
    3f86:	57 95       	ror	r21
    3f88:	47 95       	ror	r20
    3f8a:	37 95       	ror	r19
    3f8c:	27 95       	ror	r18
    3f8e:	ba 95       	dec	r27
    3f90:	c9 f7       	brne	.-14     	; 0x3f84 <__ultoa_invert+0xa2>
    3f92:	62 0f       	add	r22, r18
    3f94:	73 1f       	adc	r23, r19
    3f96:	84 1f       	adc	r24, r20
    3f98:	95 1f       	adc	r25, r21
    3f9a:	a0 1d       	adc	r26, r0
    3f9c:	08 95       	ret

00003f9e <__udivmodhi4>:
    3f9e:	aa 1b       	sub	r26, r26
    3fa0:	bb 1b       	sub	r27, r27
    3fa2:	51 e1       	ldi	r21, 0x11	; 17
    3fa4:	07 c0       	rjmp	.+14     	; 0x3fb4 <__udivmodhi4_ep>

00003fa6 <__udivmodhi4_loop>:
    3fa6:	aa 1f       	adc	r26, r26
    3fa8:	bb 1f       	adc	r27, r27
    3faa:	a6 17       	cp	r26, r22
    3fac:	b7 07       	cpc	r27, r23
    3fae:	10 f0       	brcs	.+4      	; 0x3fb4 <__udivmodhi4_ep>
    3fb0:	a6 1b       	sub	r26, r22
    3fb2:	b7 0b       	sbc	r27, r23

00003fb4 <__udivmodhi4_ep>:
    3fb4:	88 1f       	adc	r24, r24
    3fb6:	99 1f       	adc	r25, r25
    3fb8:	5a 95       	dec	r21
    3fba:	a9 f7       	brne	.-22     	; 0x3fa6 <__udivmodhi4_loop>
    3fbc:	80 95       	com	r24
    3fbe:	90 95       	com	r25
    3fc0:	bc 01       	movw	r22, r24
    3fc2:	cd 01       	movw	r24, r26
    3fc4:	08 95       	ret

00003fc6 <_exit>:
    3fc6:	f8 94       	cli

00003fc8 <__stop_program>:
    3fc8:	ff cf       	rjmp	.-2      	; 0x3fc8 <__stop_program>
