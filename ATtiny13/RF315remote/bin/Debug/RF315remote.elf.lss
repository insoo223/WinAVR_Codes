
bin\Debug\RF315remote.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000216  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .debug_aranges 00000020  00000000  00000000  0000026a  2**0
                  CONTENTS, READONLY, DEBUGGING
  2 .debug_pubnames 00000040  00000000  00000000  0000028a  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   000000ff  00000000  00000000  000002ca  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000000a3  00000000  00000000  000003c9  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   00000158  00000000  00000000  0000046c  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  00000050  00000000  00000000  000005c4  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    000000a3  00000000  00000000  00000614  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	09 c0       	rjmp	.+18     	; 0x14 <__ctors_end>
   2:	0e c0       	rjmp	.+28     	; 0x20 <__bad_interrupt>
   4:	0e c0       	rjmp	.+28     	; 0x22 <__vector_2>
   6:	0c c0       	rjmp	.+24     	; 0x20 <__bad_interrupt>
   8:	0b c0       	rjmp	.+22     	; 0x20 <__bad_interrupt>
   a:	0a c0       	rjmp	.+20     	; 0x20 <__bad_interrupt>
   c:	09 c0       	rjmp	.+18     	; 0x20 <__bad_interrupt>
   e:	08 c0       	rjmp	.+16     	; 0x20 <__bad_interrupt>
  10:	07 c0       	rjmp	.+14     	; 0x20 <__bad_interrupt>
  12:	06 c0       	rjmp	.+12     	; 0x20 <__bad_interrupt>

00000014 <__ctors_end>:
  14:	11 24       	eor	r1, r1
  16:	1f be       	out	0x3f, r1	; 63
  18:	cf e9       	ldi	r28, 0x9F	; 159
  1a:	cd bf       	out	0x3d, r28	; 61
  1c:	4d d0       	rcall	.+154    	; 0xb8 <main>
  1e:	f9 c0       	rjmp	.+498    	; 0x212 <_exit>

00000020 <__bad_interrupt>:
  20:	ef cf       	rjmp	.-34     	; 0x0 <__vectors>

00000022 <__vector_2>:
void ioinit(void);
void readRF(char*);
//======================

ISR(PCINT0_vect)
{
  22:	1f 92       	push	r1
  24:	0f 92       	push	r0
  26:	0f b6       	in	r0, 0x3f	; 63
  28:	0f 92       	push	r0
  2a:	11 24       	eor	r1, r1
  2c:	2f 93       	push	r18
  2e:	3f 93       	push	r19
  30:	4f 93       	push	r20
  32:	5f 93       	push	r21
  34:	6f 93       	push	r22
  36:	7f 93       	push	r23
  38:	8f 93       	push	r24
  3a:	9f 93       	push	r25
  3c:	af 93       	push	r26
  3e:	bf 93       	push	r27
  40:	ef 93       	push	r30
  42:	ff 93       	push	r31
  44:	df 93       	push	r29
  46:	cf 93       	push	r28
  48:	0f 92       	push	r0
  4a:	cd b7       	in	r28, 0x3d	; 61
  4c:	de b7       	in	r29, 0x3e	; 62
    char val;

    readRF(&val);
  4e:	ce 01       	movw	r24, r28
  50:	01 96       	adiw	r24, 0x01	; 1
  52:	87 d0       	rcall	.+270    	; 0x162 <readRF>
    //if (val & 0x08) // always ON
    //if (val & 0x04) // always ON
    //if (val & 0x10) // Button D
    //if (val & 0x40) // always ON
    //if (val & 0x80) // always OFF
    if (val & 0x20) // Button B
  54:	89 81       	ldd	r24, Y+1	; 0x01
  56:	99 27       	eor	r25, r25
  58:	87 fd       	sbrc	r24, 7
  5a:	90 95       	com	r25
  5c:	80 72       	andi	r24, 0x20	; 32
  5e:	90 70       	andi	r25, 0x00	; 0
  60:	00 97       	sbiw	r24, 0x00	; 0
  62:	39 f0       	breq	.+14     	; 0x72 <__SREG__+0x33>
        PORTB |= _BV(PB3);
  64:	a8 e3       	ldi	r26, 0x38	; 56
  66:	b0 e0       	ldi	r27, 0x00	; 0
  68:	e8 e3       	ldi	r30, 0x38	; 56
  6a:	f0 e0       	ldi	r31, 0x00	; 0
  6c:	80 81       	ld	r24, Z
  6e:	88 60       	ori	r24, 0x08	; 8
  70:	8c 93       	st	X, r24

    if (val & 0x10) // Button D
  72:	89 81       	ldd	r24, Y+1	; 0x01
  74:	99 27       	eor	r25, r25
  76:	87 fd       	sbrc	r24, 7
  78:	90 95       	com	r25
  7a:	80 71       	andi	r24, 0x10	; 16
  7c:	90 70       	andi	r25, 0x00	; 0
  7e:	00 97       	sbiw	r24, 0x00	; 0
  80:	39 f0       	breq	.+14     	; 0x90 <__SREG__+0x51>
        PORTB &= ~_BV(PB3);
  82:	a8 e3       	ldi	r26, 0x38	; 56
  84:	b0 e0       	ldi	r27, 0x00	; 0
  86:	e8 e3       	ldi	r30, 0x38	; 56
  88:	f0 e0       	ldi	r31, 0x00	; 0
  8a:	80 81       	ld	r24, Z
  8c:	87 7f       	andi	r24, 0xF7	; 247
  8e:	8c 93       	st	X, r24
}//ISR(PCINT0_vect)
  90:	0f 90       	pop	r0
  92:	cf 91       	pop	r28
  94:	df 91       	pop	r29
  96:	ff 91       	pop	r31
  98:	ef 91       	pop	r30
  9a:	bf 91       	pop	r27
  9c:	af 91       	pop	r26
  9e:	9f 91       	pop	r25
  a0:	8f 91       	pop	r24
  a2:	7f 91       	pop	r23
  a4:	6f 91       	pop	r22
  a6:	5f 91       	pop	r21
  a8:	4f 91       	pop	r20
  aa:	3f 91       	pop	r19
  ac:	2f 91       	pop	r18
  ae:	0f 90       	pop	r0
  b0:	0f be       	out	0x3f, r0	; 63
  b2:	0f 90       	pop	r0
  b4:	1f 90       	pop	r1
  b6:	18 95       	reti

000000b8 <main>:

int main (void)
{
  b8:	df 93       	push	r29
  ba:	cf 93       	push	r28
  bc:	cd b7       	in	r28, 0x3d	; 61
  be:	de b7       	in	r29, 0x3e	; 62
    ioinit(); //Setup IO pins and defaults
  c0:	27 d0       	rcall	.+78     	; 0x110 <ioinit>

    // enable PC(Pin Change) interrupt
    GIMSK |= _BV(PCIE);  //Enable PC interrupt
  c2:	ab e5       	ldi	r26, 0x5B	; 91
  c4:	b0 e0       	ldi	r27, 0x00	; 0
  c6:	eb e5       	ldi	r30, 0x5B	; 91
  c8:	f0 e0       	ldi	r31, 0x00	; 0
  ca:	80 81       	ld	r24, Z
  cc:	80 62       	ori	r24, 0x20	; 32
  ce:	8c 93       	st	X, r24

    // Enable pin change interrupt for PBn
    PCMSK |= _BV(PCINT4);
  d0:	a5 e3       	ldi	r26, 0x35	; 53
  d2:	b0 e0       	ldi	r27, 0x00	; 0
  d4:	e5 e3       	ldi	r30, 0x35	; 53
  d6:	f0 e0       	ldi	r31, 0x00	; 0
  d8:	80 81       	ld	r24, Z
  da:	80 61       	ori	r24, 0x10	; 16
  dc:	8c 93       	st	X, r24

    // enable global interrupt
    sei();
  de:	78 94       	sei

    // Use the Power Down sleep mode
    set_sleep_mode(SLEEP_MODE_PWR_DOWN);
  e0:	a5 e5       	ldi	r26, 0x55	; 85
  e2:	b0 e0       	ldi	r27, 0x00	; 0
  e4:	e5 e5       	ldi	r30, 0x55	; 85
  e6:	f0 e0       	ldi	r31, 0x00	; 0
  e8:	80 81       	ld	r24, Z
  ea:	87 7e       	andi	r24, 0xE7	; 231
  ec:	80 61       	ori	r24, 0x10	; 16
  ee:	8c 93       	st	X, r24

    while(1) {
        sleep_mode();   // go to sleep and wait for interrupt...
  f0:	a5 e5       	ldi	r26, 0x55	; 85
  f2:	b0 e0       	ldi	r27, 0x00	; 0
  f4:	e5 e5       	ldi	r30, 0x55	; 85
  f6:	f0 e0       	ldi	r31, 0x00	; 0
  f8:	80 81       	ld	r24, Z
  fa:	80 62       	ori	r24, 0x20	; 32
  fc:	8c 93       	st	X, r24
  fe:	88 95       	sleep
 100:	a5 e5       	ldi	r26, 0x55	; 85
 102:	b0 e0       	ldi	r27, 0x00	; 0
 104:	e5 e5       	ldi	r30, 0x55	; 85
 106:	f0 e0       	ldi	r31, 0x00	; 0
 108:	80 81       	ld	r24, Z
 10a:	8f 7d       	andi	r24, 0xDF	; 223
 10c:	8c 93       	st	X, r24
 10e:	f0 cf       	rjmp	.-32     	; 0xf0 <main+0x38>

00000110 <ioinit>:
    }
}//main


void ioinit (void)
{
 110:	df 93       	push	r29
 112:	cf 93       	push	r28
 114:	cd b7       	in	r28, 0x3d	; 61
 116:	de b7       	in	r29, 0x3e	; 62
    DDRB  = 0x00; //1 = output, 0 = input
 118:	e7 e3       	ldi	r30, 0x37	; 55
 11a:	f0 e0       	ldi	r31, 0x00	; 0
 11c:	10 82       	st	Z, r1
    DDRB |= _BV(latchPin); //output
 11e:	a7 e3       	ldi	r26, 0x37	; 55
 120:	b0 e0       	ldi	r27, 0x00	; 0
 122:	e7 e3       	ldi	r30, 0x37	; 55
 124:	f0 e0       	ldi	r31, 0x00	; 0
 126:	80 81       	ld	r24, Z
 128:	81 60       	ori	r24, 0x01	; 1
 12a:	8c 93       	st	X, r24
    DDRB |= _BV(clockPin); //output
 12c:	a7 e3       	ldi	r26, 0x37	; 55
 12e:	b0 e0       	ldi	r27, 0x00	; 0
 130:	e7 e3       	ldi	r30, 0x37	; 55
 132:	f0 e0       	ldi	r31, 0x00	; 0
 134:	80 81       	ld	r24, Z
 136:	82 60       	ori	r24, 0x02	; 2
 138:	8c 93       	st	X, r24
    DDRB &= ~_BV(dataPin); //input
 13a:	a7 e3       	ldi	r26, 0x37	; 55
 13c:	b0 e0       	ldi	r27, 0x00	; 0
 13e:	e7 e3       	ldi	r30, 0x37	; 55
 140:	f0 e0       	ldi	r31, 0x00	; 0
 142:	80 81       	ld	r24, Z
 144:	8b 7f       	andi	r24, 0xFB	; 251
 146:	8c 93       	st	X, r24
    DDRB |= _BV(relayPin); //output
 148:	a7 e3       	ldi	r26, 0x37	; 55
 14a:	b0 e0       	ldi	r27, 0x00	; 0
 14c:	e7 e3       	ldi	r30, 0x37	; 55
 14e:	f0 e0       	ldi	r31, 0x00	; 0
 150:	80 81       	ld	r24, Z
 152:	88 60       	ori	r24, 0x08	; 8
 154:	8c 93       	st	X, r24

    PORTB = 0x00;
 156:	e8 e3       	ldi	r30, 0x38	; 56
 158:	f0 e0       	ldi	r31, 0x00	; 0
 15a:	10 82       	st	Z, r1
}//ioinit
 15c:	cf 91       	pop	r28
 15e:	df 91       	pop	r29
 160:	08 95       	ret

00000162 <readRF>:


void readRF(char* val)
{
 162:	df 93       	push	r29
 164:	cf 93       	push	r28
 166:	00 d0       	rcall	.+0      	; 0x168 <readRF+0x6>
 168:	00 d0       	rcall	.+0      	; 0x16a <readRF+0x8>
 16a:	0f 92       	push	r0
 16c:	cd b7       	in	r28, 0x3d	; 61
 16e:	de b7       	in	r29, 0x3e	; 62
 170:	9d 83       	std	Y+5, r25	; 0x05
 172:	8c 83       	std	Y+4, r24	; 0x04
    int i;
    char inputData=0;
 174:	19 82       	std	Y+1, r1	; 0x01

    clockLow();
 176:	a8 e3       	ldi	r26, 0x38	; 56
 178:	b0 e0       	ldi	r27, 0x00	; 0
 17a:	e8 e3       	ldi	r30, 0x38	; 56
 17c:	f0 e0       	ldi	r31, 0x00	; 0
 17e:	80 81       	ld	r24, Z
 180:	8d 7f       	andi	r24, 0xFD	; 253
 182:	8c 93       	st	X, r24
    latchLow();
 184:	a8 e3       	ldi	r26, 0x38	; 56
 186:	b0 e0       	ldi	r27, 0x00	; 0
 188:	e8 e3       	ldi	r30, 0x38	; 56
 18a:	f0 e0       	ldi	r31, 0x00	; 0
 18c:	80 81       	ld	r24, Z
 18e:	8e 7f       	andi	r24, 0xFE	; 254
 190:	8c 93       	st	X, r24
    for (i=7;i>=0;i--)
 192:	87 e0       	ldi	r24, 0x07	; 7
 194:	90 e0       	ldi	r25, 0x00	; 0
 196:	9b 83       	std	Y+3, r25	; 0x03
 198:	8a 83       	std	Y+2, r24	; 0x02
 19a:	24 c0       	rjmp	.+72     	; 0x1e4 <readRF+0x82>
    {
        inputData |= (PINB & _BV(dataPin)) << i;
 19c:	e6 e3       	ldi	r30, 0x36	; 54
 19e:	f0 e0       	ldi	r31, 0x00	; 0
 1a0:	80 81       	ld	r24, Z
 1a2:	88 2f       	mov	r24, r24
 1a4:	90 e0       	ldi	r25, 0x00	; 0
 1a6:	84 70       	andi	r24, 0x04	; 4
 1a8:	90 70       	andi	r25, 0x00	; 0
 1aa:	0a 80       	ldd	r0, Y+2	; 0x02
 1ac:	02 c0       	rjmp	.+4      	; 0x1b2 <readRF+0x50>
 1ae:	88 0f       	add	r24, r24
 1b0:	99 1f       	adc	r25, r25
 1b2:	0a 94       	dec	r0
 1b4:	e2 f7       	brpl	.-8      	; 0x1ae <readRF+0x4c>
 1b6:	98 2f       	mov	r25, r24
 1b8:	89 81       	ldd	r24, Y+1	; 0x01
 1ba:	89 2b       	or	r24, r25
 1bc:	89 83       	std	Y+1, r24	; 0x01
        clockHi();
 1be:	a8 e3       	ldi	r26, 0x38	; 56
 1c0:	b0 e0       	ldi	r27, 0x00	; 0
 1c2:	e8 e3       	ldi	r30, 0x38	; 56
 1c4:	f0 e0       	ldi	r31, 0x00	; 0
 1c6:	80 81       	ld	r24, Z
 1c8:	82 60       	ori	r24, 0x02	; 2
 1ca:	8c 93       	st	X, r24
        clockLow();
 1cc:	a8 e3       	ldi	r26, 0x38	; 56
 1ce:	b0 e0       	ldi	r27, 0x00	; 0
 1d0:	e8 e3       	ldi	r30, 0x38	; 56
 1d2:	f0 e0       	ldi	r31, 0x00	; 0
 1d4:	80 81       	ld	r24, Z
 1d6:	8d 7f       	andi	r24, 0xFD	; 253
 1d8:	8c 93       	st	X, r24
    int i;
    char inputData=0;

    clockLow();
    latchLow();
    for (i=7;i>=0;i--)
 1da:	8a 81       	ldd	r24, Y+2	; 0x02
 1dc:	9b 81       	ldd	r25, Y+3	; 0x03
 1de:	01 97       	sbiw	r24, 0x01	; 1
 1e0:	9b 83       	std	Y+3, r25	; 0x03
 1e2:	8a 83       	std	Y+2, r24	; 0x02
 1e4:	8a 81       	ldd	r24, Y+2	; 0x02
 1e6:	9b 81       	ldd	r25, Y+3	; 0x03
 1e8:	99 23       	and	r25, r25
 1ea:	c4 f6       	brge	.-80     	; 0x19c <readRF+0x3a>
    {
        inputData |= (PINB & _BV(dataPin)) << i;
        clockHi();
        clockLow();
    }
    latchHi();
 1ec:	a8 e3       	ldi	r26, 0x38	; 56
 1ee:	b0 e0       	ldi	r27, 0x00	; 0
 1f0:	e8 e3       	ldi	r30, 0x38	; 56
 1f2:	f0 e0       	ldi	r31, 0x00	; 0
 1f4:	80 81       	ld	r24, Z
 1f6:	81 60       	ori	r24, 0x01	; 1
 1f8:	8c 93       	st	X, r24

    *val = inputData;
 1fa:	ec 81       	ldd	r30, Y+4	; 0x04
 1fc:	fd 81       	ldd	r31, Y+5	; 0x05
 1fe:	89 81       	ldd	r24, Y+1	; 0x01
 200:	80 83       	st	Z, r24

}//readRF
 202:	0f 90       	pop	r0
 204:	0f 90       	pop	r0
 206:	0f 90       	pop	r0
 208:	0f 90       	pop	r0
 20a:	0f 90       	pop	r0
 20c:	cf 91       	pop	r28
 20e:	df 91       	pop	r29
 210:	08 95       	ret

00000212 <_exit>:
 212:	f8 94       	cli

00000214 <__stop_program>:
 214:	ff cf       	rjmp	.-2      	; 0x214 <__stop_program>
